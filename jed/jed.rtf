{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;}{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;
\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{
\s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\adjustright \b\i\f1\cgrid \sbasedon0 \snext0 heading 2;}{\s3\fi-720\li720\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx720\ls1\ilvl2\adjustright \f1\cgrid 
\sbasedon0 \snext0 heading 3;}{\s4\fi-864\li864\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx864\ls1\ilvl3\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 4;}{\s5\fi-1008\li1008\sb240\sa60\nowidctlpar\widctlpar
\jclisttab\tx1008\ls1\ilvl4\adjustright \fs22\cgrid \sbasedon0 \snext0 heading 5;}{\s6\fi-1152\li1152\sb240\sa60\nowidctlpar\widctlpar\jclisttab\tx1152\ls1\ilvl5\adjustright \i\fs22\cgrid \sbasedon0 \snext0 heading 6;}{
\s7\fi-1296\li1296\sb240\sa60\nowidctlpar\widctlpar\jclisttab\tx1296\ls1\ilvl6\adjustright \f1\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\fi-1440\li1440\sb240\sa60\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl7\adjustright \i\f1\fs20\cgrid 
\sbasedon0 \snext0 heading 8;}{\s9\fi-1584\li1584\sb240\sa60\nowidctlpar\widctlpar\jclisttab\tx1584\ls1\ilvl8\adjustright \b\i\f1\fs18\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\widctlpar
\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext15 header;}{\s16\qc\sb240\sa60\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext16 Title;}{\s17\nowidctlpar\widctlpar
\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext17 footer;}{\*\cs18 \additive \sbasedon10 page number;}}{\*\listtable{\list\listtemplateid-587821556\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'07Line \'00);}{\levelnumbers\'06;}\fi-360\li360\jclisttab\tx720 }{\listname ;}\listid110901980}{\list\listtemplateid1898491602\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\'01\u-4051 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid227499678}{\list\listtemplateid1635294666\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\cf0\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid229509958}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid712850260}{\list\listtemplateid-1184186306{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'0cSection \'00 : ;}{\levelnumbers\'09;}\s1\fi-432\li432\jclisttab\tx1800 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0c Part \'00.\'01 : ;}{\levelnumbers\'07\'09;}\s2\fi-576\li576\jclisttab\tx1440 }
{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\s3\fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\s4\fi-864\li864\jclisttab\tx864 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers
\'01\'03\'05\'07\'09;}\s5\fi-1008\li1008\jclisttab\tx1008 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\s6\fi-1152\li1152
\jclisttab\tx1152 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\s7\fi-1296\li1296\jclisttab\tx1296 }{\listlevel\levelnfc0
\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\s8\fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\s9\fi-1584\li1584\jclisttab\tx1584 }{\listname ;}\listid885916587}{\list\listtemplateid67698705
\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00);}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1388721841}{\list\listtemplateid67698705\listsimple{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00);}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1548561961}{\list\listtemplateid1635294666\listsimple{\listlevel\levelnfc23
\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\cf0\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1683390095}}{\*\listoverridetable{\listoverride\listid885916587\listoverridecount0\ls1
}{\listoverride\listid1548561961\listoverridecount0\ls2}{\listoverride\listid712850260\listoverridecount0\ls3}{\listoverride\listid227499678\listoverridecount0\ls4}{\listoverride\listid1683390095\listoverridecount0\ls5}{\listoverride\listid229509958
\listoverridecount0\ls6}{\listoverride\listid1388721841\listoverridecount0\ls7}{\listoverride\listid110901980\listoverridecount0\ls8}}{\info{\title JED}{\author Gregory Smith}{\operator Gregory Smith}{\creatim\yr2001\mo3\dy11\hr21\min25}
{\revtim\yr2001\mo3\dy11\hr21\min25}{\printim\yr2001\mo3\dy10\hr1\min8}{\version2}{\edmins0}{\nofpages16}{\nofwords4113}{\nofchars23449}{\*\company The Alcor Group}{\nofcharsws28797}{\vern71}}
\widowctrl\ftnbj\aenddoc\formshade\viewkind1\viewscale114\viewzk2\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\footery432\endnhere\titlepg\sectdefaultcl {\header \pard\plain \s15\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid {\tab }{
\f1\fs24 Jed V1.0
\par \tab User's Guide}{
\par }}{\footer \pard\plain \s17\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid {\tab }{\field{\*\fldinst {\cs18  PAGE }}{\fldrslt {\cs18\lang1024 16}}}{\cs18  / }{\field{\*\fldinst {\cs18  NUMPAGES }}{\fldrslt {\cs18\lang1024 1}}}{\cs18 
\tab 3/10/2001
\par 
\par \tab \'a9 Copyright 2001
\par \tab The Alcor Group, Inc.}{
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s16\qc\sb240\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid {JED V1.0
\par The Alternative Graphical User Interface
\par For the Cybiko Handheld Computer
\par }\pard\plain \qc\sb240\nowidctlpar\widctlpar\adjustright \fs20\cgrid {By Greg Smith
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 1 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Introduction
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 1.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Audience
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The audience for this document is the Cybiko programmer who wishes to add a simple graphical user interface to their a
pplication.  Therefore the reader is expected to be a C programmer and familiar with the Cybiko SDK.  The reader is also expected to have completed the tutorial programs steps 1-5.  The reader should know how to create and modify makefiles or at least cre
ate batch files to compile and link applications.  These are the minimum requirements for reading and applying the information in this document.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 1.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {A New GUI
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {When I first started programming the Cybiko I was very pleased with the ease with which I could write 
new programs.  I could easily modify the existing applications to do variations on a theme.  Then I ventured out to create my own applications and delved into Cybiko's Graphical User Interface.  I found it cumbersome as a user and challenging 
as a programmer.  So I decided to write my own GUI.  I wanted to create something simple to understand, easy to look at, and easy to use - both as a user and as a programmer.
\par 
\par This new GUI borrows its look and feel from the Motif windowing system.  This is 
a popular windowing environment used in Unix/Linux systems and is a cousin to the Microsoft Windows look and feel.  The design is characterized by using a light gray background and 3-D effects.  I hope that this design will be more familiar to the user co
mmunity and therefore will be embraced by them.  The font used for the GUI defaults to mini_normal_font but the programmer can set the font for the entire application to any font they like.  Each item can also be tagged individually with its own font.

\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 1.3 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Goals for a new GUI
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
The first and most important goal for the new GUI was to make it easier for the programmer to write and maintain the code making up a Cybiko GUI application.  Secondly, the GUI had to be easy to use for the user and be a recognizable interfa
ce - something the user may already have used in the past.  Finally, the internal structure of the GUI had to be as simple as possible - making it easy to maintain (for me) and also less prone to errors.  I believe these goals have been met in Jed V1.0.

\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 1.4 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {The Deliverables
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
The Jed GUI is delivered as a single object module (jed.o) which you link into your application.  It adds less than 5KB to the size of your application.  The header file (jed.h) is included at the top of your source file.  These two files to
gether (and this manual) comprise all of the necessary ingredients to create a Jed application.
\par 
\par There are also 2 sample programs demonstrating how to use the Jed interface.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 1.5 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {The Name
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {I wish that I could say that there is some significance to the acronym J.E.D.  Surely I have tried to come up with one.  But the fact is that the GUI i
s named after the character Buddy Ebson made famous on the Beverly Hillbillies - Jed Clampett.  I happen to be a big fan of the show, especially the early, black and white episodes.
\par 
\par Jed (the man) is a simple unassuming character.  He dresses in plain grays and whites.  His clothes are worn, but always clean.  Jed (the GUI) is fashioned in his image.  Gray-scales, well-worn metaphors, and a clean interface.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 1.6 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Some History
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed (the GUI again) was first implemented on a VT100 terminal emulator for a Sun Microsystems Solaris U
nix system.  I needed a nice text-based user interface for some software which I ran over the phone lines.  The users had become quite accustomed to GUIs and had come to expect ease of use in their interfaces.  
\par 
\par So I created Jed (the curses based interfac
e).  It was characterized by having only 3 classes of item - the text item (non-modifiable text used for labels), the string item (single-line data entry), and the button item (a field which when highlighted performed some action).  This was a very popula
r model both with users and with programmers.  Later the model was expanded to include other item classes and was converted to a Graphical User Interface.
\par 
\par Today, Jed is reincarnated for the Cybiko.  This is all new code, only the concepts from the early cur
ses-based Jed are inherited.  Jed for Cybiko makes not only the GUI easier to write, but also makes message processing easier to handle.  All the keyboard events are handled for you and any message that comes to your application is passed to the Jed_proce
ss_message() function (which you supply).  You can even handle polling events (timeouts to make your application animated, for instance).
\par 
\par Version 1.0 of Jed does not handle bitmaps directly, but you can still call Cybiko functions to interact with bitmaps and other Cybiko internals.
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 2 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed Operating Model
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 2.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Forms
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
A Jed form is a collection of items.  Items can be Text (single-line non-modifiable text), String (single-line modifiable text), Console (multi-line non-modifiable text with scrolling), List (selectable text items), and Button (rectangular regions
 which perform an action).  You may have as many forms in an application as you have RAM to accommodate them.  You may have as many items in a form as you have RAM to accommodate them, too.
\par 
\par Once a form is created, it is displayed  by calling }{\b Jed_main}{().  The }{\b Jed_main}{() function handles all keyboard events which make the Jed GUI operate.  }{\b Jed_main}{
() returns when the user presses the Enter key over an item (List, String, or Button).  It is up to the application program to determine which item caused the return and process the form.
\par 
\par During }{\b Jed_main}{() it is possible that another message has come into the application's queue.  When that occurs, the user-supplied function }{\b Jed_process_message}{() is called.  It is passed a 
pointer to the current form and a pointer to the message.  }{\b Jed_process_message}{() returns either a False or a True value.  If False is returned, the message is assumed to be not handled by you and is passed to the default message handler.  If True
 is returned, the message is assumed to have been handled by you and is not passed to the default message handler.  In either case, the message is deleted by Jed_main().
\par 
\par }{\i Note: In Jed V1.0 all keyboard events are swallowed by }{\b\i Jed_main}{\i ().  This means that the Help key does not work as expected.  This is considered a bug and will be fixed in the next release.
\par }{
\par In the event of a timeout, the message pointer passed to }{\b Jed_process_message}{() will be NULL.  This alerts you to a timeout and allows you to add animation or polling to your application.
\par 
\par When the form is no longer needed, it can be destroyed with }{\b Jed_close}{().  All RAM used by the form is free'd and further calls to the form will guarantee unpredictable results.
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 2.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Items
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Items are created with a }{\b <itemtype>_new}{() function and destroyed with a }{\b Jed_destroy_item}{
() function.  All items are string based.  This means that you set the item's value by passing it a string, and when you get an item's value you will receive a string.  Note that the string you receive "belongs"
 to the item.  Modifying it will generate unpredictable results.
\par 
\par The user navigates through the items using the TAB key.  The tab order between items is determined by the order in which they were created.  Only Button, String, List, and Console items can 
hold the current "selection".  Text items are not selectable.  When an item has the selection, it is painted with a white background and appears to be depressed into the screen.
\par 
\par If an item has the selection, you may use the arrow keys to manipulate it (ex
cept Buttons, the arrow keys have no effect on them).  When the item has the selection, then the Enter key becomes active.  If the Enter key is pressed  on a List, Button, or String item the Jed_main_loop() will end and return to the application with a po
inter to the item which last held the selection.  (The Console is a read-only item so pressing the Enter key has no effect)
\par 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {\page 
The Text Item does little more than display text.  The user has no interaction with the Text Item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls5\adjustright {
The Button Item is the action item.  When the user Tabs into the button it becomes "depressed" into the screen and turns white.  If the user presses the Enter key, control is returned to the calling application.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
The String Item allows the user to enter text into a field.  The following keys are operational inside the String Item:
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Letters and Numbers - inserts characters into the item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Left and Right arrow keys - move the cursor left and right
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Del - delete one character to the right of the cursor
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Bksp - delete one character to the left of the cursor
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Enter - returns control back to the application
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Tab - moves the selection to the next Item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Shift-letter - uppercases the letter
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Shift-Arrow - moves the cursor to the beginning or end of the item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Shift-Bksp - delete all text in the item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {Shift-Del -
 delete all characters to the right of the cursor
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls6\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls6\adjustright {
The Console Item is a multiline read-only text item.  When selected you can use the Up and Down arrow keys to scroll back and forth within the text.  (The limit to the scrolling is determined at the time th
e Console Item was created).  Pressing the Enter key in the Console Item has no effect.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls6\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls6\adjustright {
The List Item displays a list of strings only one of which can be selected at a time.  When the List Item is selected, the Up and Down arrow keys move the current selec
tion up and down.  When the Enter key is pressed, control returns to the calling application.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 2.3 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed Return Code (Jed_rc)
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {All Jed functions (with notable exceptions) return a Jed Return Code (Jed_rc).  This is a short integer describing the relative success o
f the call.  Currently all Jed functions return JED_SUCCESS - which is defined as zero.  In the future other error codes may be returned.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 2.4 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed Data Structures
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The Jed data structures are visible to the world, but only for my convenience.  Please, do not rel
y upon the internals of these structures in any way.  THEY WILL CHANGE WITH THE NEXT RELEASE.  Also in the next release I will have made them opaque so that the internals will be hidden from the caller.  YOU HAVE BEEN WARNED!
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 2.5 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {\page Jed Hello World Program

\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 1)\tab}}\pard\plain \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright \fs20\cgrid {\f6\fs16 
#include "jed.h"
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f6\fs16 
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 2)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
long main(int argc, char* argv[], bool start) \{
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 3)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
struct module_t main_module;
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 4)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 Jed *hello_form;

\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 5)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 Jed_item *label1;

\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 6)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 Jed_item *label2;

\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 7)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 Jed_item *button1;

\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 8)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 Jed_item *ji;
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f6\fs16 
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 9)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
init_module(&main_module);
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f6\fs16 
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 10)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
jed_open(&hello_form, &main_module, NULL);
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 11)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 jed_butt
on_new(&button1, hello_form, 64, 46, 32, 32, "Ok", cool_bold_font);
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 12)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
jed_text_new(&label1, hello_form, 55, 23, 0, 0, "Hello World", cool_bold_font);
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 13)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
jed_text_new(&label2, hello_form, 25, 88, 0, 0, "(press enter to continue)", NULL);
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 14)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
jed_main(hello_form, &ji, 0);
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 15)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
jed_close(hello_form);
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 16)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 return 0;
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 17)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 \}
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 18)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 
Jed_rc jed_process_message(Jed *jed, struct Message *message) \{
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 19)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 return 0;
\par {\pntext\pard\plain\f6\fs16\cgrid \hich\af6\dbch\af0\loch\f6 20)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls7\adjustright {\f6\fs16 \}
\par }\pard \nowidctlpar\widctlpar\adjustright { 
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 1)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Include the jed.h file.  It also includes CyWin.h
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 2)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Standard Cybiko main function
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 3)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Standard module_t structure
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 4)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Declaration of the form
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 5)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {Delar
ation of the label for "Hello World"
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 6)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Declaration of the label for "Press enter\'85"
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 7)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Declaration of the button item
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 8)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Declaration for the return item when enter is pressed
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 9)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Standard Cybiko Initialization function
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 10)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Open the jed form using standard font (small font)
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 11)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Create a new button at 64,64 and 32x32 pixels, text="Ok" and large font
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 12)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Create a new text object at 55,23, text = "Hello World", and large font
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 13)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {Create a new
 text object at 25,88, text = "(press enter to continue)", and using the same font as the form
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 14)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {The 
jed main loop, returns when user presses Enter or Escape
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 15)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Jed close - deletes all object in the form
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 16)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
Return 0 - end of program
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 17)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {\}
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 18)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
jed_process message - called on any messsage not interpretted by Jed_main_loop
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 Line 19)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxtb Line }{\pntxta )}}\ls8\adjustright {
return 0 - indicates we did not process the message and default processing is needed
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par 
\par 
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 3 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed Form Functions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Introduction
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed operates on a concept of items within a form.  To create a form you call }{\b Jed_open()}{.  Then, you make calls to }{\b <itemtype>_new()}{
 one or more times.  When you are through with the form you call }{\b Jed_close() }{to dispose of the form.  A form takes up the entire display.  You may define a default font for the form in the }{\b Jed_open()}{ call.
\par 
\par Once all the form's items are defined, you must call }{\b Jed_main()}{ to activate the form.  It is possible to define multiple forms in the user interface, but only one may be active at a time.  }{\b Jed_main()}{
 takes the form as a parameter and repaints the display with the form it is passed.
\par 
\par You are required to create a }{\b Jed_process_message() }{function where messages are processed.  At a minimum, this function must return False.  Returning False indicates to }{\b Jed_main()}{ that the message was not handled by your }{\b 
Jed_process_message()}{ function, and therefore will be passed to the default Cybiko OS message handler.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_open
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_open(Jed **jed, struct module_t *mm, struct Font *font);
\par \tab Jed **jed \tab \tab - the address of a jed form pointer
\par \tab Struct module_t *mm \tab - a pointer to the value returned by }{\b init_module}{()
\par \tab Struct Font *font \tab \tab - any font to use as the default font in the form
\par 
\par }{\b Jed_open()}{ creates a new, blank form for use in your application.  You may create as many forms as you like.
\par 
\par }{\b\ul Example}{:
\par }{\f6\fs16 #include "jed.h"
\par long main(int argc, char* argv[], bool start)
\par \{
\par   struct module_t main_module;
\par   Jed *main_form;
\par   Jed_item *ji;
\par   init_module(&main_module);
\par   jed_open(&main_form, &main_module, NULL);
\par :
\par :
\par   while(1)
\par   \{
\par       jed_main(main_form, &ji, 1000);
\par       if (ji)
\par       \{
\par \tab // some things to do
\par       \}
\par       else
\par       \{
\par }\pard \fi720\nowidctlpar\widctlpar\adjustright {\f6\fs16 break;  // escape pressed
\par }\pard \nowidctlpar\widctlpar\adjustright {\f6\fs16       \}
\par   \}  
\par   jed_close(main_form);
\par \}
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.3 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_close
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_close(Jed *jed);
\par \tab Jed *jed - pointer to form to close.
\par 
\par }{\b Jed_close}{() frees all memory associated with the form including all items attached to it.
\par See Also: }{\b jed_open()}{
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.4 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_main
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_main(Jed *jed, Jed_item **rtn_ji, long timeout);
\par \tab Jed *jed - pointer to form 
\par \tab Jed_Item **rtn_ji - address of a Jed_item pointer which indicates the item causing return.  
\par }\pard \li2160\nowidctlpar\widctlpar\adjustright {NULL indicates the Esc key was pressed.
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab Long timeout - the amount of time to wait for messages in milliseconds.  0 indicates no timeout.
\par 
\par }{\b Jed_main}{() is the main loop for Jed forms.  The form and all its items is repainted and }{\b Jed_main}{() begins to wait for a message.  All keyboard messages are processed by }{\b Jed_main}{
().  Any other message is passed to the user-supplied function }{\b Jed_process_message}{().  If }{\b Jed_process_message}{() returns 0 (False) then }{\b Jed_main}{
() assumes the user-supplied function did not process the message and it is passed to the default Cybiko message processing function and then deleted.  If }{\b Jed_process_message}{() returns any other value (True) then }{\b Jed_main}{
() assumes the user-supplied function processed the message and the message is deleted.
\par 
\par If the timeout period elapses before a message is received, }{\b Jed_process_message}{() is called with a NULL pointer in place of the pointer to the message.  }{\b Jed_main}{() returns when either the Enter key or the Esc 
key is pressed.  If the Enter key is pressed then the item holding the current selection is returned (in the }{\i rtn_ji}{ parameter).  Else, if the Esc key is pressed, then }{\i rtn_ji}{ is NULL.
\par 
\par See Also: }{\b Jed_open}{(), }{\b Jed_process_message}{()
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.5 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_process_message
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_process_message(Jed *jed, struct Message *message);
\par \tab Jed *jed - the form upon which the message was delivered
\par \tab struct Message *message - the message in question (may be NULL)
\par 
\par }{\b Jed_process_message}{() is called by }{\b Jed_main}{() whenever a message arrives.  The parameter }{\i jed}{ is a pointer to the form which was being processed by }{\b Jed_main}{() when the message arrived.  The parameter }{\i message}{ is a point
er to the message that was received by }{\b Jed_main}{().  If the message is a NULL pointer then }{\b Jed_process_message}{() was called as a result of a timeout.  The function should return True (non-zero) if the message was processed by }{\b Jed_proce
ss_message}{() and default processing should not take place.  The function should return False (zero) if the message was not processed by }{\b Jed_process_message()}{ and default processing should take place.
\par 
\par See Also : }{\b Jed_main}{()
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.6 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_repaint
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_repaint(Jed *jed);
\par \tab Jed *jed - the form to repaint
\par 
\par Repaints all items in the form.  This function is called for you each time you call }{\b Jed_main}{().
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.7 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_repaint_item
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_repaint_item(Jed_item *ji, bool repaint);
\par \tab Jed_item *ji - the item to repaint 
\par \tab Bool repaint - whether to call DisplayGraphics_show()
\par 
\par }{\b Jed_repaint_item}{() repaints a single item.  If the }{\i repaint}{ parameter is True then }{\b DisplayGraphics_show}{() is called, updating the main Cybiko display memory.  This is a performance optimization.  It is normal to update several 
items in a row with }{\i repaint}{ as False, then the final item is repainted with }{\i repaint}{ set to True to display all changes to the user.   (If this is confusing at first, always use }{\i repaint}{ = True).
  None of the other functions will repaint the item (except }{\b Jed_main}{() as explained in the section Jed_repaint).
\par 
\par See Also: }{\b Jed_repaint}{()
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.8 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_error_noise
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {void jed_error_noise(Jed *jed);
\par \tab Jed *jed - pointer to a jed form
\par 
\par Makes a low-frequency noise so the user knows something has gone wrong.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.9 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_get_value
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {char *jed_get_value(Jed_item *ji);
\par \tab Jed_item *ji - the item to get a value from
\par 
\par }{\b Jed_get_value}{() will return the string value of an item.  The value returned is "owned" by the item.  Therefore modifying it will produce unpredictable results in the user interface.
\par 
\par See Also: }{\b Jed_set_value}{()
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.10 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_set_value
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_set_value(Jed_item *ji, char *s);
\par \tab Jed_item *ji - the item to set 
\par \tab char *s - the value to give to the item
\par 
\par }{\b Jed_set_value}{() will set the value of an item.  All Jed items are string-based.  The memory used "}{\i s}{" is copied into the item.  The item is not automatically repainted when the value is set.  You shouold call jed_repaint
_item or allow jed_main() to repaint the item for you.  If you are calling this function from inside Jed_process_message(), then you need to call Jed_repaint_item() to repaint the item.
\par 
\par See Also: }{\b Jed_get_value}{()
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 3.11 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_destroy_item
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_destroy_item(Jed_item *ji);
\par \tab Jed_item *ji
\par 
\par Jed_destroy_item() detaches the item from the form and deallocates all memory associated with the item.
\par 
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 4 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed Text Functions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 4.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Introduction
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The Text item is a simple non-modifiable text object.  It displays a string on a single line of text.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 4.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_text_new
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_text_new(Jed_item **ji, Jed *jed, int x, int y, int w, int h, char *value, struct Font *font);
\par \tab Jed_item **ji - address of a pointer to a Jed_item structure.
\par \tab Jed *jed - the form to create the text item in
\par \tab int x, y - the coordinates of the item on the screen in pixels
\par \tab int w,h - the width and height of the item on the screen in pixels (ignored)
\par \tab char *value - the text of the item
\par \tab struct Font *font - the font for the item.  Inherits its font from the Form if NULL
\par 
\par }{\b Jed_text_new}{() creates a new Text item on the form.  The }{\i x, y, w, & h}{ parameters constitute a bounding box for the text item.  The }{\i value}{ is centered in this box.  If the }{\i w & h}{ parameters are zero, then cent
ering is turned off and the text is displayed at the }{\i x & y}{ coordinates.
\par 
\par See Also: }{\b Jed_destroy_item}{(), }{\b Jed_get_value}{(), }{\b Jed_set_value}{()
\par 
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 5 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed Button Functions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 5.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Introduction
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The Button is used to convey an action in the user interface.   When the user tabs over to a button it appears to be depressed into the screen.  When the user presses the Enter key
 control is returned from the Jed_main() function to the calling application.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 5.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_button_new
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_button_new(Jed_item **ji, Jed *jed, int x, int y, int w, int h, char *value, struct Font *font);
\par \tab Jed_item **ji - address of a pointer to a Jed_item structure.
\par \tab Jed *jed - the form to create the text item in
\par \tab int x, y - the coordinates of the item on the screen in pixels
\par \tab int w,h - the width and height of the item on the screen in pixels
\par \tab char *value - the text of the item
\par \tab struct Font *font - the font for the item.  Inherits its font from the Form if NULL
\par 
\par }{\b Jed_button_new}{() creates a new Button item on the form.  The }{\i x, y, w, & h}{ parameters constitute the bounding box of the item.  The }{\i value }{is centered in the bounding box of the item.
\par 
\par See Also: }{\b Jed_destroy_item}{(), }{\b Jed_get_value}{(), }{\b Jed_set_value}{()
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 6 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed String Functions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 6.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Introduction
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The String Item allows the user to enter text into a field.  The following keys are operational inside the String Item:
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Letters and Numbers - inserts characters into the item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Left and Right arrow keys - move the cursor left and right
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Del - delete one character to the right of the cursor
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Bksp - delete one character to the left of the cursor
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Enter - returns control back to the application
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Tab - moves the selection to the next Item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Shift-letter - uppercases the letter
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {Shift-
Arrow - moves the cursor to the beginning or end of the item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Shift-Bksp - delete all text in the item
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'2d\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb -}}\ls4\adjustright {
Shift-Del - delete all characters to the right of the cursor
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 6.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_string_new
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_string_new(Jed_item **ji, Jed *jed, int x, int y, int w, int h, int buflen, char *value, struct Font *font);
\par \tab Jed_item **ji - address of a pointer to a Jed_item structure.
\par \tab Jed *jed - the form to create the text item in
\par \tab int x, y - the coordinates of the item on the screen in pixels
\par \tab int w,h - the width and height of the item on the screen in pixels
\par \tab int buflen - the number of characters the string can hold
\par \tab char *value - the text of the item
\par \tab struct Font *font - the font for the item.  Inherits its font from the Form if NULL
\par 
\par }{\b Jed_string_new}{() creates a string item in the form.
\par 
\par See Also: }{\b Jed_destroy_item}{(), }{\b Jed_get_value}{(), }{\b Jed_set_value}{()}{
\par }{
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 7 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed Console Functions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 7.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Introduction
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
The Console Item is a multiline read-only text item.  When selected you can use the Up and Down arrow keys to scroll back and forth within the text.  (The limit to the scrolling is determined at the time the 
Console Item was created).  Pressing the Enter key in the Console Item has no effect.
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 7.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_console_new
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_console_new(Jed_item **ji, Jed *jed, int x, int y, int w, int h, int lines, struct Font *font);
\par \tab Jed_item **ji - address of a pointer to a Jed_item structure.
\par \tab Jed *jed - the form to create the text item in
\par \tab int x, y - the coordinates of the item on the screen in pixels
\par \tab int w,h - the width and height of the item on the screen in pixels
\par \tab int lines - the number of lines the console can hold
\par \tab char *value - the text of the item
\par \tab struct Font *font - the font for the item.  Inherits its font from the Form if NULL
\par 
\par }{\b Jed_console_new}{() will create a new console on the form.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 7.3 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_console_add_text
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_console_add_text(Jed_item *ji, char *s);
\par \tab Jed_item *ji - the item
\par \tab char *s - the text to add
\par 
\par }{\b Jed_console_add_text}{() adds a line of text to the bottom of the console item.  All previous lines will scroll up.  If the line is too long it is truncated.  The item is not automatically redisplayed so you will need to call }{\b Jed_redisplay_item}
{().
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 7.4 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_console_clear
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_console_clear(Jed_item *ji);
\par \tab Jed_item *ji - the item
\par 
\par Jed_console_clear() will erase and free all text associated with the Console item. The item is not automatically redisplayed so you will need to call }{\b Jed_redisplay_item}{().
\par 
\par See Also: }{\b Jed_destroy_item}{(), }{\b Jed_get_value}{(), }{\b Jed_set_value}{()}{
\par }{
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 8 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {
Jed List Functions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 8.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Introduction
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
The List Item displays a list of strings only one of which can be selected at a time.  When the List Item is selected, the Up and Down arrow keys move the current selection up and down.  When the Enter key is pressed, 
control returns to the calling application.
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 8.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_list_new
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_list_new(Jed_item **ji, Jed *jed, int x, int y, int w, int h, int lines, struct Font *font);
\par \tab Jed_item **ji - address of a pointer to a Jed_item structure.
\par \tab Jed *jed - the form to create the text item in
\par \tab int x, y - the coordinates of the item on the screen in pixels
\par \tab int w,h - the width and height of the item on the screen in pixels
\par \tab int lines - the number of lines the list can hold (number of list items)
\par \tab char *value - the text of the item
\par \tab struct Font *font - the font for the item.  Inherits its font from the Form if NULL
\par 
\par }{\b Jed_list_new}{() creates a new List item in the form.
\par 
\par See Also: }{\b Jed_destroy_item}{(), }{\b Jed_get_value}{(), }{\b Jed_set_value}{()}{
\par }{
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 8.3 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_list_add_item
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_list_add_item(Jed_item *ji, char *s);
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 8.4 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_list_clear
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_list_clear(Jed_item *ji);
\par \tab Jed_item *ji - the item to clear
\par 
\par Jed_list_clear() will clear all the List elements from the List item. The item is not automatically redisplayed so you will need to call }{\b Jed_redisplay_item}{().
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 8.5 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_set_value
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed_rc jed_list_set_value(Jed_item *ji, char *s);
\par \tab Jed_item *ji - the item
\par \tab char *s - the value
\par 
\par }{\b Jed_set_value}{() sets the item's value.  The currently selected text will be scrolled to the center of the list item.  If the item is not in the list, no item will be selected. The item is not automatically redisplayed so you will need to call }{\b 
Jed_redisplay_item}{(). It is recommended that you use }{\b Jed_set_value}{()
\par 
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 8.6 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Jed_get_value
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {char *jed_list_get_value(Jed_item *ji);
\par \tab Jed_item *ji - the item to get
\par 
\par }{\b Jed_get_value}{() returns the value of the item.  The return value is a string.  If an error has occurred, then the return value is NULL.  The value returned is memory owned by the item - so modifying it will produce unpredictabl
e results.  It is recommended you copy the string to local storage before manipulating it.  It is recommended you use }{\b Jed_get_value}{().
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Section 9 : \tab}}\pard\plain \s1\fi-432\li432\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\jclisttab\tx1800\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {Errors
, Warnings, and Omissions
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.1 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Error - Console lines should wrap

\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Currently, a line that is too long for the console will truncate.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.2 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Error - 
The '?' Help key does not pass through
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {This will be fix
ed in the next release.  You will receive the '?' keyboard event in Jed_process_message() and have an opportunity to process it.  If you choose not to, it will fall through to the Cybiko default message handler and do the usual thing.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.3 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Error - 
A DL Approach would be better
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {I have found problems with Cybiko's implementation of DLs.  I will continue to work with Cybiko to make Jed a fully compliant DL.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.4 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Error - Some 3-d effects are wrong

\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {This will be fixed in the next release.  In particular the string item doesn't look quite right.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.5 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Warning - 
Return values belong to Jed
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The return values from Jed_get_value() are Calloc'd space which Jed depends upon.  Modifying these values may lead to unpredictable
 results.  I recommend that you immediately copy the strings to a buffer over which you have direct control.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.6 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Warning - 
The console item doesn't use all available space
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {This is because the font height doesn\rquote 
t divide the available space evenly.  If the font height is 12 pixels high and the console box is 71 pixels high, there is only room for 5 rows of text (5*12=60, 6*12=72 - one more pixel than we have room for).
  In a future release Jed_console will center the text in the console bounding box to make for a more attractive look.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.7 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Warning - 
The background is too dark
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The background color must be light gray so that when an item is active it "lights up" using white for its background.  There are two solutions:
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 1)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls2\adjustright {
In a later release, Jed can automatically modify the grayscale settings for lighter grays
\par {\pntext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 2)\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta )}}\ls2\adjustright {
The user can modify their setting in Main Desktop Settings application
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.8 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - 
Multi-screen / scrolling screen
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The design of Jed precludes creating forms larger than the visible screen.  I consider this to be a feature.  I do not plan on creating a virtual screen capability for Jed.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.9 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - Text Editor item
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {This is an item which allows full-screen editing.  I don't plan on implementing one becau
se the requirements are so strenuous.  Usually you need some sort of file backing.  I've written editors before and I don't relish the idea of writing one for the Cybiko.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.10 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - Arrow Keys don\rquote 
t move from item to item
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {In a future release I plan to include a key-mask in the next rele
ase giving each item the power to move to the next item if the key is not masked.  This should work for up, down, left, and right.  I'm also toying with giving Select a back-tab sort of functionality.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.11 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - 
List items are mutually exclusive
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Currently there is no way to select multiple items from the Jed_list item.  In a future release the Select key will select each item and highlight it.  The returned value will be a sing
le comma-separated-values (CSV) string.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.12 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - 
Radio Buttons and Checkboxes
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Radio buttons and checkboxes are planned for a future release
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.13 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - Group Boxes
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The group box is a beveled rectangular region encompassing one or more objects.  Usually there is a text string d
escribing the meaning of the group.  I have purposely left group boxes out of the Jed interface because there is so little real estate for placing them.
\par {\listtext\pard\plain\s2 \b\i\f1\cgrid \hich\af1\dbch\af0\loch\f1  Part 9.14 : \tab}}\pard\plain \s2\fi-576\li576\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx1440\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Omission - Bit Maps
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Jed V1.0 does not offer bit map operations.  I have no immediate plans to add bit maps.
\par 
\par }}