<script language="JavaScript">
document.bgColor = '#D9E8FF';
</script>

<h3>Tanx</h3>

     Tanx is a multiplayer Cybiko app modelled after an old Atari game.
If it succeeds, it will be the first game to use [Greg]'s fixed-point math libraries for 2d rotation and rotational navigation.  In the interest of it being finished someday, I'm posting the source code here.  Please post comments, ideas, corrections etc.
----
{{{
#include <cybiko.h>
#include "fixed.c"
// GLOBAL VARIABLES
struct module_t main_module;
cyid_t partner_id; //cybiko ID of the partner's device
char partner_nickname[NICKNAMESIZE+1]; //partner's nickname
struct Message* ptr_message; //RF message.
fixed movx;
fixed movy;
fixed tank1x;
fixed tank1y;

void startup()
{
}

void intro()
{
  int i;
  int j;
  int x;
  int y;
  DisplayGraphics_fill_screen(main_module.m_gfx, CLR_WHITE);
  draw_lib(0,0,0,0,BM_NORMAL);
  DisplayGraphics_show(main_module.m_gfx);
  sleep(1350);
  for(i=0;i<9;i++)
  {
    if(i==1 || i==3)
    {
      vibrate(255);
    }
    else
    {
      vibrate(0);
    }
    DisplayGraphics_fill_screen(main_module.m_gfx, CLR_WHITE);
    draw_lib(0,i,0,0,BM_NORMAL);
    DisplayGraphics_show(main_module.m_gfx);
    sleep(100);
  }
  for(i=0;i<9;i++)
  {
    DisplayGraphics_fill_screen(main_module.m_gfx, CLR_WHITE);
    draw_lib(0,0,0,0,BM_NORMAL);
    draw_lib(1,i,57,15,BM_NORMAL);
    DisplayGraphics_scroll( main_module.m_gfx, 0, 0, 160, 78, random((i+20)/8) - ((i+20)/16), random((i+20)/8)-((i+20)/16) );
    DisplayGraphics_show(main_module.m_gfx);
    sleep(70);
  }
            x = 0;
            y = 0;
            for( i = 0; i < 50; i = i + 1 )
             {
               DisplayGraphics_fill_screen( main_module.m_gfx, DM_PUT );
               draw_lib( 2, i %10, 160 - x,0, BM_NORMAL );
               x = x  + 10;
               if( x > 160 )
                {
                  x = 160;
                }
               DisplayGraphics_show( main_module.m_gfx );
	       sleep(10);
             }
            for( i = 0; i < 20; i = i + 1 )
             {
               DisplayGraphics_fill_screen( main_module.m_gfx, DM_PUT );
               draw_lib( 2, i %10, 160 - x,0, BM_NORMAL );
               x = x  - 10;
               if( x < 0 )
                {
                  x = 0;
                }
               DisplayGraphics_show( main_module.m_gfx );
	       sleep(1);
             }
}

long main()
{
  struct Message* message;
  bool got_char;
  bool quit = FALSE;
  int key;
  int tkey;
  int i;
  int r = 30;
  struct Time time;
  struct DirectKeyboard* ptr_direct_keyboard;
  init_module(&main_module);

// DO STARTUP STUFF

  //Get the game partner ID
//  if( argc != 1 ) 
//  {
//    // Indicates that a remote partner called the device
//    partner_id = atoul( argv[ 1 ] );
//    strcpy( sz_partner_nickname, argv[ 2 ] );
//  }
//  else
//  {
//    // Invites the partner to private chat
//    sprintf( sz_message_text, 
//      "%s invites you to private chat.", sz_nickname );
//    partner_id = select_app_partner( main_module.m_process,
//      sz_message_text, SGP_NONE, sz_partner_nickname, "Avialable Partners",
//        IM_CHAT, NULL );
//    if( !partner_id )
//    {
//      return 0;
//    } 
//  }

  //Set up graphics etc.
  startup();
  ptr_direct_keyboard = DirectKeyboard_get_instance();
  tank1x = fixed_from_int(10);
  tank1y = fixed_from_int(10);

  //Play the animated intro
  intro();

// MAIN PROGRAM LOOP
while(!quit)
{


// MAIN MESSAGE LOOP
  while(!got_char)
  {

// KEYBOARD ROUTINE
DirectKeyboard_scan( ptr_direct_keyboard );
if(DirectKeyboard_is_key_pressed( ptr_direct_keyboard, KEY_ESC ))
{
	quit=TRUE;
}
if(DirectKeyboard_is_key_pressed( ptr_direct_keyboard, KEY_LEFT ))
{
	    r++;
	    if(r>=35)
	    {
		r=0;
	    }
	    movx = fixed_sin(r);
	    movy = fixed_cos(r);
	    TRACE("%s, %s", fixed_print(movx, 5), fixed_print(movy, 5));
	    DisplayGraphics_fill_screen(main_module.m_gfx, CLR_WHITE);
	    draw_lib(5,r,tank1x,tank1y,BM_NORMAL);
	    DisplayGraphics_show(main_module.m_gfx);
	    //TRACE("KEY_LEFT");
}
if(DirectKeyboard_is_key_pressed( ptr_direct_keyboard, KEY_RIGHT ))
{
	    if(r==0)
	    {
		r=35;
	    }
	    r--;
	    movx = fixed_sin(r);
	    movy = fixed_cos(r);
	    TRACE("%s, %s", fixed_print(movx, 5), fixed_print(movy, 5));
	    DisplayGraphics_fill_screen(main_module.m_gfx, CLR_WHITE);
	    draw_lib(5,r,tank1x,tank1y,BM_NORMAL);
	    DisplayGraphics_show(main_module.m_gfx);
	    //TRACE("KEY_RIGHT");
}

    message = cWinApp_get_message(main_module.m_process, 10, 1, MSG_USER);
    switch(message->msgid)
    {
      case MSG_SHUTUP:
      case MSG_QUIT:
        got_char = TRUE;
        break;
      case MSG_GOTFOCUS:
        //disp(&backgnd, 0,0);
	got_char = TRUE;
        break;
      case MSG_USER:
//	get_time();
//        DisplayGraphics_fill_screen( main_module.m_gfx, CLR_WHITE);
//        TGraph_set_color( main_module.m_gfx, CLR_BLACK );
//        DisplayGraphics_draw_text( main_module.m_gfx, "Received Message:", 10, 10 );
//	TRACE("got RF");
//        Buffer_load_string( Message_get_buffer( message ), message_text, 0, 0 );
//        DisplayGraphics_draw_text( main_module.m_gfx, message_text, 10, 20 );
//        DisplayGraphics_draw_text( main_module.m_gfx, theTime, 10, 30 );
//        DisplayGraphics_show(main_module.m_gfx);
//	for(i=0;i<80;i++)
//	{
//	  message_text[i] = 0;
//	}	
//	TRACE("%s", message_text);
	break;
      default:             //  Processes all unprocessed messages.
        //process_message(message);
        cWinApp_defproc(main_module.m_process, message);
    }
    Message_delete(message);
  }  
//  END OF MAIN MESSAGE LOOP

    //TRACE("%d  %d\n", key, tkey);
    got_char=FALSE;
    switch(tkey)
    {
      case 9: //select key
        break;
//      case 1: //enter
    }
    if(tkey == 0) //esc key
    {
	quit=TRUE;
    }
}
DirectKeyboard_dtor( ptr_direct_keyboard, FREE_MEMORY );
// END OF MAIN PROGRAM LOOP
return 0L;
}
}}}
----
Comments/Ideas/Code:
----
