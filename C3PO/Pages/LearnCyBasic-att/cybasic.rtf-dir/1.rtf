{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier{\*\falt Courier New};}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f16\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}
{\f17\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}{\f18\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f19\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f20\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f21\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f22\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}
{\f23\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}{\f24\fswiss\fcharset0\fprq2{\*\panose 020b0603020102020204}Franklin Gothic Medium;}{\f25\froman\fcharset0\fprq2{\*\panose 02040502050505030304}Palatino Linotype;}
{\f26\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f27\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f28\fscript\fcharset0\fprq2 Estrangelo Edessa;}{\f29\fnil\fcharset0\fprq2 Gautami;}
{\f30\fnil\fcharset0\fprq2 Latha;}{\f31\fnil\fcharset0\fprq2 Mangal;}{\f32\fnil\fcharset0\fprq2 MV Boli;}{\f33\fnil\fcharset0\fprq2 Raavi;}{\f34\fnil\fcharset0\fprq2 Shruti;}{\f35\fnil\fcharset0\fprq2 Tunga;}
{\f36\froman\fcharset0\fprq2{\*\panose 010a0502050306030303}Sylfaen;}{\f37\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Microsoft Sans Serif;}{\f38\fscript\fcharset0\fprq2{\*\panose 03000000000000000000}BrushScrD;}
{\f39\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}NimbusSanT;}{\f40\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}NimbusSanTCon;}{\f41\fnil\fcharset0\fprq2{\*\panose 01010103010101010101}NimbusRomNo9T;}
{\f42\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Nimbus Script;}{\f43\froman\fcharset0\fprq2{\*\panose 02020603050405020304}MusicM;}{\f44\froman\fcharset0\fprq2{\*\panose 02020603050405020304}MusicMB;}
{\f45\fswiss\fcharset0\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}{\f46\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f47\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}
{\f48\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f49\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f50\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}
{\f51\fswiss\fcharset0\fprq2{\*\panose 050b0604020202020204}Bookshelf Symbol 1;}{\f52\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Bookshelf Symbol 3;}{\f53\fswiss\fcharset0\fprq2{\*\panose 020b0506030101010103}Abadi MT Condensed;}
{\f54\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f55\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f56\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Jokerman LET;}
{\f57\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}John Handy LET;}{\f58\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Orange LET;}{\f59\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Academy Engraved LET;}
{\f60\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}University Roman LET;}{\f61\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Victorian LET;}{\f62\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Milano LET;}
{\f63\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Smudger LET;}{\f64\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Westwood LET;}{\f65\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Ruach LET;}
{\f66\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Rage Italic LET;}{\f67\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}La Bamba LET;}{\f68\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Quixley LET;}
{\f69\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Pump Demi Bold LET;}{\f70\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Tiranti Solid LET;}{\f71\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Mekanik LET;}
{\f72\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}One Stroke Script LET;}{\f73\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Highlight LET;}{\f74\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Odessa LET;}
{\f75\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Scruff LET;}{\f76\fdecor\fcharset0\fprq2{\*\panose 04040905080b02020502}Broadway BT;}{\f77\fswiss\fcharset0\fprq2{\*\panose 020b0504020202060204}Square721 BT;}
{\f78\fscript\fcharset0\fprq2{\*\panose 03020602050506080705}ParkAvenue BT;}{\f79\fscript\fcharset0\fprq2{\*\panose 03090702030407020403}Staccato222 BT;}{\f80\fscript\fcharset0\fprq2{\*\panose 03020802040502060804}Cataneo BT;}
{\f81\fscript\fcharset0\fprq2{\*\panose 03040802020608040804}Blackletter686 BT;}{\f82\fscript\fcharset0\fprq2{\*\panose 03060702050402020204}Calligraph421 BT;}{\f83\fscript\fcharset0\fprq2{\*\panose 03080802020302020203}MisterEarl BT;}
{\f84\fdecor\fcharset0\fprq2{\*\panose 04080805060107010802}OldDreadfulNo7 BT;}{\f85\fswiss\fcharset2\fprq2{\*\panose 050c0102010209020202}HolidayPi BT;}{\f86\fmodern\fcharset0\fprq2{\*\panose 050b0009000000000000}OCR-A;}
{\f87\fmodern\fcharset0\fprq2{\*\panose 020b0009000000000000}QuickType Mono;}{\f88\fswiss\fcharset0\fprq2{\*\panose 020b0000000000000000}QuickType;}{\f89\fswiss\fcharset0\fprq2{\*\panose 020b0506030403020203}QuickType Condensed;}
{\f90\fnil\fcharset0\fprq2{\*\panose 05000000000000000000}QuickType Pi;}{\f91\froman\fcharset238\fprq2 Times New Roman CE;}{\f92\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f94\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f95\froman\fcharset162\fprq2 Times New Roman Tur;}{\f96\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f97\fswiss\fcharset238\fprq2 Arial CE;}{\f98\fswiss\fcharset204\fprq2 Arial Cyr;}{\f100\fswiss\fcharset161\fprq2 Arial Greek;}
{\f101\fswiss\fcharset162\fprq2 Arial Tur;}{\f102\fswiss\fcharset186\fprq2 Arial Baltic;}{\f103\fmodern\fcharset238\fprq1 Courier New CE;}{\f104\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f106\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f107\fmodern\fcharset162\fprq1 Courier New Tur;}{\f108\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f115\froman\fcharset238\fprq2 Times CE;}{\f116\froman\fcharset204\fprq2 Times Cyr;}{\f118\froman\fcharset161\fprq2 Times Greek;}
{\f119\froman\fcharset162\fprq2 Times Tur;}{\f120\froman\fcharset186\fprq2 Times Baltic;}{\f121\fswiss\fcharset238\fprq2 Helvetica CE;}{\f122\fswiss\fcharset204\fprq2 Helvetica Cyr;}{\f124\fswiss\fcharset161\fprq2 Helvetica Greek;}
{\f125\fswiss\fcharset162\fprq2 Helvetica Tur;}{\f126\fswiss\fcharset186\fprq2 Helvetica Baltic;}{\f181\fswiss\fcharset238\fprq2 Tahoma CE;}{\f182\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f184\fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f185\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f186\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f193\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f194\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f196\fmodern\fcharset161\fprq1 Lucida Console Greek;}
{\f197\fmodern\fcharset162\fprq1 Lucida Console Tur;}{\f199\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f200\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}{\f202\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}
{\f203\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}{\f205\fswiss\fcharset238\fprq2 Verdana CE;}{\f206\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f208\fswiss\fcharset161\fprq2 Verdana Greek;}{\f209\fswiss\fcharset162\fprq2 Verdana Tur;}
{\f210\fswiss\fcharset186\fprq2 Verdana Baltic;}{\f211\fswiss\fcharset238\fprq2 Arial Black CE;}{\f212\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f214\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f215\fswiss\fcharset162\fprq2 Arial Black Tur;}
{\f216\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f217\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f218\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f220\fscript\fcharset161\fprq2 Comic Sans MS Greek;}
{\f221\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f222\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f223\fswiss\fcharset238\fprq2 Impact CE;}{\f224\fswiss\fcharset204\fprq2 Impact Cyr;}{\f226\fswiss\fcharset161\fprq2 Impact Greek;}
{\f227\fswiss\fcharset162\fprq2 Impact Tur;}{\f228\fswiss\fcharset186\fprq2 Impact Baltic;}{\f229\froman\fcharset238\fprq2 Georgia CE;}{\f230\froman\fcharset204\fprq2 Georgia Cyr;}{\f232\froman\fcharset161\fprq2 Georgia Greek;}
{\f233\froman\fcharset162\fprq2 Georgia Tur;}{\f234\froman\fcharset186\fprq2 Georgia Baltic;}{\f235\fswiss\fcharset238\fprq2 Franklin Gothic Medium CE;}{\f236\fswiss\fcharset204\fprq2 Franklin Gothic Medium Cyr;}
{\f238\fswiss\fcharset161\fprq2 Franklin Gothic Medium Greek;}{\f239\fswiss\fcharset162\fprq2 Franklin Gothic Medium Tur;}{\f240\fswiss\fcharset186\fprq2 Franklin Gothic Medium Baltic;}{\f241\froman\fcharset238\fprq2 Palatino Linotype CE;}
{\f242\froman\fcharset204\fprq2 Palatino Linotype Cyr;}{\f244\froman\fcharset161\fprq2 Palatino Linotype Greek;}{\f245\froman\fcharset162\fprq2 Palatino Linotype Tur;}{\f246\froman\fcharset186\fprq2 Palatino Linotype Baltic;}
{\f247\fswiss\fcharset238\fprq2 Trebuchet MS CE;}{\f248\fswiss\fcharset204\fprq2 Trebuchet MS Cyr;}{\f250\fswiss\fcharset161\fprq2 Trebuchet MS Greek;}{\f251\fswiss\fcharset162\fprq2 Trebuchet MS Tur;}{\f252\fswiss\fcharset186\fprq2 Trebuchet MS Baltic;}
{\f307\froman\fcharset238\fprq2 Sylfaen CE;}{\f308\froman\fcharset204\fprq2 Sylfaen Cyr;}{\f310\froman\fcharset161\fprq2 Sylfaen Greek;}{\f311\froman\fcharset162\fprq2 Sylfaen Tur;}{\f312\froman\fcharset186\fprq2 Sylfaen Baltic;}
{\f313\fswiss\fcharset238\fprq2 Microsoft Sans Serif CE;}{\f314\fswiss\fcharset204\fprq2 Microsoft Sans Serif Cyr;}{\f316\fswiss\fcharset161\fprq2 Microsoft Sans Serif Greek;}{\f317\fswiss\fcharset162\fprq2 Microsoft Sans Serif Tur;}
{\f318\fswiss\fcharset186\fprq2 Microsoft Sans Serif Baltic;}{\f319\fscript\fcharset238\fprq2 BrushScrD CE;}{\f323\fscript\fcharset162\fprq2 BrushScrD Tur;}{\f324\fscript\fcharset186\fprq2 BrushScrD Baltic;}{\f325\fnil\fcharset238\fprq2 NimbusSanT CE;}
{\f329\fnil\fcharset162\fprq2 NimbusSanT Tur;}{\f331\fnil\fcharset238\fprq2 NimbusSanTCon CE;}{\f335\fnil\fcharset162\fprq2 NimbusSanTCon Tur;}{\f337\fnil\fcharset238\fprq2 NimbusRomNo9T CE;}{\f341\fnil\fcharset162\fprq2 NimbusRomNo9T Tur;}
{\f343\fscript\fcharset238\fprq2 Nimbus Script CE;}{\f347\fscript\fcharset162\fprq2 Nimbus Script Tur;}{\f348\fscript\fcharset186\fprq2 Nimbus Script Baltic;}{\f367\fswiss\fcharset238\fprq2 Arial Narrow CE;}
{\f368\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f370\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f371\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f372\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}
{\f373\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f374\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f376\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f377\froman\fcharset162\fprq2 Bookman Old Style Tur;}
{\f378\froman\fcharset186\fprq2 Bookman Old Style Baltic;}{\f385\froman\fcharset238\fprq2 Garamond CE;}{\f386\froman\fcharset204\fprq2 Garamond Cyr;}{\f388\froman\fcharset161\fprq2 Garamond Greek;}{\f389\froman\fcharset162\fprq2 Garamond Tur;}
{\f390\froman\fcharset186\fprq2 Garamond Baltic;}{\f430\fnil\fcharset161\fprq2 Jokerman LET Greek;}{\f436\fnil\fcharset161\fprq2 John Handy LET Greek;}{\f442\fnil\fcharset161\fprq2 Orange LET Greek;}
{\f448\fnil\fcharset161\fprq2 Academy Engraved LET Greek;}{\f454\fnil\fcharset161\fprq2 University Roman LET Greek;}{\f460\fnil\fcharset161\fprq2 Victorian LET Greek;}{\f466\fnil\fcharset161\fprq2 Milano LET Greek;}
{\f472\fnil\fcharset161\fprq2 Smudger LET Greek;}{\f478\fnil\fcharset161\fprq2 Westwood LET Greek;}{\f484\fnil\fcharset161\fprq2 Ruach LET Greek;}{\f490\fnil\fcharset161\fprq2 Rage Italic LET Greek;}{\f496\fnil\fcharset161\fprq2 La Bamba LET Greek;}
{\f502\fnil\fcharset161\fprq2 Quixley LET Greek;}{\f508\fnil\fcharset161\fprq2 Pump Demi Bold LET Greek;}{\f514\fnil\fcharset161\fprq2 Tiranti Solid LET Greek;}{\f520\fnil\fcharset161\fprq2 Mekanik LET Greek;}
{\f526\fnil\fcharset161\fprq2 One Stroke Script LET Greek;}{\f532\fnil\fcharset161\fprq2 Highlight LET Greek;}{\f538\fnil\fcharset161\fprq2 Odessa LET Greek;}{\f544\fnil\fcharset161\fprq2 Scruff LET Greek;}{\f547\fdecor\fcharset238\fprq2 Broadway BT CE;}
{\f550\fdecor\fcharset161\fprq2 Broadway BT Greek;}{\f551\fdecor\fcharset162\fprq2 Broadway BT Tur;}{\f553\fswiss\fcharset238\fprq2 Square721 BT CE;}{\f556\fswiss\fcharset161\fprq2 Square721 BT Greek;}{\f557\fswiss\fcharset162\fprq2 Square721 BT Tur;}
{\f559\fscript\fcharset238\fprq2 ParkAvenue BT CE;}{\f562\fscript\fcharset161\fprq2 ParkAvenue BT Greek;}{\f563\fscript\fcharset162\fprq2 ParkAvenue BT Tur;}{\f565\fscript\fcharset238\fprq2 Staccato222 BT CE;}
{\f568\fscript\fcharset161\fprq2 Staccato222 BT Greek;}{\f569\fscript\fcharset162\fprq2 Staccato222 BT Tur;}{\f571\fscript\fcharset238\fprq2 Cataneo BT CE;}{\f574\fscript\fcharset161\fprq2 Cataneo BT Greek;}
{\f575\fscript\fcharset162\fprq2 Cataneo BT Tur;}{\f577\fscript\fcharset238\fprq2 Blackletter686 BT CE;}{\f580\fscript\fcharset161\fprq2 Blackletter686 BT Greek;}{\f581\fscript\fcharset162\fprq2 Blackletter686 BT Tur;}
{\f583\fscript\fcharset238\fprq2 Calligraph421 BT CE;}{\f586\fscript\fcharset161\fprq2 Calligraph421 BT Greek;}{\f587\fscript\fcharset162\fprq2 Calligraph421 BT Tur;}{\f589\fscript\fcharset238\fprq2 MisterEarl BT CE;}
{\f592\fscript\fcharset161\fprq2 MisterEarl BT Greek;}{\f593\fscript\fcharset162\fprq2 MisterEarl BT Tur;}{\f595\fdecor\fcharset238\fprq2 OldDreadfulNo7 BT CE;}{\f598\fdecor\fcharset161\fprq2 OldDreadfulNo7 BT Greek;}
{\f599\fdecor\fcharset162\fprq2 OldDreadfulNo7 BT Tur;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 
Normal;}{\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl1\adjustright \b\i\f1\cgrid \sbasedon0 \snext0 heading 2;}{
\s3\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl2\adjustright \f1\cgrid \sbasedon0 \snext0 heading 3;}{\s4\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl3\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 4;}{
\s5\sb240\sa60\nowidctlpar\widctlpar\ls1\ilvl4\adjustright \fs22\cgrid \sbasedon0 \snext0 heading 5;}{\s6\sb240\sa60\nowidctlpar\widctlpar\ls1\ilvl5\adjustright \i\fs22\cgrid \sbasedon0 \snext0 heading 6;}{
\s7\sb240\sa60\nowidctlpar\widctlpar\ls1\ilvl6\adjustright \f1\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\sb240\sa60\nowidctlpar\widctlpar\ls1\ilvl7\adjustright \i\f1\fs20\cgrid \sbasedon0 \snext0 heading 8;}{
\s9\sb240\sa60\nowidctlpar\widctlpar\ls1\ilvl8\adjustright \b\i\f1\fs18\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive \ul\cf2 \sbasedon10 Hyperlink;}{\*\cs16 \additive \ul\cf12 \sbasedon10 
FollowedHyperlink;}{\s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid \sbasedon0 \snext17 Code;}{\s18\qc\sb240\sa60\nowidctlpar\widctlpar\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext18 Title;}{\s19\nowidctlpar\widctlpar
\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext19 header;}{\s20\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext20 footer;}{\*\cs21 \additive \sbasedon10 page number;}{\*\cs22 \additive \f2\fs20 
Typewriter;}{\*\cs23 \additive \b \sbasedon10 Strong;}{\s24\sb120\nowidctlpar\widctlpar\adjustright \b\i\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s25\li200\sb120\nowidctlpar\widctlpar\adjustright \b\fs22\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{
\s26\li400\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s27\li600\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s28\li800\nowidctlpar\widctlpar\adjustright \fs20\cgrid 
\sbasedon0 \snext0 \sautoupd toc 5;}{\s29\li1000\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s30\li1200\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{
\s31\li1400\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s32\li1600\nowidctlpar\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid 
\sbasedon0 \snext33 Plain Text;}}{\*\listtable{\list\listtemplateid-1{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace120\levelindent360{\leveltext\'09Chapter \'00;}{\levelnumbers\'09;}\s1}{\listlevel\levelnfc255\leveljc0
\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s2}{\listlevel\levelnfc255\leveljc0\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s3}{\listlevel\levelnfc255\leveljc0
\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s4}{\listlevel\levelnfc255\leveljc0\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s5}{\listlevel\levelnfc255\leveljc0
\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s6}{\listlevel\levelnfc255\leveljc0\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s7}{\listlevel\levelnfc255\leveljc0
\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s8}{\listlevel\levelnfc255\leveljc0\levelfollow2\levelstartat1\levelspace120\levelindent360{\leveltext\'00;}{\levelnumbers;}\s9}{\listname ;}\listid-5}
{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid629213004}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1306811477}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2009747745}}{\*\listoverridetable{\listoverride\listid-5\listoverridecount0\ls1}{\listoverride\listid-2
\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360 }}\ls2}{\listoverride\listid-2
\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720 }}\ls3}{\listoverride\listid1306811477
\listoverridecount0\ls4}{\listoverride\listid2009747745\listoverridecount0\ls5}{\listoverride\listid629213004\listoverridecount0\ls6}}{\*\revtbl {Unknown;}}{\info{\title Chapter 1 : Introducing the Cybiko}{\author SmithG}{\operator Greg Smith}
{\creatim\yr2003\mo7\dy15\hr19\min11}{\revtim\yr2003\mo7\dy15\hr19\min11}{\version2}{\edmins0}{\nofpages59}{\nofwords13132}{\nofchars74857}{\*\company WhiteOak}{\nofcharsws91929}{\vern71}}
\widowctrl\ftnbj\aenddoc\lytprtmet\hyphcaps0\formshade\viewkind1\viewscale113\viewzk2\pgbrdrhead\pgbrdrfoot \fet0\sectd \psz1\linex0\endnhere\titlepg\sectdefaultcl {\header \pard\plain \s19\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright 
\fs20\cgrid {\tab }{\b\f1\fs24 Learning to Program with the}{\b\f1 \tab }{3/13/2001}{\b\f1 
\par \tab }{\b\f1\fs24 Cybiko Handheld Computer
\par \tab Using CyBasic
\par }{\fs24 
\par }}{\footer \pard\plain \s20\nowidctlpar\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid {\tab }{\field{\*\fldinst {\cs21  PAGE }}{\fldrslt {\cs21\lang1024 59}}}{\cs21 /}{\field{\*\fldinst {\cs21  NUMPAGES }}{\fldrslt {\cs21\lang1024 1}}}{
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s18\qc\sa60\nowidctlpar\widctlpar\adjustright \b\f1\fs32\kerning28\cgrid {Learning to Program with the
\par Cybiko Handheld Computer
\par Using CyBasic
\par }{\b0\fs24 By Greg Smith
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\field\fldedit{\*\fldinst { TOC \\o "1-3" }}{\fldrslt {\lang1024 
\par }\pard\plain \s24\sb120\nowidctlpar\widctlpar\tx1000\tqr\tldot\tx8630\adjustright \b\i\cgrid {\lang1024 Chapter 1\tab : Introducing the Cybiko\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393647 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360034003700000000}}}{\fldrslt {\lang1024 4}}}{\lang1024 
\par Chapter 2\tab : Introducing BASIC\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393648 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360034003800000000}}
}{\fldrslt {\lang1024 6}}}{\lang1024 
\par Chapter 3\tab : Downloading CyBasic\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393649 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360034003900000000}}
}{\fldrslt {\lang1024 7}}}{\lang1024 
\par Chapter 4\tab : Editing programs on your Cybiko\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393650 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003000000000}}}{\fldrslt {\lang1024 8}}}{\lang1024 
\par Chapter 5\tab : Editing programs on your PC\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393651 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003100000000}}
}{\fldrslt {\lang1024 9}}}{\lang1024 
\par Chapter 6\tab : Programming Basics : Input/Process/Output\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393652 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003200000000}}}{\fldrslt {\lang1024 14}}}{\lang1024 
\par Chapter 7\tab : Variables and DIM\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393653 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003300000000}}
}{\fldrslt {\lang1024 17}}}{\lang1024 
\par Chapter 8\tab : Looping : For \'85 Next\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393654 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003400000000}}
}{\fldrslt {\lang1024 20}}}{\lang1024 
\par Chapter 9\tab : Conditionals : If \'85 Then \'85 Else \'85 End If\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393655 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003500000000}}}{\fldrslt {\lang1024 22}}}{\lang1024 
\par }\pard \s24\sb120\nowidctlpar\widctlpar\tx1200\tqr\tldot\tx8630\adjustright {\lang1024 Chapter 10\tab : Functions & Subroutines\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393656 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003600000000}}}{\fldrslt {\lang1024 25}}}{\lang1024 
\par Chapter 11\tab : File I/O\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393657 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003700000000}}}{\fldrslt {
\lang1024 27}}}{\lang1024 
\par Chapter 12\tab : Graphics\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393658 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003800000000}}}{\fldrslt {
\lang1024 29}}}{\lang1024 
\par Chapter 13\tab : Math Functions\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393659 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360035003900000000}}}{\fldrslt {
\lang1024 32}}}{\lang1024 
\par Chapter 14\tab : Miscellaneous\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393660 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003000000000}}}{\fldrslt {
\lang1024 34}}}{\lang1024 
\par Chapter 15\tab : CyBasic-2\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393661 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003100000000}}}{\fldrslt {
\lang1024 36}}}{\lang1024 
\par Chapter 16\tab : Debugging\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393662 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003200000000}}}{\fldrslt {
\lang1024 37}}}{\lang1024 
\par Chapter 17\tab : While\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393663 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003300000000}}}{\fldrslt {
\lang1024 39}}}{\lang1024 
\par Chapter 18\tab : Types\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393664 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003400000000}}}{\fldrslt {
\lang1024 40}}}{\lang1024 
\par Chapter 19\tab : Exit Function / Exit Subroutine\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393665 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003500000000}}}{\fldrslt {\lang1024 41}}}{\lang1024 
\par Chapter 20\tab : Passing Variables by Reference and by Value\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393666 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003600000000}}}{\fldrslt {\lang1024 43}}}{\lang1024 
\par Chapter 21\tab : Printxy\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393667 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003700000000}}}{\fldrslt {
\lang1024 45}}}{\lang1024 
\par Chapter 22\tab : String Manipulation (Right/Mid)\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393668 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003800000000}}}{\fldrslt {\lang1024 46}}}{\lang1024 
\par Chapter 23\tab : Role Playing Games\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393669 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360036003900000000}}
}{\fldrslt {\lang1024 47}}}{\lang1024 
\par }\pard\plain \s25\li200\sb120\nowidctlpar\widctlpar\tqr\tldot\tx8630\adjustright \b\fs22\cgrid {\lang1024 The TARDIS Adventure\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393670 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360037003000000000}}}{\fldrslt {\lang1024 47}}}{\lang1024 
\par }\pard\plain \s24\sb120\nowidctlpar\widctlpar\tx1200\tqr\tldot\tx8630\adjustright \b\i\cgrid {\lang1024 Chapter 24\tab : Command Summary\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393671 \\h }{\fs20\lang1024 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360037003100000000}}}{\fldrslt {\lang1024 56}}}{\lang1024 
\par Chapter 25\tab : Limitations & Bugs\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc509393672 \\h }{\fs20\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f006300350030003900330039003300360037003200000000}}
}{\fldrslt {\lang1024 59}}}}}\pard\plain \s24\sb120\nowidctlpar\widctlpar\tx1200\tqr\tldot\tx8630\adjustright \b\i\cgrid {
\par {\*\bkmkstart _Toc509128872}{\*\bkmkstart _Toc509393596}{\*\bkmkstart _Toc509393647}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 1\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Introducing the Cybiko{\*\bkmkend _Toc509128872}{\*\bkmkend _Toc509393596}{\*\bkmkend _Toc509393647}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Teen Computer}{ 
\par Donald Wisniewski and David Yang created the Cybiko as a portable computer for tweens (ages 10-12) and teens (ages 13-17). It was designed to fill a niche left between the Palm Pilot and Nintendo Game boy. 
\par 
\par }{\b\ul Look & Feel}{ 
\par The Cybiko looks like a walkie talkie encased in a transparent shell from one of five colors (black, clear, yellow, blue, and purple \endash  and a promotional red). It has an array of white buttons comprising a QWERTY-style keyb
oard, a joystick pad, and some function keys. The original, older model (released in April 2000) had a slide switch on the side, which is now replaced by an "Esc" key. 
\par 
\par }{\b\ul Donald Wisniewski & Cybiko Inc.}{ 
\par The creators of the Cybiko \endash 
 Donald Wisniewski (President of Cybiko, Inc.) and David Yang started the company in early 1999. They recognized a need in the teen marketplace for a handheld wireless entertainment device that teens could call their own. 
\par 
\par Wisniewski (born in 1960) is a f
ormer executive of V-Tech (another high-tech firm in the business of creating devices for young people). He holds a BS in mechanical engineering from Purdue University. "We want to create a social environment where teens can chat and interact," he said in
 a recent interview, "We see a huge opportunity with 12- to 16-year olds." 
\par 
\par The Cybiko was released in April of 2000 with a price tag of $170. At that time, New York-based Cybiko had 85 engineers who had created the device. Today (1/2001) Cybiko has a staf
f of around 170 Russian-based software developers and retails for about $99. They have successfully delivered a new application daily for about the last year. The product was first introduced at a number of toy and electronics retailers like FAO Schwarz, 
Virgin Records, CompUSA, Babbage's, and Software Etc. Now, it is available at over 9000 locations across the USA and online at }{\cs15\ul\cf2 www.cybiko.com}{.  Cybiko is privately held and owns all of the intellectual property. 
\par 
\par }{\b\ul Teens and Cybiko}{ 
\par There are 30 million teen
s in the United States, 65 percent of whom have a computer in the home. 45 percent have Internet access and none of them have a mobile wireless product. That is a market of 13.5 million people. The Cybiko is aimed at Nine to 20-year-olds. They felt interc
onnectivity and communication was a key feature left out of other devices for teens. "We wanted to create a social environment where teens can chat and interact," said Wisniewski. 
\par 
\par And they wanted to create a device that was more than a game machine \endash 
 so they included single and multiplayer wireless games, support applications like the planner, email, Friend Finder, and a way to chat with anyone in the network. "I've seen users as young as five and old as 55," Wisniewski said in a recent interview. 

\par 
\par }\pard \keep\keepn\nowidctlpar\widctlpar\adjustright {\b\ul Technical Details}{ 
\par *(Note: See the glossary for a description of new terms) 
\par The operating system for the Cybiko is called CyOS.  It is now (Mar/2001) up to version 1.3.56. The original Cybiko (v1.2) advertised a mere 256}{\cs15\ul\cf2 KB}{ of }{\cs15\ul\cf2 RAM}{. Currently the memory is d
ivided into 2 segments : 512KB of RAM and 512KB or }{\cs15\ul\cf2 Flash RAM}{ \endash  for a grand total of 1}{\cs15\ul\cf2 MB}{
. Most of the memory is used up by the Cybiko Operating System (CyOS). Only about 300KB is available for the user. The memory is supposed to be upgradeable to 16MB, but 
this number is different depending on the published source. (There is a 1MB expansion module but the Cybiko can take advantage of the }{\cs15\ul\cf2 MP3'}{s memory which can be as large as 64MB). 
\par }\pard \nowidctlpar\widctlpar\adjustright {The Cybiko's display is 160 x 100 }{\cs15\ul\cf2 pixels}{ of }{\cs15\ul\cf2 monochrome}{ }{\cs15\ul\cf2 LCD}{ (actually, its 4-color gray scale). Its }{\cs15\ul\cf2 Microprocessor }{is a 32-}{\cs15\ul\cf2 bit }{
11-}{\cs15\ul\cf2 MHz}{ processor manufactured by Hitachi (this is roughly equivalent in capability to an Intel 386 chip \endash  the heart of the original IBM PC) 
\par 
\par The Cybiko broadcasts on 30 digital channels over frequencies be
tween 902 and 928 MHz with a range of up to 300 feet. There has been a lot of talk on the Internet about improving the range with home-brew antennae and so on, but for all practical purposes 300 feet is as far as the Cybiko can broadcast.  Wireless eMail 
is possible with the CyWIG software on the PC. Users can send files (including music, games and applications) between two Cybikos. While Cybiko users can chat and game with other Cybikos within a range of 300 ft.  They can also transmit }{\ul through}{
 each other to extend the range, similar to a re-transmitter. 
\par 
\par A small keyboard allows for data entry. The keys are arranged in the traditional QWERTY layout, but are smaller than those used on the popular RIM pager devices. A stylus is provided to allow easier typing
. There is a small joystick pad with up, down, left, and right keys. Seven pre-programmed function keys line the top of the unit. And the help, enter, select, tab, and del keys are along the right side. In fact, you will mostly use the arrow keys and the 
enter key. 
\par 
\par The expansion slot is located at the base of the Cybiko. It is able to take an optional MP3 player. Also, a memory card with 1MB of memory is available. 
\par 
\par Power is supplied by two rechargeable }{\cs15\ul\cf2 nickel metal hydride}{ batteries that last for 8-10 hours of regular use. The unit can vibrate whenever a similar machine is in range. 
\par 
\par An }{\cs15\ul\cf2 RS232}{ cable connects it to a PC, which allows users to download new games and applications from the Internet. It is also possible to write programs that access the RS232 port.
\par {\*\bkmkstart _Toc509128873}{\*\bkmkstart _Toc509393597}{\*\bkmkstart _Toc509393648}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 2\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Introducing BASIC{\*\bkmkend _Toc509128873}{\*\bkmkend _Toc509393597}{\*\bkmkend _Toc509393648}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {BASIC is an acronym.  It stands for Beginner's All-purpose Symbolic Instruction Code.  It was invented in the 1960's as a simplified programm
ing language for people of all types.  The original language had a line number for each line of code.  This helped to order the statements and make it easier for the uninitiated to change something on a particular line.  The purpose of the BASIC language 
is to make programming code more like English so that it can be easily learned by the non-computer professional.
\par 
\par Unlike the 'C' programming language, CyBasic is interpreted.  Languages like 'C' are compiled, meaning the instructions are transformed into ma
chine code.  CyBasic is interpreted at run time.  It is never converted into machine code.  So, it is slower than 'C'.
\par 
\par CyBasic is a fairly limited language.  It has the ability to get input from the user, process that input, and print the processed result
s to the screen.  The If command allows CyBasic to handle conditionals and the For command allows it to handle looping.  There are only a handful of graphics functions including Point (for setting a pixel) and Line (for drawing a line).
\par 
\par Follow this link for more information on the origins of BASIC:
\par }{\cs15\ul\cf2 http{\*\bkmkstart _Hlt506693626}:{\*\bkmkend _Hlt506693626}//www.digitalcentury.com/encyclo/update/BASIC.html}{
\par {\*\bkmkstart _Toc509128874}{\*\bkmkstart _Toc509393598}{\*\bkmkstart _Toc509393649}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 3\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Downloading CyBasic{\*\bkmkend _Toc509128874}{\*\bkmkend _Toc509393598}{\*\bkmkend _Toc509393649}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Cybiko has created two versions of BASIC \endash 
 Cybasic-1 with a set of fundamental BASIC commands. CyBasic-2 has 6 new commands.  CyBasic-2 requires the external 1MB memory card to be installed on the Cybiko to work.  (This is probably due to the increased need for  RAM).  You c
an use either CyBasic-1 or CyBasic-2 for this tutorial.
\par 
\par You should be able to download either CyBasic-1 or CyBasic-2 from Cybiko using CyberLoad.  In the event that you cannot get one or either of them,  they are posted on this website as well.  CyBasic-1 is in }{\cs15\ul\cf2 www.DevCybiko.com/Files
{\*\bkmkstart _Hlt506694518}/{\*\bkmkend _Hlt506694518}CyBasic/CyBasic1.zip}{ and CyBasic-2 is in: }{\cs15\ul\cf2 www.DevCybiko.com/Files/CyB{\*\bkmkstart _Hlt506694526}a{\*\bkmkend _Hlt506694526}sic/CyBasic2.zip}{ .
\par 
\par {\*\bkmkstart _Toc509128875}{\*\bkmkstart _Toc509393599}{\*\bkmkstart _Toc509393650}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 4\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Editing programs on your Cybiko{\*\bkmkend _Toc509128875}{\*\bkmkend _Toc509393599}{\*\bkmkend _Toc509393650}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {NOTE: All this information can be found at Cybiko's site }{\cs15\ul\cf2 www.cybiko.com/download/applications/cybasic_main.asp}{ or 
\par }{\cs15\ul\cf2 www.cybiko.com/download/applications/cybasic_main2.asp}{ .
\par 
\par Once you run the CyBasic application, you will be greeted with a window asking you to Open a CyBasic 
file.  All files ending int ".bs.txt" will be displayed.  Select one of these or, alternatively select "<New File>" and enter the name of a ".bs.txt" file to create.  Be sure to use the extension ".bs.txt" as this is what CyBasic uses to search for input 
files.  You may also press the <FN-Enter> keys to bring up a set of actions to upload, rename, delete, view, move, copy or open the file.
\par 
\par The operation of the Cybiko editor is similar to other editors.  Pressing the up, down, left, and right keys moves the
 cursor around.  Typing keys on the keypad inserts characters into the display.  The BCKS key will erase text to the left of the cursor, and the DEL key will erase text to the right of the cursor.
\par 
\par Enter the following, simple program into the display:
\par 
\par }{\f6\fs16 dim a[32] as char
\par print "enter your name"
\par input a
\par print "Hello ", a
\par print
\par print "press enter to continue"
\par input a
\par }{
\par When you are ready to run the program, type <FN-Enter> and see the Actions list.  Position the cursor over the "Run" action and press <Enter>.  Your program should execute.  This action can also be executed by pressing <FN-R>.
\par 
\par One problem with the CyBasic editor is that it slows down as more text is input into it.  This makes editing on the PC more advantageous.
\par 
\par The Select key will show a list of all the statements and functions that can be used.  You can press the letter key to scroll down to a list item that begins with that letter.
\par 
\par We'll look more at the CyBasic interface in Chapter 16: Debugging.
\par 
\par When you run your program, you may get a "Sy
ntax Error".  Syntax errors are errors in the typing of the program.  This comes in different forms.  For example you may get a message indicating "Bracket Expected".  Or another error if you mistype the word "Function".  Spelling errors are the most comm
on syntax errors.
\par 
\par When you get a syntax error, press the Enter key.  The error dialog box goes away and you will be in the CyBasic editor.  The curs
or will be positioned on the last character that CyBasic understood.  You will need to determine what the error meant, and how to fix the code to resolve the error.
\par 
\par {\*\bkmkstart _Toc509128876}{\*\bkmkstart _Toc509393600}{\*\bkmkstart _Toc509393651}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 5\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Editing programs on your PC{\*\bkmkend _Toc509128876}{\*\bkmkend _Toc509393600}{\*\bkmkend _Toc509393651}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\field{\*\fldinst {PRIVATE}{{\*\datafield 
020203001a020000000001a600000000010000000100010001000000000000002724010000001a0100000000000000000000000000000000000001000000010000000000000000000000000000000000000000000068681500866815001b010000a46815001c01000013120000ee1100004600000001000000010000000000
02000100000000000000000000001c89000013120000000000004600000001000000010000000000010000000000000000000000000000000000}}}{\fldrslt }}{\b\ul Introduction}{ 
\par Cybiko, Inc has done much to make editing in CyBasic easy.  But as the program gets large, the CyBasic editor begins to slow down.  And it is hard to type on those tiny keys.  Fortunately, you can edit programs on your PC and download them to the Cybiko.

\par 
\par Downloading is accomplished by using CyberLoad.  Once you have edited your file on the PC, you drag it into the "C:\\Program Files\\Cybiko\\CyberLoad\\local_files\\user_files".  Then, when you run CyberLoad, th
e file appears in the "My Computer" directory.  You can then download it from the PC to the Cybiko in the usual way.
\par 
\par In order to get CyBasic to recognize your file, you must name it "filename.bs.txt".  This is an artifact of the Notepad editor.  Notepad has an annoying tendency to tack the letters "txt" on the end of every filename. 
\par 
\par There are many good editors for use on the PC.  Every programmer has a favorite editor.   In this chapter we will discuss the Notepad editor for Windows, and the Edit program for MS-DOS.
\par 
\par }{\b\ul Notepad
\par }{The Notepad editor is a bare-essentials editor, which is precisely what we need for editing CyBasic programs.  You can run Notepad by selecting the "Start" menu and pulling-right on "Accessories".  Pull-down to the "Notepad" icon.  He
re is a summary of the Notepad menu options:
\par 
\par }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1654\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx3740\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb 
\cellx8600\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\field{\*\fldinst {\b\cf8 PRIVATE}{\b\cf8 {\*\datafield 
020203001a020000000001ce0b000000020000000200170002001600000000003224010000001a0400000000000000000000000000000000000001000000010000002d002d000f000000000000000000000000000055f8500b78f8500b1b14000096f8500b1c440000e0060000000000008c00000001000000000000000000
00000000000000000000000000001c45000057040000000000008c0000000100000000000000000000000000000000000000000000001c46000040180000000000008c0000000100000000000000000000000000000000000000000000001b15000018f9500b1c470000e00600000000000000000000010000000000000000
0000000000000000000000000000001c4800005704000000000000000000000100000000000000000000000000000000000000000000001c4900004018000000000000000000000100000000000000000000000000000000000000000000001b1600008bf9500b1c4a0000e006000000000000000000000100000000000000
000000000000000000000000000000001c4b00005704000000000000000000000100000000000000000000000000000000000000000000001c4c00004018000000000000000000000100000000000000000000000000000000000000000000001b17000003fa500b1c4d0000e0060000000000000000000001000000000000
00000000000000000000000000000000001c4e00005704000000000000000000000100000000000000000000000000000000000000000000001c4f00004018000000000000000000000100000000000000000000000000000000000000000000001b1800007bfa500b1c500000e00600000000000000000000010000000000
0000000000000000000000000000000000001c5100005704000000000000000000000100000000000000000000000000000000000000000000001c5200004018000000000000000000000100000000000000000000000000000000000000000000001b190000f3fa500b1c530000e006000000000000000000000100000000
000000000000000000000000000000000000001c5400005704000000000000000000000100000000000000000000000000000000000000000000001c5500004018000000000000000000000100000000000000000000000000000000000000000000001b1a00006bfb500b1c560000e0060000000000000000000001000000
00000000000000000000000000000000000000001c5700005704000000000000000000000100000000000000000000000000000000000000000000001c5800004018000000000000000000000100000000000000000000000000000000000000000000001b1b0000e3fb500b1c590000e00600000000000000000000010000
0000000000000000000000000000000000000000001c5a00005704000000000000000000000100000000000000000000000000000000000000000000001c5b00004018000000000000000000000100000000000000000000000000000000000000000000001b1c00005bfc500b1c5c0000e006000000000000000000000100
000000000000000000000000000000000000000000001c5d00005704000000000000000000000100000000000000000000000000000000000000000000001c5e00004018000000000000000000000100000000000000000000000000000000000000000000001b1d0000d3fc500b1c5f0000e0060000000000000000000001
00000000000000000000000000000000000000000000001c6000005704000000000000000000000100000000000000000000000000000000000000000000001c6100004018000000000000000000000100000000000000000000000000000000000000000000001b1e00004bfd500b1c620000e00600000000000000000000
0100000000000000000000000000000000000000000000001c6300005704000000000000000000000100000000000000000000000000000000000000000000001c6400004018000000000000000000000100000000000000000000000000000000000000000000001b1f0000c3fd500b1c650000e006000000000000000000
000100000000000000000000000000000000000000000000001c6600005704000000000000000000000100000000000000000000000000000000000000000000001c6700004018000000000000000000000100000000000000000000000000000000000000000000001b2000003bfe500b1c680000e0060000000000000000
00000100000000000000000000000000000000000000000000001c6900005704000000000000000000000100000000000000000000000000000000000000000000001c6a00004018000000000000000000000100000000000000000000000000000000000000000000001b210000b3fe500b1c6b0000e00600000000000000
0000000100000000000000000000000000000000000000000000001c6c00005704000000000000000000000100000000000000000000000000000000000000000000001c6d00004018000000000000000000000100000000000000000000000000000000000000000000001b2200002bff500b1c6e0000e006000000000000
000000000100000000000000000000000000000000000000000000001c6f00005704000000000000000000000100000000000000000000000000000000000000000000001c7000004018000000000000000000000100000000000000000000000000000000000000000000001b230000a3ff500b1c710000e0060000000000
00000000000100000000000000000000000000000000000000000000001c7200005704000000000000000000000100000000000000000000000000000000000000000000001c7300004018000000000000000000000100000000000000000000000000000000000000000000001b2400001b00510b1c740000e00600000000
0000000000000100000000000000000000000000000000000000000000001c7500005704000000000000000000000100000000000000000000000000000000000000000000001c7600004018000000000000000000000100000000000000000000000000000000000000000000001b250000719011001c770000e006000000
000000000000000100000000000000000000000000000000000000000000001c7800005704000000000000000000000100000000000000000000000000000000000000000000001c7900004018000000000000000000000100000000000000000000000000000000000000000000001b260000e99011001c7a0000e0060000
00000000000000000100000000000000000000000000000000000000000000001c7b00005704000000000000000000000100000000000000000000000000000000000000000000001c7c00004018000000000000000000000100000000000000000000000000000000000000000000001b270000619111001c7d0000e00600
0000000000000000000100000000000000000000000000000000000000000000001c7e00005704000000000000000000000100000000000000000000000000000000000000000000001c7f00004018000000000000000000000100000000000000000000000000000000000000000000001b280000d99111001c800000e006
000000000000000000000100000000000000000000000000000000000000000000001c8100005704000000000000000000000100000000000000000000000000000000000000000000001c8200004018000000000000000000000100000000000000000000000000000000000000000000001b290000519211001c830000e0
06000000000000000000000100000000000000000000000000000000000000000000001c8400005704000000000000000000000100000000000000000000000000000000000000000000001c8500004018000000000000000000000100000000000000000000000000000000000000000000001b2a0000c99211001c860000
e006000000000000000000000100000000000000000000000000000000000000000000001c8700005704000000000000000000000100000000000000000000000000000000000000000000001c88000040180000000000000000000001000000000000000000000000000000000000000000000000000000}}}{\fldrslt }}
{\b\f1\cf8 Menu Option}{\b\cf8 \cell }{\b\f1\cf8 Keyboard Equivalent}{\b\cf8 \cell }{\b\f1\cf8 Comments}{\b\cf8 \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 \row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl
\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 
\clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1654\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx3740\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx8600\pard \nowidctlpar\widctlpar\intbl\adjustright {File->New\cell Alt-F-N\cell Create a new, empty, text file\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {File->Open\cell Alt-F-O\cell Open an existing file\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
File->Save\cell Alt-F-S\cell Save the current file\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {File->Save As\cell Alt-F-A\cell Save the current file with another name\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {File->Page Setup\cell Alt-F-T\cell Print out setup\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
File->Print\cell Alt-F-P\cell Print the file\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {File->Exit\cell Alt-F-X\cell Exit Notepad\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {Edit->Undo\cell Ctrl-Z\cell Undo edits\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Edit->Cut\cell Ctrl-X\cell Cut current selection\cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Edit->Copy\cell Ctrl-C\cell Copy current selection\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {Edit->Paste\cell Ctrl-V\cell Paste buffer\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Edit->Select All\cell Alt-E-S\cell Select entire file\cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Edit->Time/Date\cell F5\cell Insert Current Time/Date into file\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {Edit->Word Wrap\cell Alt-E-W\cell Wrap words at the end of the line (or let lines go offscreen)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
Edit->Set Font\cell Alt-E-F\cell Set the font (default : courier)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Search->Find\cell Alt-S-F\cell Find text\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Search->Find Next\cell F3\cell Find text again\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
Search->Replace\cell Alt-S-R\cell replace text (only on Windows NT)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Help->Help Topics\cell Alt-H-H\cell Help information on Notepad\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 
\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1654\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx3740\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx8600\pard 
\nowidctlpar\widctlpar\intbl\adjustright {Help->About\cell Alt-H-A\cell Copyright information\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par Run Notepad and type the following\'85
\par 
\par }{\f6\fs16 print "hello world"
\par dim b
\par input b
\par }{
\par Now exit the Notepad selecting the File->Exit menu and answer "Yes" when it asks you if you want to save the file.  Use the filename "hello.bs.txt".  Use the Windows Explorer (File Manager) window to copy the file to the CyberLoad directory c:\\
program files\\cybiko\\cyberload\\local_files\\user_files.  Finally, run CyberLoad and copy the program to the Cybiko.  Run CyBasic and execute your program.  It should display "hello world" in the screen.
\par 
\par }{\b\ul MS-DOS and Edit
\par }{The MS-DOS Edit command is a more powerful altern
ative to the Notepad editor.  It offers a more professional set of features than Notepad.  As a programmer, these features give us an easier path from our ideas to our code.  The faster we can type our ideas into the editor, the more ideas we can code.  S
o what features do we need in an editor? Here is a list of the bare essentials: 
\par 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {open file 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {save file 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {enter and edit text 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {cut, copy and paste of text 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {tab or indent 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {search 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls2\adjustright {search & replace 
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\par You may desire other features, but I fin
d these to be the minimum. Notepad (for Windows 9x) does not have a search & replace. Wordpad does not have line numbering. Wordpad does offer some other snazzy features, none of which are useful to us as programmers.  The ability for an editor to handle 
multiple styles of text (font, boldface, underline, etc...) is not considered a feature for us. We need to create and edit "plain text" or }{\cs15\ul\cf2 "ASCII"}{
 files. Therefore, Wordpad and Microsoft Word are overkill for our application. In fact, their special features just get in the way. 
\par 
\par }{\b\ul MSDOS as Your Working Environment}{ 
\par The MS-DOS (Microsoft Disk Operating System) Prompt is still delivered with all MS Windows operating systems. This is still a viable working environment for ou
r needs. To run it, select the Start menu and Programs. Pull right and find MS-DOS Prompt in the menu. 
\par 
\par You may want to modify some of the properties of the MS-DOS window. For example, the default setting is for a 24-line display. I like more lines of tex
t when using the text editor. To change the properties, click the left mouse button over the MS-DOS logo in the upper-left corner of the window - this will display a menu. Select "Properties" at the bottom of the menu. 
\par 
\par }\pard \keep\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Here are the settings I like to use for MS-DOS:
\par }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 
\clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1400\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 
\clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1672\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 
\clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx4053\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx4330
\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx6599\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx9810\pard \qc\keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright 
{\field{\*\fldinst {\b\cf8 PRIVATE}{\b\cf8 {\*\datafield 
020203001a0200000000012e080000000200000003000c0003000b00000000007723010000001a0200000000000000000000000000000000000001000000010000002d002d000f0000000000000000000000000000fb6b1500236c15001b020000416c15001c020000ac050000000000008c00000001000000000000000000
00000000000000000000000000001c03000093090000000000008c0000000100000000000000000000000000000000000000000000001c04000093090000000000008c0000000100000000000000000000000000000000000000000000001c050000ee090000000000008c0000000100000000000000000000000000000000
000000000000001b030000046d15001c060000ac05000000000000000000000100000000000000000000000000000000000000000000001c0700009309000000000000000000000100000000000000000000000000000000000000000000001c08000093090000000000000000000001000000000000000000000000000000
00000000000000001c090000ee09000000000000000000000100000000000000000000000000000000000000000000001b040000b86d15001c0a0000ac05000000000000000000000100000000000000000000000000000000000000000000001c0b0000930900000000000000000000010000000000000000000000000000
0000000000000000001c0c00009309000000000000000000000100000000000000000000000000000000000000000000001c0d0000ee09000000000000000000000100000000000000000000000000000000000000000000001b0500007b6e15001c0e0000ac05000000000000000000000000000000000000000000000000
000000000000000000001c0f00009309000000000000000000000100000000000000000000000000000000000000000000001c1000009309000000000000000000000100000000000000000000000000000000000000000000001c110000ee0900000000000000000000010000000000000000000000000000000000000000
0000001b060000346f15001c120000ac05000000000000000000000100000000000000000000000000000000000000000000001c1300009309000000000000000000000100000000000000000000000000000000000000000000001c1400009309000000000000000000000100000000000000000000000000000000000000
000000001c150000ee09000000000000000000000100000000000000000000000000000000000000000000001b070000f76f15001c160000ac05000000000000000000000100000000000000000000000000000000000000000000001c17000093090000000000000000000001000000000000000000000000000000000000
00000000001c1800009309000000000000000000000100000000000000000000000000000000000000000000001c190000ee09000000000000000000000100000000000000000000000000000000000000000000001b080000ba7015001c1a0000ac0500000000000000000000000000000000000000000000000000000000
0000000000001c1b00009309000000000000000000000100000000000000000000000000000000000000000000001c1c00009309000000000000000000000100000000000000000000000000000000000000000000001c1d0000ee09000000000000000000000100000000000000000000000000000000000000000000001b
090000737115001c1e0000ac05000000000000000000000000000000000000000000000000000000000000000000001c1f00009309000000000000000000000100000000000000000000000000000000000000000000001c200000930900000000000000000000010000000000000000000000000000000000000000000000
1c210000ee09000000000000000000000100000000000000000000000000000000000000000000001b0a00002c7215001c220000ac05000000000000000000000000000000000000000000000000000000000000000000001c2300009309000000000000000000000000000000000000000000000000000000000000000000
001c2400009309000000000000000000000100000000000000000000000000000000000000000000001c250000ee09000000000000000000000100000000000000000000000000000000000000000000001b0b0000db7215001c260000ac050000000000000000000000000000000000000000000000000000000000000000
00001c2700009309000000000000000000000100000000000000000000000000000000000000000000001c2800009309000000000000000000000100000000000000000000000000000000000000000000001c290000ee09000000000000000000000100000000000000000000000000000000000000000000001b0c000094
7315001c2a0000ac05000000000000000000000000000000000000000000000000000000000000000000001c2b00009309000000000000000000000000000000000000000000000000000000000000000000001c2c00009309000000000000000000000100000000000000000000000000000000000000000000001c2d0000
ee09000000000000000000000100000000000000000000000000000000000000000000001b0d0000437415001c2e0000ac05000000000000000000000100000000000000000000000000000000000000000000001c2f00009309000000000000000000000100000000000000000000000000000000000000000000001c3000
009309000000000000000000000100000000000000000000000000000000000000000000001c310000ee090000000000000000000001000000000000000000000000000000000000000000000000000000}}}{\fldrslt }}{\b\f1\cf8 Tab Selection}{\b\cf8 \cell \cell }{\b\f1\cf8 Setting}{\b\cf8 
\cell }{\b\f1\cf8 Default}{\b\cf8 \cell \cell }{\b\f1\cf8 Recommended}{\b\cf8 \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\b\cf8 \row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl
\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1400\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1672\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4053\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4330\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx6599\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx9810\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cs22\f2 Program}{\cell \cell }{
\cs22\f2 -keep all defaults-}{\cell }{\cs22\f2 -keep all defaults-}{\cell \cell }{\cs22\f2 -keep all defaults-}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cs22\f2 Font}{\cell \cell }{\cs22\f2 Bitmap Only}{\cell }{\cs22\f2 Both Font Types}{\cell \cell }{\cs22\f2 Bitmap Only}{\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cell \cell }{\cs22\f2 Font Size}{\cell }{\cs22\f2 
Auto}{\cell \cell }{\cs22\f2 8x12}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\cs22\f2 Memory}{\cell \cell }{\cs22\f2 -keep all defaults-}{\cell }{\cs22\f2 -all set to Auto-}{\cell \cell }{\cs22\f2 -keep all defaults-}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cs22\f2 Screen}{\cell \cell }{\cs22\f2 Usage}{\cell }{\cs22\f2 Window}{\cell \cell }{\cs22\f2 Window (not Full Screen)}{\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cell \cell }{\cs22\f2 Initial Size}{\cell }{\cs22\f2 
Default}{\cell \cell }{\cs22\f2 50 lines}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright 
{\cell \cell }{\cs22\f2 Window}{\cell }\pard\plain \s19\keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright \fs20\cgrid {\cs22\f2 Display Toolbar (checked)}{\f2 \cell }\pard\plain 
\keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright \fs20\cgrid {\cell }{\cs22\f2 Do Not Display Toolbar}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cell \cell \cell }{\cs22\f2 Restore Settings (checked)}{\cell \cell }{\cs22\f2 Restore Settings (checked)}{\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cell \cell }{\cs22\f2 Performance}{\cell }{\cs22\f2 
Fast ROM Emulation (checked)}{\cell \cell }{\cs22\f2 Fast ROM Emulation (checked)}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cell \cell \cell }{\cs22\f2 Dynamic Memory Allocation (checked)}{\cell \cell }{\cs22\f2 Dynamic Memory Allocation (checked)}{\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh
\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1400\clmrg\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1672\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4053\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4330\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 
\clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx6599\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 
\cltxlrtb \cellx9810\pard \keep\keepn\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\cs22\f2 Misc}{\cell \cell }{\cs22\f2 -keep all defaults-}{\cell }{\cs22\f2 -keep all defaults-}{\cell \cell }{\cs22\f2 
-keep all defaults-}{\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\b\ul 
\par MS-DOS Commands}{ 
\par There are relatively few MS-DOS commands that you will need to know in this tutorial. Fortunately, the majority of tasks can be handled in Windows. Nevertheless it is useful to know how to do certain, fundamental operations. The following table summarizes
 them:
\par 
\par }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1078\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1772\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb 
\cellx4223\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx4405\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 
\clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx7285\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 
\clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx9827\pard \qc\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\field{\*\fldinst {\b\cf8 PRIVATE}{\b\cf8 {\*\datafield 
020203001a0200000000014e03000000020000000200060002000500000000007723010000001a0300000000000000000000000000000000000001000000010000002d002d000f00000000000000000000000000003df2500b65f2500b1b0e000083f2500b1c3200009c040000000000008c00000001000000000000000000
00000000000000000000000000001c330000590b0000000000008c0000000100000000000000000000000000000000000000000000001c340000cb120000000000008c0000000100000000000000000000000000000000000000000000001b0f000000f3500b1c3500009c0400000000000000000000010000000000000000
0000000000000000000000000000001c360000590b000000000000000000000100000000000000000000000000000000000000000000001c370000cb12000000000000000000000100000000000000000000000000000000000000000000001b10000073f3500b1c3800009c04000000000000000000000100000000000000
000000000000000000000000000000001c390000590b000000000000000000000100000000000000000000000000000000000000000000001c3a0000cb12000000000000000000000100000000000000000000000000000000000000000000001b110000ebf3500b1c3b00009c040000000000000000000001000000000000
00000000000000000000000000000000001c3c0000590b000000000000000000000100000000000000000000000000000000000000000000001c3d0000cb12000000000000000000000100000000000000000000000000000000000000000000001b12000063f4500b1c3e00009c0400000000000000000000010000000000
0000000000000000000000000000000000001c3f0000590b000000000000000000000100000000000000000000000000000000000000000000001c400000cb12000000000000000000000100000000000000000000000000000000000000000000001b130000dbf4500b1c4100009c04000000000000000000000100000000
000000000000000000000000000000000000001c420000590b000000000000000000000100000000000000000000000000000000000000000000001c430000cb120000000000000000000001000000000000000000000000000000000000000000000000000000}}}{\fldrslt }}{\b\f1\cf8 Command}{\b\cf8 \cell }
{\b\f1\cf8 Syntax}{\b\cf8 \cell \cell \cell }{\b\f1\cf8 Remarks}{\b\cf8 \cell \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\b\cf8 \row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl
\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 
\clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1078\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1772\clmrg\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4223\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4405\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx7285\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 
\clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx9827\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Del\cell del filename.ext\line del *.ext
\cell \cell \cell deletes one or more files (*=wildcard characters)\cell \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }
\ilvl12\adjustright {Copy\cell copy file1.ext file2.ext\cell \cell \cell copies file1 to file2\cell \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Cd\cell cd dirname\line cd ..\cell \cell \cell change directory from one place to another\line change directory to parent directory\cell \cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {batch file\cell filename.bat\cell \cell \cell 
a list of MS-DOS commands in a file with the extension .bat. This will be executed when you type in the name of the file (like make.bat in Step1.app)\cell \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1078\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb 
\cellx1772\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4223\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 
\clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4405\clmgf\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx7285
\clmrg\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx9827\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }
\ilvl12\adjustright {Dir\cell dir \line dir *.ext \cell \cell \cell - list all files in current directory\line - list only files with certain extension\cell \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\row }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\b\ul 
\par Introducing MS-DOS Edit}{ 
\par In the MS-DOS Prompt, type "Edit".  When the screen pops up, type in the following\'85
\par 
\par }{\f6\fs16 print "hello world"
\par dim b
\par input b
\par }{
\par Now exit the editor by typing the ALT-F-X commands and answer "Yes" when it asks you if you want to save the file.  Save the file as "hello.bs".  Use the copy command to copy the file to the CyberLoad directory\'85
\par 
\par copy hello.bs c:\\program files\\cybiko\\cyberload\\local_files\\user_files\\hello.bs.txt
\par 
\par (remember to change the name from hello.bs to hello.bs.txt)  Finally, run CyberLoad and copy the program to the Cybiko.  Run CyBasic and execute your program.  It should display "hello world" in the screen.
\par 
\par }\pard \keep\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\b\ul MS-DOS Edit Commands }{
\par MS-DOS Edit is a very straightforward editor with a few hidden options.  It is "mouse-enabled," meaning that if you click on the menu bar, the expected Windows-like thing will happen. Clicking on some text in the Editor window will move the
 cursor to that position. You can drag the mouse over text and it will select the text. 
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\par If you would rather, you can use the keyboard for menu operations by holding down the ALT key (at the bottom of the keyboard, next to the space bar). When you hold do
wn the ALT key, the menu "lights up" and you may press the highlighted character to drop-down the selected menu. For example, selecting ALT-F drops-down the File menu. Also, holding down the SHIFT key and moving the arrow keys will select text for cut and
 paste operations. 
\par 
\par In dialog boxes, the TAB key usually will move you from field to field. The arrow keys will move you up, down, left, and right. If you select text in the Editor window and hit the TAB key, the selected region will be indented one tab st
op (usually 8 characters). Holding down the SHIFT key and hitting TAB will "outdent" one tab stop. 
\par 
\par }{\b\ul MS-DOS Edit Menu commands}{ 
\par }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1663\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx2717\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb 
\cellx8641\pard \qc\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {\field{\*\fldinst {\b\cf8 PRIVATE}{\b\cf8 {\*\datafield 
020203001a020000000001ce0b000000020000000200170002001600000000003224010000001a0400000000000000000000000000000000000001000000010000002d002d000f000000000000000000000000000055f8500b78f8500b1b14000096f8500b1c440000e0060000000000008c00000001000000000000000000
00000000000000000000000000001c45000057040000000000008c0000000100000000000000000000000000000000000000000000001c46000040180000000000008c0000000100000000000000000000000000000000000000000000001b15000018f9500b1c470000e00600000000000000000000010000000000000000
0000000000000000000000000000001c4800005704000000000000000000000100000000000000000000000000000000000000000000001c4900004018000000000000000000000100000000000000000000000000000000000000000000001b1600008bf9500b1c4a0000e006000000000000000000000100000000000000
000000000000000000000000000000001c4b00005704000000000000000000000100000000000000000000000000000000000000000000001c4c00004018000000000000000000000100000000000000000000000000000000000000000000001b17000003fa500b1c4d0000e0060000000000000000000001000000000000
00000000000000000000000000000000001c4e00005704000000000000000000000100000000000000000000000000000000000000000000001c4f00004018000000000000000000000100000000000000000000000000000000000000000000001b1800007bfa500b1c500000e00600000000000000000000010000000000
0000000000000000000000000000000000001c5100005704000000000000000000000100000000000000000000000000000000000000000000001c5200004018000000000000000000000100000000000000000000000000000000000000000000001b190000f3fa500b1c530000e006000000000000000000000100000000
000000000000000000000000000000000000001c5400005704000000000000000000000100000000000000000000000000000000000000000000001c5500004018000000000000000000000100000000000000000000000000000000000000000000001b1a00006bfb500b1c560000e0060000000000000000000001000000
00000000000000000000000000000000000000001c5700005704000000000000000000000100000000000000000000000000000000000000000000001c5800004018000000000000000000000100000000000000000000000000000000000000000000001b1b0000e3fb500b1c590000e00600000000000000000000010000
0000000000000000000000000000000000000000001c5a00005704000000000000000000000100000000000000000000000000000000000000000000001c5b00004018000000000000000000000100000000000000000000000000000000000000000000001b1c00005bfc500b1c5c0000e006000000000000000000000100
000000000000000000000000000000000000000000001c5d00005704000000000000000000000100000000000000000000000000000000000000000000001c5e00004018000000000000000000000100000000000000000000000000000000000000000000001b1d0000d3fc500b1c5f0000e0060000000000000000000001
00000000000000000000000000000000000000000000001c6000005704000000000000000000000100000000000000000000000000000000000000000000001c6100004018000000000000000000000100000000000000000000000000000000000000000000001b1e00004bfd500b1c620000e00600000000000000000000
0100000000000000000000000000000000000000000000001c6300005704000000000000000000000100000000000000000000000000000000000000000000001c6400004018000000000000000000000100000000000000000000000000000000000000000000001b1f0000c3fd500b1c650000e006000000000000000000
000100000000000000000000000000000000000000000000001c6600005704000000000000000000000100000000000000000000000000000000000000000000001c6700004018000000000000000000000100000000000000000000000000000000000000000000001b2000003bfe500b1c680000e0060000000000000000
00000100000000000000000000000000000000000000000000001c6900005704000000000000000000000100000000000000000000000000000000000000000000001c6a00004018000000000000000000000100000000000000000000000000000000000000000000001b210000b3fe500b1c6b0000e00600000000000000
0000000100000000000000000000000000000000000000000000001c6c00005704000000000000000000000100000000000000000000000000000000000000000000001c6d00004018000000000000000000000100000000000000000000000000000000000000000000001b2200002bff500b1c6e0000e006000000000000
000000000100000000000000000000000000000000000000000000001c6f00005704000000000000000000000100000000000000000000000000000000000000000000001c7000004018000000000000000000000100000000000000000000000000000000000000000000001b230000a3ff500b1c710000e0060000000000
00000000000100000000000000000000000000000000000000000000001c7200005704000000000000000000000100000000000000000000000000000000000000000000001c7300004018000000000000000000000100000000000000000000000000000000000000000000001b2400001b00510b1c740000e00600000000
0000000000000100000000000000000000000000000000000000000000001c7500005704000000000000000000000100000000000000000000000000000000000000000000001c7600004018000000000000000000000100000000000000000000000000000000000000000000001b250000719011001c770000e006000000
000000000000000100000000000000000000000000000000000000000000001c7800005704000000000000000000000100000000000000000000000000000000000000000000001c7900004018000000000000000000000100000000000000000000000000000000000000000000001b260000e99011001c7a0000e0060000
00000000000000000100000000000000000000000000000000000000000000001c7b00005704000000000000000000000100000000000000000000000000000000000000000000001c7c00004018000000000000000000000100000000000000000000000000000000000000000000001b270000619111001c7d0000e00600
0000000000000000000100000000000000000000000000000000000000000000001c7e00005704000000000000000000000100000000000000000000000000000000000000000000001c7f00004018000000000000000000000100000000000000000000000000000000000000000000001b280000d99111001c800000e006
000000000000000000000100000000000000000000000000000000000000000000001c8100005704000000000000000000000100000000000000000000000000000000000000000000001c8200004018000000000000000000000100000000000000000000000000000000000000000000001b290000519211001c830000e0
06000000000000000000000100000000000000000000000000000000000000000000001c8400005704000000000000000000000100000000000000000000000000000000000000000000001c8500004018000000000000000000000100000000000000000000000000000000000000000000001b2a0000c99211001c860000
e006000000000000000000000100000000000000000000000000000000000000000000001c8700005704000000000000000000000100000000000000000000000000000000000000000000001c88000040180000000000000000000001000000000000000000000000000000000000000000000000000000}}}{\fldrslt }}
{\b\f1\cf8 Menu Option}{\b\cf8 \cell }{\b\f1\cf8 Keyboard Equivalent}{\b\cf8 \cell }{\b\f1\cf8 Comments}{\b\cf8 \cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\b\cf8 \row }\trowd \trkeep\trbrdrt
\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 
\clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1663\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2717\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx8641\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {File->New\cell 
Alt-F-N\cell Create a new, empty, text file\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
File->Open\cell Alt-F-O\cell Open a file that has already been created\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }
\ilvl12\adjustright {File->Save\cell Alt-F-S\cell Save the currently displayed file\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {File->Save As\cell Alt-F-A\cell Save the currently displayed file with another name\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {File->Close\cell Alt-F-C\cell Close the current file and its window\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {File->Print\cell Alt-F-P\cell Print the currently displayed file
\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {File->Exit\cell Alt-F-X\cell Exit the Editor\cell 
}\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Edit->Cut\cell Ctrl-X\cell 
Delete the currently selected text and copy it to the buffer\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }
\ilvl12\adjustright {Edit->Copy\cell Ctrl-C\cell Copy the currently selected text to the buffer\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Edit->Paste\cell Ctrl-V\cell Insert the buffer into the currently selected file\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec 
}\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Edit->Clear\cell Del\cell Delete the currently selected text (but don't copy it to the buffer)\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Search->Find\cell Alt-S-F\cell 
Open the Find Dialog Box and search for the first occurrence\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }
\ilvl12\adjustright {Search->Repeat Last Find\cell F3\cell Repeat the last find command\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Search->Replace\cell Alt-S-R\cell Open the Search/Replace Dialog box\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {View->Split Window\cell Ctrl-F6\cell Split the current window in two horizontally\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {View->Size Window\cell Ctrl-F8\cell 
Begin resizing the split windows. Use the up and down arrow keys\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }
\ilvl12\adjustright {View->Close Window\cell Ctrl-F4\cell Close the currently selected split window, restore to a single window pane\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {View->n\cell Alt-n\cell where n=1-9 - make the selected file the currently selected file\cell }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Options->Settings\cell Alt-O-S\cell 
Display the Settings dialog box\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Options->Colors\cell 
Alt-O-C\cell Display the Colors dialog box allowing you to customize the colors to your preferences\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Help->Commands\cell Alt-H-C\cell Display a listing of keyboard commands\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\row }\trowd \trkeep\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1663\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2717\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx8641\pard 
\nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {Help->About\cell Alt-H-A\cell Display copyright information\cell }\pard \nowidctlpar\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\row 
}\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\par The File->Open and File->Save As menu options will display a dialog box with ... 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Filename input field - can hold wildcard (*) patterns or filenames 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Current Working Directory
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Filename listbox - showing all files matching the pattern in the Filename input field 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Directories listbox - showing the parent dir (..), any directories, and other devices ([-A-], [-C-], [-D-], etc...) 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Open Read Only Checkbox - select this if you dot want to modify the file when you open it (either click on it with the mouse, or tab over to it and hit the space bar) 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Open Binary Checkbox - select this if you want to open files with other than ASCII data (like .app files) 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Line Width - for binary files only, the number of characters per line to display 
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\par The File-Print menu option will give you the option of printing selected text or the entire file. 
\par 
\par The Search->Find menu option will display a dialog box with ... 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Find What - the text string you want to find 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Match
 whole word only checkbox - use this to find the search string as a word (surrounded by white space - space characters, tabs, newlines) 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Match case - use this to force upper and lower case letters to match 
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\par The Search->Replace menu option will display a dialog box with ... 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Find What - the text string you want to replace 

\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Replace With - the text string you want to replace the search string with 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Match whole word only checkbox - use this to find the search string as a word 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Match case - use t
his to force upper and lower case letters to match 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Replace Button - replace a single occurrence of the search string 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Replace All - replace all occurrences in the currently selected file 
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl12\ls0\pnrnot0\pndec }\ilvl12\adjustright {
\par The View->Split option splits the current window into 2 pane
s. You are free to open a second, different file into the second window. You may resize the panes by selecting View->Size Window and moving the "center bar" up and down with the arrow keys. Or, you can use the mouse pointer to grab the "center bar" and dr
ag it to the size you like. Selecting View->Close Window will return the Editor to single-pane viewing. 
\par 
\par The Options->Settings will display a dialog box with ... 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Tab Stop (defaults to 8, but I recommend 4) - the number of spaces to indent when TAB is entered. 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\nowidctlpar\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {
Colors - allows you to change many color parameters in the Editor. I recommend keeping the defaults. If you get lost, you can always come here and click on "Defaults". 
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par The Help->Commands menu option displays a dialog box with a listing of man
y "hidden" keyboard commands. I won't repeat their descriptions here. Most of them are obvious (like Home to return to the beginning of a line). But there are a few surprises (like CTRL-Y to delete a line). Use the Page-Up and Page-Down keys to scroll thr
ough the list. 
\par 
\par 
\par {\*\bkmkstart _Toc509128877}{\*\bkmkstart _Toc509393601}{\*\bkmkstart _Toc509393652}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 6\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Programming Basics : Input/Process/Output{\*\bkmkend _Toc509128877}{\*\bkmkend _Toc509393601}{\*\bkmkend _Toc509393652}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Input, Processing, Output
\par }{All computer programs have three elements \endash  Input, Processing, and Output.  Input
 is information (or data) fed into the computer.  Input can be in the form of a textual string of characters from the keyboard, a mouse movement, or a data file.  Output is information (or data) sent out of the computer.   Output can be in the form of tex
t displayed on the computer screen, mouse movement, graphics, or writing to a data file.  Finally, Processing is any action performed on the data that was input.
\par 
\par }{\b\ul Input
\par }{The CyBasic language has a single command to get data from the user and into the Cybiko computer.  It is called \lquote Input\rquote .  It takes data from the keypad and inserts it into a variable (we\rquote 
ll discuss variables more in the next chapter).  The Input statement looks like this :
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {input a
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par The \lquote a\rquote  in the input statement is the name of a variable, which receives the data.
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {In CyBasic-2 the input statement accepts a prompt string.  This string is displayed on the bottom line of the screen before the user enters their value:
\par 
\par }{\f6\fs16 dim name[32]
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {input "Enter your name", name
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul Print
\par }{The command for output to the Cybiko screen is \lquote Print\rquote .  The Print statement takes one or more variables and character strings (separated by commas) and displays them on the screen.  The screen holds 7 lines of about 23 characters each.

\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {print \ldblquote The value of a is\rdblquote , a
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par The stuff between the quotes (\ldblquote ) is called a \ldblquote Literal String\rdblquote .  This is a string of letters, digits, and other characters that you want displayed on the screen.  Here, the variable \lquote a\rquote 
 will be displayed.  It is important to realize that \lquote a\rquote  is not displayed, but, rather, it\rquote s value.
\par 
\par Note that when printing a number (like \lquote a\rquote  here) the Print statement will automatically leave a leading space in front of the value.  This is the \lquote sign\rquote  of the variable \endash  whether it is posit
ive or negative.  Positive values will have a leading space.  Negative values will have a minus sign.
\par 
\par Also note that typing these statements into CyBasic alone will result in an error.  You will need to Dimension (Dim) these variables before using them.  Dim is covered in the next chapter.
\par }{\b\ul 
\par Processing
\par }{Nearly everything else in the CyBasic set of commands can be considered processing.  The simplest sort of processing is assignment.  The assignment operation is the equal sign \lquote =\rquote .  You can assign a value to a variable like this: 
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {a = 1
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par If you have had some math or algebra, this may look odd or strange. In math or algebra an equals sign is a comparison.  Here, we\rquote re giving the variable \lquote a\rquote  a value of one.  Consider the next example\'85
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {a=1
\par b=a+1
\par print b
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par Here, \lquote b\rquote  is given the value \lquote a+1\rquote .  In this case the variable \lquote a\rquote  is replaced with the }{\i\ul value}{ of \lquote a\rquote  (which is one).  Hence, b=1+1 or b=2.  So, the value of \lquote b\rquote  is two.
\par 
\par }{\b\ul Comments
\par }{All good computer languages have a way to document the }{\i\ul code}{ (programmer lingo
 for the statements comprising a program) in the program itself.  Commenting a program is good practice in the event that you want to share your program with someone else.  It is also a good idea as a way of reminding yourself what you intended when you w
rote the code to begin with.  It is good practice to have one line of commentary for each line of code \endash  on average.  In CyBasic, comments are identified by a single-quote mark (also called the \lquote apostrophe\rquote  mark).
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {\lquote  demo program for chapter 6
\par dim a
\par dim b
\par a=1   \lquote set a to one
\par b=a+1   \lquote set b to one greater than a
\par Print b    \lquote show the user the value of b
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par As we\rquote ll see in the example program, it is also useful to name your variables in a self-documenting way.  If you are summing 4 grades, name the variables grad
e1, grade2, grade3, grade4, sum (the sum of the grades) and avg (the average of the grades).  While variable names like \lquote a\rquote  and \lquote b\rquote  are short and easy to type, they are also cryptic and hard to remember what they hold.}{\b\ul 

\par 
\par Upper and Lower Case
\par }{CyBasic does no
t care about upper or lower case.  A varaible name written in uppercase (A) in one place can be referred to later in lowercase (a).  The names of statements in CyBasic are also not case sensitive.  So Print and PRINT and print are all the same function.

\par }{\b\ul 
\par \page Example Program
\par }{The example program will take 4 values as input, sum them, and take the average.  The average is the sum of a set of numbers divided by the number of items.
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {' chapter 6 example program
\par ' sum and average of 4 grades
\par ' grades are from 0-100
\par dim grade0  ' we\rquote ll discuss the Dim command in the next chapter
\par dim grade1 ' here are our 4 grades
\par dim grade2
\par dim grade3
\par dim sum    'this variable will store the sum of the 4 grades
\par dim avg    'this variable will store the average of the 4 grades
\par 
\par ' ---INPUT ---
\par print "Enter grade 0"  'we\rquote ll discuss numbering at 0 in the next chapter
\par input grade0                'get the grades from the student
\par print "Enter grade 1"
\par input grade1
\par print "Enter grade 2"
\par input grade2
\par print "Enter grade 3"
\par input grade3
\par 
\par '--- PROCESS ---
\par ' compute the sum and the average
\par sum = grade0+grade1+grade2+grade3
\par avg = sum/4
\par 
\par '--- OUTPUT ---
\par print "The average of your "
\par print "4 grades is", avg
\par 
\par print "Press <Enter> to continue"
\par dim tmp ' a temporary variable
\par input tmp 'wait for the user to press enter
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par {\*\bkmkstart _Toc509128878}{\*\bkmkstart _Toc509393602}{\*\bkmkstart _Toc509393653}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 7\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Variables and DIM{\*\bkmkend _Toc509128878}{\*\bkmkend _Toc509393602}{\*\bkmkend _Toc509393653}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Variables
\par }{As we saw in Chapter 6, variables hold a value.  The value can be a number (like 1) or the  result of an operation (
like a+1).  You can think of variable as a shoebox with a label on the outside.  Inside the shoebox is a value.  On the front of the shoebox is a label with a variable name (like \lquote a\rquote , or \lquote b\rquote  or \lquote avg\rquote ).  
\par 
\par We also saw that before using a variable we have to declare it.  This is done with the \lquote Dim\rquote 
 statement (short for Dimension).  The Dim statement alerts CyBasic to the fact that we are about to use a variable.  The variable is initially set (initialized) to zero.
\par 
\par }{\b\ul Data Types
\par }{It turns out that CyBasic has 4 different variable types.  The usual (default) type is called \lquote Double\rquote .  This stands for \ldblquote Double precision floating point\rdblquote 
.  It basically means that the variable can hold numbers with decimal points in them.  Double variables can hold values from \endash 4.9E-324 to +1.8E+308 (the \lquote E\rquote 
 here means Exponent or the number of zeroes).  This is a very large range of numbers.  In computer terms, this is an 8-byte value.  The Double is generally good for computing any type of numeric value.
\par 
\par But since the Double takes up 8 bytes and can handle such a large range of numbers, it also consumes more computer resources.  In short, computations using a Double are slow.  So there are some alternatives.  These alternatives are known a
s integer variables.  Integer variables take less space, but cannot hold a decimal point.  To declare a double variable you can place the words \ldblquote as double\rdblquote  after the declaration.  If you don\rquote 
t declare a data type, CyBasic assumes you meant \ldblquote as double\rdblquote .
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {dim a
\par dim a as double
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par \lquote Long\rquote  variables are integer variables (no decimal point) containing 4 bytes.  They can range from 
\par \endash 2,147,483,648 to +2,147,483,647.  Because Longs are integer variables, they are faster than Double variables when it comes to computat
ion.  But, since they are 4 bytes long, they still take up a lot of Cybiko computing power when processing.  Use the Long data type when you need large values but you don\rquote t need a decimal point.  To declare a Long variable place the words 
\ldblquote as long\rdblquote  after the declaration:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {dim a as long
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par \lquote Int\rquote  variables are integer variables (like Long) but contain only 2 bytes of data.  They can range from 
\par -32,768 to +32,767.  As you see, the range is much smaller than a Long.  And because this is the favorite size of numbers for the Cybiko\rquote s internal microprocessor, Int variables perform the fastest.  To declare an Int variable place the words 
\ldblquote as int\rdblquote  after the declaration:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {dim a as int
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par \lquote Char\rquote  variables are also integer variables, but contain only 1 byte of data.  Char variables range from 
\par -128 to +127.  They are not very useful in computations \endash  and since they are smaller than the Cybiko\rquote s favored word size (2 bytes) it actually takes longer to process a Char than an Int.  As we\rquote ll see shortly, Char variables are usual
ly used in an array as a character string for input and output, rather than as a numeric quantity for computation.  To declare a Char variable place the words \ldblquote as char\rdblquote  after the declaration
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {dim a as char
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par 
\par }{\b\ul Names of Variables
\par }{The name of a variable can be up to 19 characters long with no spaces in it.  The first letter must be alphabetic (a-z).  Subsequent letters may be alphanumeric (a-z or 0-9).  As mentioned before, upper and lower case do not matter.
\par }{\b\ul 
\par Arrays
\par }{An array is a list, or grouping, of variables.  If you have a list of something you will want to declare an array of them.  Returning to our shoebox example, suppose you have an exam grade.  You can mark the outside of a shoebox with the name 
\ldblquote grade\rdblquote  and put the exam inside the box.  If you ever want to refer to the grade, you find the shoebox marked \ldblquote grade\rdblquote 
 and take out the exam and look at the grade you received.  This use of a single variable is called a \lquote scalar\rquote .
\par 
\par Now, let\rquote s assume that you have many students and you want to keep all their grades separated.  You might get a set of shoeboxes and line them up in a row.  On the front of each box put the student\rquote s number (0, 1, 2, 3, etc\'85
).  Each student exam goes into the box with that student\rquote s number on it.  From then on, you access the boxes as \ldblquote grade[0]\rdblquote , \ldblquote grade[1]\rdblquote , etc\'85
  This is called an array of variables.  The part between the brackets is called the subscript.
\par 
\par To create an array of variables, use the Dim statement as before and put the number of elements of the array in brackets after the name.  Here is an example of an array of 10 grades:
\par 
\par Dim grades[10] as double
\par 
\par Humans are taught to count starting from one.  If I asked you to count to ten, you might replay \ldblquote 1, 2, 3, \'8510\rdblquote   But computers prefer to
 count starting from zero.  (Technically speaking, computers use an offset and it is convenient for computation and memory layout if the offset starts at zero).  So, the first grade in our example is grade[0] (Does this explain why I used grade0 earlier? 
 I hope so!).  The next one is grade[1]. And so on up to grade[9]. (Notice that we cannot use grade[10]).
\par 
\par All data types may be arrays.  The Char array is special in that it is treated like a string of text by CyBasic.  When you want to input a name, use the Char array:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Dim name[32] as char
\par Input name
\par Print \ldblquote your name is \ldblquote , name
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul \page Example Program
\par }{Here we return to our grade averaging problem, only this time we use an array of grades.  In the next chapter we will see the real power of arrays when we introduce loops.
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {' chapter 7 example program
\par ' sum and average of 4 grades
\par ' grades are from 0-100
\par dim grade[4]  ' an array of 4 grades
\par dim sum    'this variable will store the sum of the 4 grades
\par dim avg    'this variable will store the average of the 4 grades
\par 
\par ' ---INPUT ---
\par print "Enter grade 0"  'we\rquote ll discuss numbering at 0 in the next chapter
\par input grade[0]                'get the grades from the student
\par print "Enter grade 1"
\par input grade[1]
\par print "Enter grade 2"
\par input grade[2]
\par print "Enter grade 3"
\par input grade[3]
\par 
\par '--- PROCESS ---
\par ' compute the sum and the average
\par sum = grade[0]+grade[1]+grade[2]+grade[3]
\par avg = sum/4
\par 
\par '--- OUTPUT ---
\par print "The average of your"
\par print "4 grades is", avg
\par 
\par print "Press <Enter> to continue"
\par dim tmp ' a temporary variable
\par input tmp 'wait for the user to press enter
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par {\*\bkmkstart _Toc509128879}{\*\bkmkstart _Toc509393603}{\*\bkmkstart _Toc509393654}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 8\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Looping : For \'85 Next{\*\bkmkend _Toc509128879}{\*\bkmkend _Toc509393603}{\*\bkmkend _Toc509393654} 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The computer is very good at following instructions.  Its ability to do what it is told to do, ov
er and over again, is what makes the computer a valuable tool.  In this chapter we will learn how to instruct a computer to do the same thing several times.  
\par 
\par This ability is called looping.  It is called looping because in the early days of computers programmers drew pictures of their programs before they ever wrote code.  These pictures were called \ldblquote flow charts.\rdblquote 
  In a flow chart a statement in a program was shown as a box.  The next statement was connected to the first by a line with an arrow on it.  If
 a programmer wanted to repeat a step in the process, they would show it by drawing a line back up to the previous step \endash 
 forming a loop.  (There is also the story of how paper tape with little holes in it was used to instruct the computer.  To make the computer repeat instructions over and over, the programmer would connect the end of the tape to the beginning \endash 
 forming a loop.)
\par 
\par In CyBasic the loop is implemented by the For command.  The For command has three parts: the initialization, the final value, and the (optional) step.
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {for [initialization] to [final value] [step]
\par for i=0 to 3 step 1
\par     \lquote statements go here
\par next
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par The \lquote initialization\rquote  part uses an un-Dim\rquote d variable name (like i) and is initialized to the start value of the loop.  The \lquote to\rquote  part declares the last value of the loop and the \lquote step\rquote 
 declares the amount to increment \lquote i\rquote  inside the loop.  If the \lquote step\rquote  part is omitted \ldblquote step 1\rdblquote  is assumed.  The word \ldblquote next\rdblquote 
 indicates the end of the loop and tells CyBasic to increment the variable by the step value and to go back to the top of the loop (the statement just after the for).  If the variable has reached the \lquote final value\rquote 
 then processing continues on the next statement after the next.
\par 
\par For readability, the statements inside the for loop are indented 3 or 4 spaces.
\par 
\par It is possible to exit a For loop early by executing the "Exit For" command in the middle of the loop.
\par 
\par }{\b\i\ul Historical Note}{: The variables i, j, k, l, m, & n are favorite variables for loops.  This is for two reasons.  First, the sin
gle letter makes for easier typing inside the array variable name.  Second, in the early days of programming (1960s) there was a language called FORTRAN that had no DIM statement. Instead, all variables were named a-z, and were assumed to be Double (float
ing point).  Except for the variables i-n, which were integers.  Why i-n?  Because i & n were the first 2 letters of the word \ldblquote integer\rdblquote .
\par 
\par }{\b\ul Infinite Loops
\par }{It is possible to get caught in a loop that never exits.  This is known as an infinite loop.  A for loop with a zero step size would create an infinite loop
\par 
\par for i=0 to 0 step 0
\par    print i
\par next
\par 
\par The example code above will print a screen ful of zeroes.  To get out of an infinte loop, press the ESC key.\page }{\b\ul Example program}{:
\par }\pard \keep\nowidctlpar\widctlpar\adjustright {With the introduction of loops, our program becomes even simpler.  Now we don't have to declare the number of grades up front. It becomes a variable we get from the user at the start.
\par 
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {' chapter 8 example program
\par ' sum and average of n grades
\par ' grades are from 0-100
\par dim sum    'this variable will store the sum of the n grades
\par dim avg    'this variable will store the average of the n grades
\par dim n as int   ' the number of grades to average
\par 
\par print "How many grades?"
\par input n
\par dim grade[n]  ' an array of n grades
\par 
\par  ' ---INPUT ---
\par for i=0 to n-1                 'get the inputs
\par     print "Enter grade ", i   ' notice that we indent in loops
\par     input grade[i]                'get the grades from the student
\par next
\par 
\par '--- PROCESS ---
\par ' compute the sum and the average
\par for i=0 to n-1
\par     sum = sum + grade[i]   'notice we accumulate the sum
\par next
\par avg = sum/n
\par 
\par '--- OUTPUT ---
\par print "The average of your"
\par print n, " grades is", avg
\par 
\par print "Press <Enter> to continue"
\par dim tmp ' a temporary variable
\par input tmp 'wait for the user to press enter
\par 
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par 
\par {\*\bkmkstart _Toc509128880}{\*\bkmkstart _Toc509393604}{\*\bkmkstart _Toc509393655}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 9\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Conditionals : If \'85 Then \'85 Else \'85 End If{\*\bkmkend _Toc509128880}{\*\bkmkend _Toc509393604}{\*\bkmkend _Toc509393655}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Another thing computers are good at is making unbiased decisions.  In CyBasic this is implemented with the If statement.  The If statement has a conditional followed by the Then command:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {if [conditional] then
\par   'statements
\par end if
\par 
\par if a < b then
\par     print "a is smaller"
\par end if
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par This conditional has a left side and a right side with a relational operator in between.  You can compare two variables, or two expressions.  There are 6 relational operations: 
\par \tab <\tab less than
\par \tab >\tab greater than
\par \tab <=\tab less than or equal to
\par \tab >=\tab greater than or equal to
\par \tab =\tab equal to
\par \tab <>\tab not equal to
\par 
\par For example:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {if a+1 < b*2 then
\par     'statements
\par end if
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {There is also an Else statement, which indicates what to do if the conditional is not met:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {if [conditional] then
\par     'statements
\par else
\par     'else statements
\par end if
\par }\pard \s17\nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \adjustright {
\par }\pard \s17\nowidctlpar\widctlpar\adjustright {
\par if a<b then
\par     print "a is smaller"
\par else
\par     print "b is smaller"
\par end if
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {If you inspect our last example closely \endash 
 you will see an error in the logic.  The error occurs when a is equal to b.  In this case our example will print "b is smaller" which is of course incorrect.  To correct this we have the Elseif statement.  It works
 just like the If statement and is executed only when the if part is false.
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {\page if [conditional] then
\par     'statement
\par elseif [conditional] then
\par     'elseif statements
\par else
\par     'else statements
\par }\pard \s17\nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \adjustright {endif
\par }\pard \s17\nowidctlpar\widctlpar\adjustright {
\par if a<b then
\par     print "a is smaller"
\par elseif b<a then
\par     print "b is smaller"
\par else
\par     print "a and b are equal"
\par end if
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {You may have as many Else if st
atements as you like, and you may have as many statements in the if/elseif/else clauses as you like.  Again. it is good practice to indent the statements to show which statements belong to which if/elseif/else clauses.
\par 
\par }{\b\ul Combining Conditionals
\par }{The result of
 the relational operators (<,>,<=,>=,=,<>) is either TRUE or FALSE.  This type of value is called Boolean (named for the mathematician George Boole).  Booleans  are either True or False (one or zero).  These types of results can be combined with the Boole
an operators AND and OR.
\par 
\par The And operator results in a TRUE value if BOTH of the inputs are TRUE (and results in a FALSE otherwise).  The Or operator results in a TRUE value if EITHER of the inputs are TRUE.  In CyBasic, a zero value is FALSE and any other
 value is considered TRUE.
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {if a<b and b<c then
\par     print "b is between a and c"
\par end if
\par 
\par if a>b or a>c then
\par     print "a is bigger than either b or c"
\par }\pard \s17\nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \adjustright {end if
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {a=1
\par b=0
\par if a and b then
\par     print "both a and b are true"
\par end if
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {if a or b then
\par     print "either a or b is true" 
\par end if
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul \page Example program}{:
\par Conditionals will allow us to assign a letter grade to the input grades and the average
\par 
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128881}{\*\bkmkstart _Toc509393605}{\*\bkmkstart _Toc509393656}' chapter 9 example program
\par ' sum and average of n grades
\par ' grades are from 0-100
\par dim sum    'this variable will store the sum of the n grades
\par dim avg    'this variable will store the average of the n grades
\par dim n as int   ' the number of grades to average
\par 
\par print "How many grades?"
\par input n
\par dim grade[n]  ' an array of n grades
\par 
\par  ' ---INPUT ---
\par for i=0 to n-1                 'get the inputs
\par     print "Enter grade ", i   ' notice that we indent in loops
\par     input grade[i]                'get the grades from the student
\par next
\par 
\par '--- PROCESS ---
\par ' compute the sum and the average
\par for i=0 to n-1
\par     if grade[i] >=94 then
\par    \tab print grade[i], "=A"
\par     elseif grade[i]>=86 then
\par \tab print grade[i],"=B"
\par     elseif grade[i]>=78 then
\par \tab print grade[i], "=C"
\par     elseif grade[i]>=70 then
\par \tab print grade[i], "=D"
\par     else
\par \tab print grade[i], "=F"
\par     end if
\par     sum = sum + grade[i]   'notice we accumulate the sum
\par next
\par avg = sum/n
\par 
\par '--- OUTPUT ---
\par print "The average of your", 
\par print n, " grades is ", avg
\par if avg >=94 then
\par    \tab print avg, "=A"
\par elseif avg>=86 then
\par print avg,"=B"
\par elseif avg>=78 then
\par \tab print avg, "=C"
\par elseif avg>=70 then
\par \tab print avg, "=D"
\par else
\par \tab print avg, "=F"
\par end if
\par 
\par print "Press <Enter> to continue"
\par dim tmp ' a temporary variable
\par input tmp 'wait for the user to press enter
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 10\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Functions & Subroutines
{\*\bkmkend _Toc509128881}{\*\bkmkend _Toc509393605}{\*\bkmkend _Toc509393656}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Yo
u may have noticed in the last example program that we had to create two sets of If/then/else/ statements to handle the conversion of a grade into a letter grade.  This duplication of code is a bad practice.  If there are several of these blocks of code, 
a
nd we find a bug in one of them, we have to update all of them.  For example, what if, in our example program, we decided that the grade cutoffs were 90, 80, 70, and 60?  We would have to make the modification in each of the two blocks of If statements.  
This could lead to extra work, or even errors in our program if we forget to make the same changes in both places.
\par 
\par Fortunately, CyBasic has a concept called a Subroutine.  In the old days, a program was called a routine.  A Subroutine therefore is a routine within a routine.  You can declare a subroutine with the word Sub:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Sub [routine-name][(parameters)]
\par    'statements
\par End Sub
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
The Parameters portion of the Subroutine is a list of variables (declared much in the same way as the Dim statement).  These variables are the inputs to the subroutine.  Once declared, a subroutine can be called (or invoked) with the Call statement
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {[Call] routine-name [(var as type, var as type, \'85)]
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par A subroutine is ended with the End Sub statement.  The keyword Call is optional.
\par 
\par Here is an example using our grade-averaging program:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Sub letterGrade(grade as int)
\par     if grade >=94 then
\par    \tab print grade, "=A"
\par     elseif grade>=86 then
\par }\pard \s17\fi720\nowidctlpar\widctlpar\adjustright {print grade,"=B"
\par }\pard \s17\nowidctlpar\widctlpar\adjustright {    elseif grade>=80 then
\par \tab print grade, "=C"
\par     elseif grade>=74 then
\par \tab print grade, "=D"
\par     else
\par \tab print grade, "=F"
\par     end if
\par End Sub
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Another way to solve this problem is with a Function.  A function is lik
e a subroutine, but it returns a value.  In our example a function could return the letter grade, given the numeric grade.  To return a value, you set the name of the function to the value, just like an assignment statement.
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Function letterGrade(grade as int) as char
\par     if grade >=94 then
\par    \tab letterGrade = 65
\par     elseif grade>=88 then
\par }\pard \s17\fi720\nowidctlpar\widctlpar\adjustright {letterGrade = 66
\par }\pard \s17\nowidctlpar\widctlpar\adjustright {    elseif grade>=80 then
\par \tab letterGrade = 67
\par     elseif grade>=74 then
\par \tab letterGrade = 68
\par     else
\par \tab letterGrade = 70
\par     end if
\par End Function
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\page }{\b\ul Example program}{:
\par Subroutines allow us to simplify our program by taking similar sections of code and condensing them into one subroutine.
\par 
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128882}{\*\bkmkstart _Toc509393606}{\*\bkmkstart _Toc509393657}' chapter 10 example program
\par ' sum and average of n grades
\par ' grades are from 0-100
\par 
\par Sub letterGrade(grade as double)
\par     if grade >=94 then
\par    \tab print grade, "=A"
\par     elseif grade>=86 then
\par print grade,"=B"
\par     elseif grade>=80 then
\par \tab print grade, "=C"
\par     elseif grade>=74 then
\par \tab print grade, "=D"
\par     else
\par \tab print grade, "=F"
\par     end if
\par End Sub
\par 
\par dim sum    'this variable will store the sum of the n grades
\par dim avg    'this variable will store the average of the n grades
\par dim n as int   ' the number of grades to average
\par 
\par print "How many grades?"
\par input n
\par dim grade[n]  ' an array of n grades
\par 
\par  ' ---INPUT ---
\par for i=0 to n-1                 'get the inputs
\par     print "Enter grade ", i   ' notice that we indent in loops
\par     input grade[i]                'get the grades from the student
\par next
\par 
\par '--- PROCESS ---
\par ' compute the sum and the average
\par for i=0 to n-1
\par     print "Grade ", i, ": ", grade[i]
\par     call letterGrade(grade[i])
\par     sum = sum + grade[i]   'notice we accumulate the sum
\par next
\par avg = sum/n
\par 
\par '--- OUTPUT ---
\par print "The average of your"
\par print n, " grades is ", avg
\par call letterGrade(avg)
\par 
\par print "Press <Enter> to continue"
\par dim tmp ' a temporary variable
\par input tmp 'wait for the user to press enter
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 11\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: File I/O{\*\bkmkend _Toc509128882}
{\*\bkmkend _Toc509393606}{\*\bkmkend _Toc509393657}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Files on the Cybiko are stored in the non-volatile memory.  They are like files on the
 PC in that they have filenames and they hold data.  They even have attributes (like file size), but these attributes are not accessible from CyBasic.
\par 
\par }{\b\ul Open a file
\par }{Before a file can be accessed, it must be opened.  In CyBasic, opening a file is accomplished with the Open command.  The Open command has three parts \endash  the pathname, the mode, and the filenumber.  The mode is optional.
\par 
\par }{\f6\fs16 open }{\i\f6\fs16 pathname}{\f6\fs16  [for }{\i\f6\fs16 mode}{\f6\fs16 ] as }{\i\f6\fs16 filenumber}{\f6\fs16 
\par 
\par }{The pathname is the name of the file.  This can be either a literal string ("filename.d
at") or a variable which has been Dim'd previously.  The mode is optional and is one of Read, Write, or Append.  If left blank, the mode defaults to Read.  When a file is opened for Read access the program may only read data from the file, no writing is p
e
rmitted.  Likewise, when a file is opened for Write, no data may be read from the file, only written.  If the file already exists, the data in the file is erased. When a file is opened for Append, it is opened for write, but if the file exists, instead of
 destroying the data, the file pointer is positioned at the end of the file and writing begins there.  Finally, the filenumber is a number from 0 to 65535.  It is used to identify the file for the rest of the program.
\par 
\par }{\f6\fs16 Dim fname[32] as char
\par 
\par print "Enter fname"
\par input fname
\par open fname for read as 1
\par }{
\par It is possible to open the same file for Read in more than one place in the program.  But for Write and Append modes you must first close the file before reopening it.
\par 
\par }{\b\ul Close a file
\par }{When you are done with a file, you must close it.  The Close command takes as its only parameter the filenumber\'85
\par 
\par }{\f6\fs16 open "filename.dat" as 1
\par  'do some stuff
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {close 1
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul Writing to a File : Put
\par }{The Put statement writes data from a variable to a file.  It has three parts: filenumber, bytepos, and variable
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Put filenumber, [bytepos][, variable]
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par The Put command keeps the concept of the file position.  Each time data is written to the file the file 
position is incremented by the size of the variable in bytes.  In this way, you can accurately control the data being written to the file.  The first byte in the file is byte 0, the next is byte 1, etc\'85
\par 
\par }{\f6\fs16 dim foo as int
\par open "filename.dat" for write as 1
\par put 1, 0, foo  ' write two bytes at the beginning of the file
\par put 1, 100, foo ' write the same bytes at the 100}{\f6\fs16\super th}{\f6\fs16  byte of the file
\par }{
\par Leaving out the variable name positions the file pointer, but does not write
\par 
\par }{\f6\fs16 dim foo as int
\par open "filename.dat" for write as 1
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {put 1, 0  ' position file pointer to the beginning of the file
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par To write to the current file pointer position without specifying the value, leave out the bytepos (but remember to include the delimiting commas).  Unfortunately string variables and other a
rrays cannot be written with the Put command.  You must create a loop and write each element individually.
\par 
\par }{\f6\fs16 dim a as double
\par open "filename.dat for write as 1
\par input a
\par put 1,,a ' write 8 bytes to the current location
\par }{
\par There is a limit of 23KB to the file size.  Writing more than that causes an error.
\par 
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Reading from a file : Get
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The Get statement reads data from a file into a variable.  It has three parts: filenumber, bytepos, and variable
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Get filenumber, [bytepos][, variable]
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par The Get command keeps the concept of the file position.  Each time data is read from the file the file position is incremented by the size of the variable in bytes.  In this way, you can accurately control the data being read from the file.  The first byt
e in the file is byte 0, the next is byte 1, etc\'85
\par 
\par }{\f6\fs16 dim foo as int
\par open "filename.dat" for read as 1
\par get 1, 0, foo  ' read two bytes from the beginning of the file
\par get 1, 100, foo ' read two different bytes from the 100}{\f6\fs16\super th}{\f6\fs16  byte of the file
\par }{
\par Leaving out the variable name positions the file pointer, but does not read
\par 
\par }{\f6\fs16 dim foo as int
\par open "filename.dat" for read as 1
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {get 1, 0  ' position file pointer to the beginning of the file
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par To read from the current file pointer position without specifying the value, leave out the bytepos (but remember to include the delimiting commas).
\par 
\par }{\f6\fs16 dim a as double
\par open "filename.dat for read as 1
\par get 1,,a ' read 8 bytes from the current location
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {print a
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Printing to the file : Print #
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Printing to a file is possible with the print statement, which you are already familiar with.  Just add a "#n" where n is the filenumber.  This is an easy way to create text files.  }{\i 
Strangely, there is no corresponding Input # command for reading data.}{
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {dim a[10] as char
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16 input "your name", a
\par open "filename.txt" for write as 1
\par print #1, a
\par close 1
\par }{
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par {\*\bkmkstart _Toc509128883}{\*\bkmkstart _Toc509393607}{\*\bkmkstart _Toc509393658}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 12\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Graphics{\*\bkmkend _Toc509128883}{\*\bkmkend _Toc509393607}{\*\bkmkend _Toc509393658}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The Cybiko is a very capable graphics machine.  However CyBasic has only 5 graphic commands with wh
ich to draw on the screen.  This limits what you will be able to do with CyBasic.  There are no bit-map graphics commands so a SkateBoard type game is not possible.
\par 
\par }{\b\ul Cls \endash  Clear screen
\par }{Cls stands for Clear Screen.  It will turn all pixels on the display to the background color (usually white).  It will also erase all text on the screen.  Cls takes no parameters
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Cls
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul Paper \endash  set the color of the background
\par }{CyBasic has a concept of a foreground color and a background color.  The background color is set with the Paper command.  Whenever you do a Cls \endash 
 the entire display is set to the color defined by the Paper command.  There are 4 colors to chose from.  Color 0 is white.  Color 1 is light grey.  Color 2 is dark grey.  Color 3 is black.
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Paper 3 ' set the background color to black
\par Cls ' color the screen with the background color
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul Ink \endash  set the color of the foreground
\par }{CyBasic's foreground color is used to draw text (Print) and lines (Line).
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Paper 0 ' set the background to White
\par Ink 3 ' set the foreground to black
\par Cls ' clear the background
\par line -80, -50, 80, 50 ' draw a diagonal line
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul Point \endash  draw a single pixel on the screen
\par }{Draw a single pixel at the x/y coordinates (see Line, below).
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Paper 0 ' set the background to White
\par Ink 3 ' set the foreground to black
\par Cls ' clear the background
\par Point 0, 0 ' draw a dot in the center
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }{\b\ul Line \endash  draw a line on the screen
\par }{The CyBasic display area is an X/Y coordinate system.  You place a dot on the screen by telling CyBasic to position the cursor at a horizontal (X) coordinate and a vertical (Y) coordinate.  The valid values for the screen coordinates are \endash 
80 to 79 in the X direction, and \endash 43 to 43 in the Y direction.  You may specify values as large as +/- 20,000 in either direction, but only the pixels, which are in the screen coordinates (-80 to 79 and \endash 43 to 43), will be displayed.
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Paper 0 ' set the background to White
\par Ink 3 ' set the foreground to black
\par Cls ' clear the background
\par line -80, -50, 80, 50 ' draw a diagonal line
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\page }{\b\ul Example Program
\par }{This program is like the old Microsoft Windows screen saver.  A set of bouncing lines chase after each other.
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128884}{\*\bkmkstart _Toc509393608}{\*\bkmkstart _Toc509393659}'chapter 12
\par 'qix line drawing
\par 'requires CyBasic-2
\par 'see below for CyBasic-1
\par 
\par dim n as int
\par print "Number of lines"
\par input n
\par 
\par dim n1 as int
\par dim n2 as int
\par n1=n-1
\par n2=n1-1
\par 
\par dim x0[n] as int
\par dim y0[n] as int
\par dim x1[n] as int
\par dim y1[n] as int
\par dim dx0 as int
\par dim dy0 as int
\par dim dx1 as int
\par dim dy1 as int
\par dim seed as int
\par 
\par sub newdirection(j as int)
\par   if (x0[j] < -80 or x0[j] > 80) then
\par     dx0 = -dx0
\par   end if
\par   if (x1[j] < -80 or x1[j] > 80) then
\par     dx1 = -dx1
\par   end if
\par   if (y0[j] < -43 or y0[j] > 43) then
\par     dy0 = -dy0
\par   end if
\par   if (y1[j] < -80 or y1[j] > 80) then
\par     dy1 = -dy1
\par   end if
\par end sub
\par 
\par ' for cybasic1 do the following
\par ' dx0=-3
\par ' dx1=-1
\par ' dy0=1
\par ' dy1=2
\par 'and remove the while loops...
\par 
\par ' select random motion offsets
\par while dx0=0
\par   dx0 = 4-rnd(9)
\par wend
\par while dx1=0
\par   dx1 = 4-rnd(9)
\par wend
\par while dy0=0
\par   dy0 = 4-rnd(9)
\par wend
\par while dy1=0
\par   dy1 = 4-rnd(9)
\par wend
\par 
\par 'select initial random line
\par x0[0] = rnd(80)
\par x1[0] = rnd(80)
\par y0[0] = rnd(43)
\par y1[0] = rnd(43)
\par line x0[0], y0[0], x1[0], y1[0]
\par 
\par cls
\par 
\par 'fill up queue with trailing lines and print them
\par for i=1 to n-1
\par   x0[i] = x0[i-1] + dx0
\par   x1[i] = x0[i-1] + dx1
\par   y0[i] = y0[i-1] + dy0
\par   y1[i] = y1[i-1] + dy1
\par   line x0[i], y0[i], x1[i], y1[i]
\par   newdirection(i)
\par next
\par 
\par for i=0 to 1 step 0
\par   ink 0
\par   line x0[0], y0[0], x1[0], y1[0]
\par   ink 3
\par   for j=1 to n-1 
\par     x0[j-1] = x0[j]
\par     x1[j-1] = x1[j]
\par     y0[j-1] = y0[j]
\par     y1[j-1] = y1[j]
\par   next
\par   x0[n1] = x0[n2] + dx0
\par   y0[n1] = y0[n2] + dy0
\par   x1[n1] = x1[n2] + dx1
\par   y1[n1] = y1[n2] + dy1
\par   line x0[n1], y0[n1], x1[n1], y1[n1]
\par   newdirection(n1)
\par next
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 13\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Math Functions
{\*\bkmkend _Toc509128884}{\*\bkmkend _Toc509393608}{\*\bkmkend _Toc509393659}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
The Cybiko has a host of math functions.  The ordinary functions exist (+, -, *, /) with which you can do math calculations.  The Order of Operations applies (multiplication and division first, then addition and subtraction) and parentheses are used to ch
ange the order of operations. (a=(a+b)*c).
\par 
\par When doing calculations all values are upgraded to Double variables and calculations are performed.  When assigning values to integer variables the results are rounded up.  This conversion to Double occurs even when all variables involved are integers.

\par 
\par }{\f6\fs16 dim a as int
\par a = 5 + 0.7
\par print "the answer is ", a
\par > the answer is 6
\par }\pard \nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \adjustright {
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\f6\fs16 dim a as int
\par dim b as double
\par dim c as double
\par a = 5
\par b = 0.5
\par c = a*b  ' a is converted to 5.0 before the computation takes place
\par print "the answer is ", c
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {> the answer is 2.5
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par There is a complete set of trigonometric functions:
\par }\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx2120\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx3095\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 
\clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx4103\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx5090\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx6242\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 Description\cell sine\cell cosine
\cell tangent\cell cotangent\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 \row }\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 
\trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2120\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx3095\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4103\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx5090\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx6242\pard \nowidctlpar\widctlpar\intbl\adjustright {trig functions in radians\cell sin(x)\cell cos(x)\cell tan(x)\cell \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {arc functions\cell asin(x)\cell acos(x)\cell atan(x)\cell actan(x)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {hyperbolic \cell sinh(x)\cell cosh(x)\cell tanh(x)\cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 
\trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2120\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx3095\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4103\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb 
\cellx5090\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx6242\pard \nowidctlpar\widctlpar\intbl\adjustright {arc-hyperbolic \cell asinh(x)\cell acosh(x)
\cell atanh(x)\cell actanh(x)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par And some other mathematical functions:
\par }\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx2849\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx4426\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 Description\cell function\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 \row 
}\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2849\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx4426\pard \nowidctlpar\widctlpar\intbl\adjustright {square root\cell sqrt(x)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {exponent\cell exp(x)\cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {natural logarithm\cell log(x)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {log base 10
\cell log10(x)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {log base 2\cell log2(x)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
x to the yth power\cell pow(x,y) \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {yth root of x\cell sqr_pow(x,y)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd 
\trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 
\clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2849\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 
\cltxlrtb \cellx4426\pard\plain \s19\sb120\nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {random number between 0 and x\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {rnd(x)*
\par * cybasic2 only\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par \page }{\b\ul Example Program}{:
\par 
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128885}{\*\bkmkstart _Toc509393609}{\*\bkmkstart _Toc509393660}'Circle
\par 'try radius=20
\par 'and sides=15
\par 
\par dim x0 as int     'start x
\par dim y0 as int     'start y
\par dim x1 as int     'end x
\par dim y1 as int     'end y
\par dim r       'radius
\par dim angle   'angle to draw line
\par dim n as int
\par dim delta
\par 
\par print "Enter radius"
\par input r     'radius
\par print "Enter sides"
\par input n
\par cls         'clear screen
\par 
\par angle = 0
\par x0=sin(angle)*r  'start x
\par y0=cos(angle)*r  'start y
\par 
\par delta=6.28318/n
\par for i = 1 to n 
\par   angle = angle+delta  'second angle
\par   x1=sin(angle)*r  'end x
\par   y1=cos(angle)*r  'end y
\par   line x0, y0, x1, y1 'draw line
\par   x0=x1
\par   y0=y1
\par next 'next line
\par 
\par dim b
\par input b 'wait for the user to press <Enter>
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 14\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Miscellaneous{\*\bkmkend _Toc509128885
}{\*\bkmkend _Toc509393609}{\*\bkmkend _Toc509393660}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Beep
\par }{
CyBasic includes one command for making sound.  And the sounds you can create are exceedingly limited.  Rather than letting you change the frequency of the speaker, the Beep command merely gives you one of 7 different 'songs' to play.  They are numbered f
rom 0 to 7 and are as follows:
\par }\trowd \trqc\trgaph108\trrh232\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1979\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 Command\cell sound\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 \row }\trowd 
\trqc\trgaph108\trrh232\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr
\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1979\pard \nowidctlpar\widctlpar\intbl\adjustright {beep(0)\cell silence\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trqc\trgaph108\trrh233\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl
\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 
\clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1979\pard \nowidctlpar\widctlpar\intbl\adjustright {
beep(1)\cell -\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {beep(2)\cell -\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {beep(3)
\cell -\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {beep(4)\cell -\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {beep(5)\cell -
\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {beep(6)\cell -\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trqc\trgaph108\trrh233\trleft-108\trbrdrt
\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 
\clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1979\pard 
\nowidctlpar\widctlpar\intbl\adjustright {beep(7)\cell -\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par 
\par }{\b\ul Wait
\par }{There are 2 ways to create a delay in CyBasic.  One way is to write a For loop which does nothing:
\par 
\par }{\f6\fs16 for i=0 to 100
\par next i
\par }{
\par This is not recommended.  It is sloppy coding and will be unpredictable in the event that Cybiko, Inc releases a newer, faster Cybiko.  The alternative is the Wait command.  The parameter is a number of tenths of seconds to wait.  So, to wait one second:

\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {wait 10
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\b\ul Key
\par }{The Key command acts like a variable.  It is the value of the last key pressed on the keypad.  This is very useful for writing interactive games because it does not stop the action like the Input statement do
es.  Here is a table of all the values the Key variable can return.  To use the table, find the key you want to check against and add the values in the corresponding row and column.  For example, the letter 'a' is 90+7=97.
\par 
\par }\trowd \trqc\trgaph108\trleft-90\trhdr\trbrdrt\brdrs\brdrw15\brdrcf1 \trbrdrl\brdrs\brdrw15\brdrcf1 \trbrdrb\brdrs\brdrw15\brdrcf1 \trbrdrr\brdrs\brdrw15\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx819\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx1502\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 
\clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx2307\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx3112\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx3917\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx4722\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 
\clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx5527\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx6332\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx7137\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx7942\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 
\clcfpat1\clcbpat8\clshdng10000\cltxlrtb \cellx8747\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\b Key Values\cell }\pard \qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {\b 0\cell 1\cell 2\cell 3\cell 4\cell 5\cell 6\cell 7\cell 8\cell 9\cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row }\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf1 \trbrdrl\brdrs\brdrw15\brdrcf1 \trbrdrb\brdrs\brdrw15\brdrcf1 \trbrdrr\brdrs\brdrw15\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv
\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx810\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 
\clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1502\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx2307\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx3112\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr
\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx3917\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx4722\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl
\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx5527\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb 
\cellx6332\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7137\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7942\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx8747\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {30\cell \cell space\cell \cell \cell \cell \cell \cell \cell \cell quote\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {40\cell }\pard\plain 
\s19\qc\nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\cell }\pard\plain \qc\nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\cell \cell \cell comma\cell dash\cell period\cell /\cell 0\cell 1\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {50\cell 2\cell 3\cell 4\cell 5\cell 6\cell 7\cell 8\cell 9\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\cell semi-colon\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {60\cell \cell =\cell \cell \cell \cell \cell \cell \cell \cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {90\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\cell }\pard \qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {(\cell \\\cell )\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\cell 
\cell back- quote\cell }\pard \qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {a\cell b\cell c\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {100\cell d\cell e\cell f\cell g\cell h\cell i
\cell j\cell k\cell l\cell m\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {110\cell n\cell o\cell p\cell q\cell r\cell s\cell t\cell u\cell v\cell w\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {120\cell x\cell y\cell z\cell \cell \cell \cell \cell \cell \cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {260\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\cell \cell \cell \cell }{\lang1024 left-arrow}{\cell }{\lang1024 up-arrow}{\cell }{\lang1024 right-arrow}{\cell down-arrow\cell }\pard 
\qc\sb120\nowidctlpar\widctlpar\intbl\adjustright {ins\cell del\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trqc\trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf1 \trbrdrl\brdrs\brdrw15\brdrcf1 \trbrdrb\brdrs\brdrw15\brdrcf1 
\trbrdrr\brdrs\brdrw15\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx810
\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1502\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx2307\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx3112\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx3917\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr
\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx4722\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx5527\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl
\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx6332\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb 
\cellx7137\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7942\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx8747\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {270\cell tab\cell select\cell enter\cell bspc\cell \cell shift\cell fn\cell \cell \cell \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b\ul Example Program
\par }{Here is an example of a program that moves a dot left or right:
\par 
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128886}{\*\bkmkstart _Toc509393610}{\*\bkmkstart _Toc509393661}dim x as int    'horizontal component of the dot
\par dim y as int    'vertical component of the dot
\par dim z as int  'the key pressed
\par x=0    'initial x position of the dot
\par y=0    'initial y position of the dot
\par cls     'clear screen
\par point x,y  'show the dot
\par for i=0 to 1 step 0  'loop forever
\par z = key              'save off the key because it changes
\par   if z = 264 then    'left key
\par     ink 0
\par     point x,y
\par     ink 3
\par     x=x-1            'move left
\par     point x,y        'print new dot
\par   elseif z = 266 then' right key
\par     ink 0
\par     point x,y
\par     ink 3
\par     x=x+1            ' move right
\par     point x,y        ' print new dot
\par   end if
\par next 'end of forever loop
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 15\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: CyBasic-2{\*\bkmkend _Toc509128886}
{\*\bkmkend _Toc509393610}{\*\bkmkend _Toc509393661}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {CyBasic-2 was introduced in February of 2001.  It contains 8 features not found in CyBasic-1:
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {Types \endash  u
ser-defined data types
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {While \endash 
 a new way to define loops
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {Printxy \endash 
 print on the display at point x,y
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {Mid \endash 
 extract from the middle of a string
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {Right \endash 
 extract from the right-hand side of a string
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {rnd() \endash 
 a random number generator
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {eof \endash 
 end of file function for file I/O
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls4\adjustright {input string prompts
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par CyBasic-2 requires the external 1MB card.  This is not explained in the Cybiko, Inc. online documentation.  It is presumed that CyBasic-2 requires the additional RAM (256KB) that is provided by the external memory.
\par 
\par When Cybiko, Inc. added CyBasic-2, they inadvertently removed CyBasic-1 from their website.  This caused some confusion among Cybiko users.  A later release of the CyberLoad application resolved that oversight.
\par 
\par The rest of this tutorial is based on the CyBasic-2 product.
\par {\*\bkmkstart _Toc509128887}{\*\bkmkstart _Toc509393611}{\*\bkmkstart _Toc509393662}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 16\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Debugging{\*\bkmkend _Toc509128887}{\*\bkmkend _Toc509393611}{\*\bkmkend _Toc509393662}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {When a programmer creates an error in their program, it is called a 'bug'.  The origin of the word 'bug' goes back to 
the early days of computer science when computers had actual mechanical relays inside.  Grace Hopper, considered by some to be the mother of computer programming and the originator of the COBOL programming language (1956), noticed that her Mark II compute
r
 had inexplicably stopped working.  She discovered a moth in the contacts of a relay inside the Mark II computer.  She taped this moth into her logbook with a note that said "Relay #70 Panel F (moth) found.  First actual case of bug being found."  Today, 
we call the removal of errors from our programs "Debugging."
\par 
\par }{\field{\*\fldinst { HYPERLINK http://www.csn.naples.fl.us/csn/comp-sci-proj/comp-tech-proj-1997-12/97f%20Grace%20Hopper-Nikki%20Trevor/graceprogram.html }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000007b00000068007400740070003a002f002f007700770077002e00630073006e002e006e00610070006c00650073002e0066006c002e00750073002f00630073006e002f0063006f006d0070002d007300630069002d00700072006f006a002f0063006f006d00
70002d0074006500630068002d00700072006f006a002d0031003900390037002d00310032002f003900370066002500320030004700720061006300650025003200300048006f0070007000650072002d004e0069006b006b00690025003200300054007200650076006f0072002f0067007200610063006500700072006f
006700720061006d002e00680074006d006c000000e0c9ea79f9bace118c8200aa004ba90bea00000068007400740070003a002f002f007700770077002e00630073006e002e006e00610070006c00650073002e0066006c002e00750073002f00630073006e002f0063006f006d0070002d007300630069002d0070007200
6f006a002f0063006f006d0070002d0074006500630068002d00700072006f006a002d0031003900390037002d00310032002f00390037006600200047007200610063006500200048006f0070007000650072002d004e0069006b006b006900200054007200650076006f0072002f0067007200610063006500700072006f
006700720061006d002e00680074006d006c00000000}}}{\fldrslt {\cs15\ul\cf2 http://www.csn.naples.fl.us/csn/comp-sci-proj/co{\*\bkmkstart _Hlt507920653}m{\*\bkmkend _Hlt507920653}p-tech-proj-1997-12/97f%2{\*\bkmkstart _Hlt509460608}0{\*\bkmkend _Hlt509460608}
Grace%20Hopper-Nikki%20Trevor/graceprogram.html}}}{
\par 
\par CyBasic-1 and CyBasic-2 are equipped with tools for debugging your programs.  To access the Action Menu in CyBasic, press the FN key and t
hen the Enter key.  (From now on, pressing the FN key followed by another key will be shown as FN-Keyname.  For Example FN-Enter.)  When you press FN-Enter, the Action Menu will display the following choices:
\par 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls5\adjustright {Run (FN-R)
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls5\adjustright {Step (FN-S)
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls5\adjustright {Go To (FN-G)
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls5\adjustright {Show (FN-H)
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls5\adjustright {
Watch (FN-W)  *Cybasic-2 Only
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\ul 
\par Run (FN-R)
\par }{Selecting the Run Action will execute the program from the last executed statement.  Usually, this will be the first statement in the program.  But if you single-step (as we will soon see) Run will pick up from where you left off last.
\par 
\par A program will run until one of the following occurs:
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls6\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls6\adjustright {
The program ends successfully
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls6\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls6\adjustright {
A syntax (typing) error is encountered
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls6\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls6\adjustright {
An Input statement is encountered (waits for the user to enter a value, then continues)
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls6\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls6\adjustright {
The Escape key is pressed (halting the program in place)
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par In the last case (Escape key)  you may start single stepping through your program, one statement at a time.  This is useful for determining where exactly something has gone wrong.
\par 
\par }{\b\ul Step (FN-S)}{
\par Step executes the next unexecuted operator.  Use this after the Run command has been interrupted with the Escape key.  If this is the first execution of the program, the 
first line of the program is marked for interpretation, and the second Step will execute the first line of the program.  Step will step into Functions and Subroutines as well.
\par 
\par }{\b\ul Go to (FN-G)
\par }{Go to will execute all unexecuted lines up to the point where the cursor is positioned.
\par 
\par }\pard \keep\keepn\nowidctlpar\widctlpar\adjustright {\b\ul Show (FN-H)
\par }{Shows the result of the program \endash  the last displayed values on the CyBasic Screen.  Normally when the program ends, it displays the program text editor.  This is not good if you have just created a beautiful graphic.  Usi
ng the Show Action will display the last screen.
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par }\pard \keep\keepn\nowidctlpar\widctlpar\adjustright {\b\ul Watch (FN-W)
\par }{Watch will allow you to calculate the value of any expression during a program's execution.  This is particularly useful for displaying the value of a variable.  For example, you could enter 'a' as the expression and the value of 'a' will be displayed.

\par {\*\bkmkstart _Toc509128888}{\*\bkmkstart _Toc509393612}{\*\bkmkstart _Toc509393663}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 17\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: While{\*\bkmkend _Toc509128888}{\*\bkmkend _Toc509393612}{\*\bkmkend _Toc509393663}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The While command is a new type of looping command.  Like the For command, While executes until a condition is met.  Here is the form of the While command:
\par 
\par }{\f6\fs16 while [conditional]
\par   'things to do
\par }\pard \nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \adjustright {\f6\fs16 wend
\par }\pard \nowidctlpar\widctlpar\adjustright {\f6\fs16 
\par dim a as int
\par a=1
\par while a<10
\par    print "a=", a
\par    a=a+1
\par wend
\par }{
\par The Wend command ends a while loop.
\par 
\par }{\b\ul Example Program
\par }{This example program plays "Hi/Low" \endash  a number game where the user has to guess the computer's random number
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128889}{\*\bkmkstart _Toc509393613}{\*\bkmkstart _Toc509393664}'Hi Low Number Guesser
\par 'Cybasic-2 Required
\par 
\par dim guess as int
\par dim tries as int
\par dim number as int
\par 
\par tries=0
\par number = rnd(100)+1
\par while(guess <> number)
\par     print "enter your guess"
\par     input guess
\par     if guess < number then
\par         print guess, " is too low"
\par         tries=tries+1
\par     elseif guess > number then
\par         print guess, " is too high"
\par         tries=tries+1
\par     end if
\par wend  
\par print "You guessed it."
\par print "The number was ", number
\par print "It took you ", tries, " tries"
\par dim a
\par input a
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 18\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Types{\*\bkmkend _Toc509128889}
{\*\bkmkend _Toc509393613}{\*\bkmkend _Toc509393664}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Types allow you to group variables together into a single variable.  You actually create a
 datatype of your own.  Instead of Int or Double, you can use "Mytype".  This is similar to "struct" in C and "record" in Pascal and COBOL languages.  Frankly, in CyBasic-2 there is little useful one can do with Types.  You cannot print them.  You cannot 
s
ave them to a file.  You cannot even dimension them as arrays or assign a variable of a type to another type(*double-check this claim*). Generally all types do is allow you to group your variables together.  If you want to print a type or save it, you hav
e to operate on the elements of the type.
\par 
\par In this example, we declare a type "mytype" which has 2 elements \endash  number that is an integer
\par }{\f6\fs16 type mytype
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16   number as int
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16   character as char
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {end type
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16 
\par }{You declare a variable of a type just as you do another type.
\par 
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16 dim a as mytype
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par To access the items within your variable you use 'dot' notation\'85
\par 
\par }{\f6\fs16 a.number = 10
\par a.character = 48
\par }{
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {To print a type, you have to print the elements of the type.  To read or write a type of the type you have to read or write the elements of the type.
\par 
\par }{\f6\fs16 print "number=", a.number, " character= ", a.character
\par put 1,,a.number
\par get 2,,a.number
\par }{
\par Types can be useful in mathematics.  There is a numerical quantity called an imaginary number.  It has a "real" part and an "imaginary" part.  Imaginary numbers come from the notion of taking the square root of minus one.  The square root of minus one is 
called "i".  The real part is the type of number you are used to dealing with, the imaginary part is a real number times "i".  Further discussion of imaginary numbers is outside the scope of this tutorial.
\par 
\par }{\f6\fs16 type imaginary
\par   real as double
\par   imaginary as double
\par end type
\par {\*\bkmkstart _Toc509128890}{\*\bkmkstart _Toc509393614}{\*\bkmkstart _Toc509393665}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 19\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Exit Function / Exit Subroutine{\*\bkmkend _Toc509128890}{\*\bkmkend _Toc509393614}{\*\bkmkend _Toc509393665}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Normally when you write a function or subroutine, you want to continue running the routine until it ends \endash  at the End Fu
nction statement.  This is not always true.  There are times when you want to exit early.  For those occasions, you need the Exit Function or Exit Subroutine statements.
\par 
\par Suppose, as in the example below, that you are trying to find a value in a sorted arr
ay of numbers.  It is inefficient to search every element of the list.  Instead we will search only those elements up to the one we find, then return the index into the array.  First let\rquote s look at the inefficient method:
\par 
\par }{\b\ul Example Program
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {'ch 19a
\par dim a[6] as int
\par dim number as int
\par a[0]=2  'our sorted data
\par a[1]=5
\par a[2]=7
\par a[3]=12
\par a[4]=19
\par a[5]=31
\par 
\par Function find(b as int)
\par   find = -1 'if we don\rquote t find the value return -1
\par   for i=0 to 5 
\par     if a[i] = b then
\par \tab find = i
\par     end if
\par   next
\par end function
\par 
\par input "enter your number ", number
\par print "your number is in slot", find (number)
\par 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par \page Function find uses a inefficient algorithm because it searches through all the values of the list even when it found the value in question.  It would be faster to stop searching once a value is found.  In fact, it doesn\rquote 
t even make sense to continue searching if the current value in the list is greater than the one you're trying to find.
\par 
\par }{\b\ul Example Program
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {'ch19b
\par dim a[6] as int
\par dim number as int
\par a[0]=2  'our sorted data
\par a[1]=5
\par a[2]=7
\par a[3]=12
\par a[4]=19
\par a[5]=31
\par 
\par Function find(b as int)
\par   find = -1 'if we don\rquote t find the value return -1
\par   for i=0 to 5 
\par     if a[i] = b then
\par       find = i
\par       Exit Function 'we found our value, lets get out
\par     elseif a[i] > b then
\par       Exit Function 'we are past the greatest value that we can find
\par     end if
\par   next
\par end function
\par 
\par input "enter your number ", number
\par print "your number is in slot ", find (number)
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16 
\par Notice the same is true of Subroutines.  The Exit Subroutine allows you to exit immediately.
\par 
\par input "enter your number", number
\par print "your number is in slot", find (number)
\par }{
\par {\*\bkmkstart _Toc509128891}{\*\bkmkstart _Toc509393615}{\*\bkmkstart _Toc509393666}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 20\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Passing Variables by Reference and by Value{\*\bkmkend _Toc509128891}{\*\bkmkend _Toc509393615}{\*\bkmkend _Toc509393666}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Subroutines return
 no value.  So, if you need a subroutine to compute a value and return it to you, you would use a Function.  However, Functions can return only one value.  What if you need a function to return two or more values?  This is where passing variables by refer
e
nce comes into play.  By default, when you call a function or subroutine only the value of the variable is passed in.  It is impossible to modify the value of the variable when it is passed into the function.  But when a variable is passed by value, you g
et the original value of the variable, and the ability to change the value on return.  This is a powerful feature.
\par 
\par To define a variable as being passed by reference, you prepend the ByRef keyword to the variable declaration.  To show that it is passed by v
alue, you prepend the ByVal keyword (default) to the variable.  Here is a sample function declaration with both a ByRef and a ByVal keyword:
\par 
\par }{\f6\fs16 Subroutine foobar(ByVal a, ByRef b)
\par :
\par End Subroutine
\par }{
\par For our example, let's assume that you have two lists.  The 
first list has an array of student ID numbers, and the second list has the student's grade point average.  You want to make a function that will return the student id with the highest GPA and the GPA itself.  The lists are unordered.  The GPA is from 0-4 
with 4.0 being an 'A'.  Notice that in this case (unlike in the last chapter) the lists are unordered so we must make an exhaustive search of the list.  Also, the function returns the index into the array where the student's high grade was found.
\par 
\par }{\b\ul \page Example Program
\par }{\b\f6\fs16\ul 
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128892}{\*\bkmkstart _Toc509393616}{\*\bkmkstart _Toc509393667}'ch20
\par dim id[6]
\par dim grade[6]
\par 
\par id[0] = 95873
\par grade[0] = 3.5
\par 
\par id[1] = 18193
\par grade[1] = 2.4
\par 
\par id[2] = 44828
\par grade[2] = 1.5
\par 
\par id[3] = 17395
\par grade[3] = 3.9
\par 
\par id[4] = 98274
\par grade[4] = 2.8
\par 
\par id[5] = 38572
\par grade[5] = 3.0
\par 
\par Function findhigh(ByRef higrade, ByRef hiid)
\par     higrade=0
\par     hiid=0
\par     findhigh = -1
\par     for i=0 to 5
\par       'print higrade, grade[i]
\par       if grade[i] > higrade then
\par         higrade = grade[i]
\par         hiid = id[i]
\par         findhigh = i
\par       end if
\par     next
\par end function
\par 
\par dim n as int
\par dim idno
\par dim gpa
\par 
\par n = findhigh(gpa, idno)
\par print "Student #",n
\par print "Student ID=",idno
\par print "Student GPA=", gpa
\par 
\par dim a
\par input a
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 21\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Printxy{\*\bkmkend _Toc509128892}
{\*\bkmkend _Toc509393616}{\*\bkmkend _Toc509393667}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {Printxy is like a combination of the Point function and the Print function.  Printxy allows you to position text anywhere on the Cybiko screen.  The format of the Printxy command is:
\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {printxy x,y, value, value, value
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16 
\par }{The text string is composed of the values of the variables after the Y
 coordinate.  The text string is printed at the coordinates X, Y.  The text will be painted with the X/Y coordinate in the upper left corner of the text.  The values can be any collection of comma-separated variables or literals \endash 
 just as in Print.  
\par 
\par Our Example Program will print your name on the display and bounce it off the edges of the screen.  Try using shorter names and see how the performance improves.
\par 
\par }{\b\ul Example Program
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {{\*\bkmkstart _Toc509128893}{\*\bkmkstart _Toc509393617}{\*\bkmkstart _Toc509393668}'ch21
\par dim name[32] as char'your name
\par dim x as int        'x coordinate of your name
\par dim y as int        'y coordinate of your name
\par dim dx as int      'direction the name moves in x coord
\par dim dy as int      'direction the name moves in y coord
\par input "Enter your name ", name
\par x = 80-rnd(160)  'random x starting point
\par y = 43-rnd(86)     'random y starting point
\par dx = -1  ' moving to the left
\par dy = -1  'moving up
\par while 1  'do forever or until ESC is pressed
\par     cls                          'clear the screen
\par     printxy x,y, name   'print the name onscreen
\par     x=x+dx   'move x dir
\par     y=y+dy   'move y dir
\par     if x>80 then
\par       dx=-dx    ' bounce off right side
\par     end if
\par     if x<-80 then
\par       dx=-dx   ' bounce off left side
\par     end if
\par     if y>30 then
\par       dy=-dy   'bounce off bottom
\par     end if
\par     if y<-43 then
\par       dy=-dy  'bounce off top
\par     end if
\par wend
\par {\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 22\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: String Manipulation (Right/Mid)
{\*\bkmkend _Toc509128893}{\*\bkmkend _Toc509393617}{\*\bkmkend _Toc509393668}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The CyBasic language offers no way to assign one string to another:
\par 
\par }{\f6\fs16 dim a[32] as char
\par dim b[32] as char
\par :
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\strike\f6\fs16 a = b  'illegal operation
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par Instead there are 2 statements for copying strings.  These are the Mid statement (used for copying the middle of one string to another) and the Right statement (used for copying the right side of a string).  The Mid and Right statements takes the form:

\par 
\par }\pard\plain \s17\nowidctlpar\widctlpar\adjustright \f6\fs16\cgrid {Mid destination, source, start [, length]   'the length is optional
\par Right destination, source, length
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s19\nowidctlpar\widctlpar\adjustright \fs20\cgrid {For the Mid statement, the 'destination' is a dimensioned string where the result will be stored.  The contents of the original 
string will be discarded.  The 'source' is a dimensioned string which holds data to be copied to the destination.  The 'start' is a numerical value (variable, constant, or expression) indicating the first character from the 'source' to copy (remember, in 
CyBasic we count starting at zero).  The optional length indicates how many bytes to copy.  If the length is omitted, or if it is larger than the number of characters in the source array, the entire source array is copied.
\par 
\par The Right statement has similar p
arameters.  The destination is the dimensioned string to copy into, and the source is the string to copy from.  The length parameter is required and indicates how many letters from the RIGHT of the source string to copy into the destination.
\par 
\par In our example program we will learn to speak pig latin.  It is not perfect. Can you think of ways to improve it?
\par 
\par }{\b\ul Example Program
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {'ch 22
\par dim word[32] as char     ' the word to convert
\par dim ordway[32] as char ' the resultant word
\par dim len as int                 ' the length of ordway
\par 
\par input "enter your word ", word  'input
\par mid ordway, word, 1                 'copy the word but not the 1st char
\par 
\par len = 0
\par for i=0 to 31                              'get the ordway length so we can add 'ay'
\par     if ordway[i] = 0 and len = 0 then
\par     \tab len = i
\par     end if
\par next
\par 'print len
\par ordway[len] = word[0]    ' append the first letter of word to the end of ordway
\par ordway[len+1] = 97        ' append 'a'
\par ordway[len+2] = 121      ' append 'y'
\par ordway[len+3] = 0          ' null terminator, very important
\par 
\par print word, "=", ordway   ' print results
\par input word ' wait for Enter
\par {\*\bkmkstart _Toc509128894}{\*\bkmkstart _Toc509393618}{\*\bkmkstart _Toc509393669}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 23\tab}}\pard\plain 
\s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {: Role Playing Games{\*\bkmkend _Toc509128894}{\*\bkmkend _Toc509393618}{\*\bkmkend _Toc509393669}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {The programs that are the most fun 
to write are games.  Graphic games (like Super Mario Brothers) are complex programs requiring more computing power than is possible with CyBasic.  Other graphic games (like tic-tac-toe) are possible, but text-based games are more reasonable with CyBasic.

\par 
\par CyBasic is well suited to writing all-text role-playing games (RPGs).  A role-playing game is one where you act as a character in a world created by the computer.  You can interact with objects in that world and move from place to place.  I will present a
 simple role-playing game using a generic approach.  There are many ways to write RPGs, so you should experiment and find the one that makes most sense to you.
\par 
\par The first step in creating a RPG is deciding what your universe will be like.  Is your setting i
n outer space?  Or the deep sea?  What is your experience level? Are you an expert spy? Or a novice cowboy?  What is your goal in the adventure?  Are you trying to get to the end of a maze? Or are you attempting to collect all the Dragon Balls?  Regardles
s of the subject matter, a good RPG tells a story, and the more detailed your descriptions of the adventure, the more interested your user will be and the more exciting your game will be.
\par 
\par Once you have decided on a universe, make a map of the universe.  Ma
ke a box for each room and a line with an arrow showing how to go from one room to the next.  Keep it down to 5-10 rooms (CyBasic only allows 8000-byte programs remember).  Make a description for each room.  Make a list of objects and decide where in univ
erse these objects reside.  Make a description for each object.  Make a list of commands, like "north" to go north and "eat" to eat food.
\par 
\par The next step is a technical one.  How do you get your inputs from the user?  Will you list their options and have them input a number selecting what to do? Or will you have them input text strings and discover what commands work best.  
\par 
\par {\*\bkmkstart _Toc509128895}{\*\bkmkstart _Toc509393619}{\*\bkmkstart _Toc509393670}{\listtext\tab}}\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {The TARDIS Adventure{\*\bkmkend _Toc509128895}
{\*\bkmkend _Toc509393619}{\*\bkmkend _Toc509393670}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {This RPG is located in the TARDIS. 
 It stands for Time and Relative Dimensions in Space.  The RPG is based on the British TV Series "Dr. Who".  The TARDIS is "dimensionally transcendental" which simply means that it is larger on the inside than on the outside.  While the TARDIS is about th
e size of a telephone booth, it has many chambers inside.  The goal of our game will be to enter the TARDIS, find the sonic screwdriver, and exit.
\par 
\par In this game each room is a separate Function.  When you enter the room a description of the room is printed.
 When the function exits, it returns the number of the next room to go to.  This offers our program modularity.  Rather than a structured adventure that runs from the top of the program to the bottom, the user can wander from room to room and even get cau
ght in a trap between rooms.
\par  
\par There are several tricks in this program.  One trick is that the return value from each room is an integer describ
ing the next room to visit.  Using this method you can rewrite the adventure by changing descriptions and the return rooms.  Another trick is "parsing".  I create a variable with the value of the lettername of that variable.  (eg: a=97).  When I parse I c
heck each letter in the "verb" against the variable.  So, for "eat" I check verb[0]=e and verb[1]=a and verb[2]=t as well as verb[3]=0 (null terminator).  
\par 
\par }\pard \keep\keepn\pagebb\nowidctlpar\widctlpar\adjustright {I allow you to carry 2 objects (one in each hand).  And you can drop only 1 object in each room.  The only commands are :
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx2679\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 
\clcfpat9\clcbpat8\clshdng10000\cltxlrtb \cellx8280\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 Command\cell Meaning\cell Description\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b\cf8 \row }\trowd \trgaph108\trleft-108
\trbrdrt\brdrs\brdrw15\brdrcf9 \trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl
\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb 
\cellx2679\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx8280\pard \nowidctlpar\widctlpar\intbl\adjustright {n\cell go north\cell \cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {e\cell go east\cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {s\cell go south\cell \cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {w\cell go west\cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {I\cell Inventory\cell 
Lists all the objects you are carrying\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {eat\cell eat something\cell increase your energy\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {take\cell take something\cell }\pard\plain \s19\nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {
move an object from right hand to left hand and pick up something in your right hand. do nothing if hands full\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\cgrid {\row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw15\brdrcf9 
\trbrdrl\brdrs\brdrw15\brdrcf9 \trbrdrb\brdrs\brdrw15\brdrcf9 \trbrdrr\brdrs\brdrw15\brdrcf9 \trbrdrh\brdrs\brdrw15\brdrcf9 \trbrdrv\brdrs\brdrw15\brdrcf9 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb
\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx1107\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx2679\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf9 \clbrdrl\brdrs\brdrw15\brdrcf9 \clbrdrb\brdrs\brdrw15\brdrcf9 \clbrdrr\brdrs\brdrw15\brdrcf9 \cltxlrtb \cellx8280\pard \nowidctlpar\widctlpar\intbl\adjustright {drop\cell drop something\cell 
drop something from your left hand move other object from right hand to left hand. cannot drop if room is full\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }\pard\plain \s33\nowidctlpar\widctlpar\adjustright \f2\fs20\cgrid {\page dim zz
\par dim sd as int
\par dim ky as int
\par dim sc as int
\par dim jb as int
\par dim st as int
\par 
\par sd=1
\par ky=2
\par sc=3
\par jb=4
\par st=5
\par 
\par dim iv[2] as int
\par dim ir as int
\par dim drp[10] as int
\par dim vb[10] as char
\par dim nrg as int
\par dim cmd as int
\par 
\par dim dr as int
\par dim eat as int
\par dim tk as int
\par dim nh as int
\par dim sh as int
\par dim et as int
\par dim wt as int
\par dim inv as int
\par dr=1
\par eat=2
\par tk=3
\par nh=5
\par sh=6
\par et=7
\par wt=8
\par inv=9
\par 
\par dim ou as int
\par dim co as int
\par dim ad as int
\par dim va as int
\par dim cl as int
\par dim e1 as int
\par dim e2 as int
\par dim so as int
\par 
\par ou=0
\par co=1
\par ad=2
\par va=3
\par cl=4
\par e1=5
\par e2=6
\par so=7
\par 
\par sub descObject(obj as int)
\par if (obj = 1) then
\par  print "sonic screwdriver"
\par elseif (obj = 2) then
\par  print "golden key"
\par elseif (obj = 3) then
\par  print "very long scarf"
\par elseif (obj = 4) then
\par  print "delicious jelly babies"
\par elseif (obj = 5) then
\par  print "shining star"
\par else
\par  print "nothing"
\par end if
\par end sub
\par 
\par function parse(zz) as int
\par parse=0
\par if vb[0]=101 and vb[1]=97 and vb[2]=116 and vb[3]=0 then
\par  parse=eat
\par elseif vb[0]=116 and vb[1]=97 and vb[2]=107 and vb[3]=101 and vb[4]=0 then
\par  parse=tk
\par elseif vb[0]=100 and vb[1]=114 and vb[2]=111 and vb[3]=112 and vb[4]=0 then
\par  parse=dr
\par elseif vb[0]=105 then
\par  parse=inv
\par elseif vb[0]=104 then
\par  parse=help
\par elseif vb[0]=110 then
\par  parse=nh
\par elseif vb[0]=115 then
\par  parse=sh
\par elseif vb[0]=101 then
\par  parse=et
\par elseif vb[0]=119 then
\par  parse=wt
\par end if
\par end function
\par 
\par sub showinv(zz)
\par print "In your left hand"
\par descObject(iv[0])
\par print "In your right hand"
\par descObject(iv[1])
\par end sub
\par 
\par sub drItem(zz)
\par if drp[ir]=0 then
\par  drp[ir]=iv[0]
\par  iv[0]=iv[1]
\par  iv[1]=0
\par  print "You dropped"
\par  descObject(drp[ir])
\par else
\par  print "Cant drop object here"
\par end if
\par end sub
\par 
\par sub tkItem(zz)
\par if drp[ir]<>0 then
\par if iv[1]=0 then
\par  if iv[0]=0 then
\par   iv[0]=drp[ir]
\par   drp[ir]=0
\par   print "Took . . ."
\par   descObject(iv[0])
\par  elseif iv[1]=0 then
\par   iv[1]=drp[ir]
\par   drp[ir]=0
\par   print "Took . . ."
\par   descObject(iv[1])
\par  else
\par   print "Your hands are full"
\par  end if
\par end if
\par else
\par  print "There is nothing to take"
\par end if
\par end sub
\par 
\par sub die(zz)
\par print "you faint on the spot"
\par print "The light on"
\par print "top of the police box"
\par print "flashes and the TARDIS"
\par print "disappears from view"
\par print "The End."
\par beep 4
\par while 1
\par wend
\par end sub
\par 
\par sub eatFood(zz)
\par if iv[0]=jb then
\par  iv[0] = iv[1]
\par  iv[1] = 0
\par  nrg = nrg + 100
\par elseif iv[1]=jb then
\par  iv[1]=0
\par  nrg = nrg + 100
\par else
\par print "You have no food"
\par end if
\par end sub
\par 
\par function command(zz) as int
\par dim x as int
\par x=0
\par while x=0
\par  nrg = nrg - 1
\par  if nrg <= 0 then
\par   die(zz)
\par  end if
\par  print "Energy ", nrg
\par  input "command ", vb
\par  x=parse(zz)
\par  if x=0 then
\par   print "huh?"
\par  elseif x=dr then
\par   drItem(zz)
\par  elseif x=tk then
\par   tkItem(zz)
\par  elseif x=inv then
\par   showinv(zz)
\par  elseif x=eat then
\par   eatFood(zz)
\par  end if
\par wend
\par command = x
\par end function
\par 
\par function our(zz) as int
\par print "outside the TARDIS,"
\par print "a big blue police box"
\par print "doors e"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=et then 
\par   our=co
\par   exit function
\par  else
\par   print "nope"
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function cor(zz) as int
\par print "inside the TARDIS "
\par print "control room - larger"
\par print "inside than outside"
\par print "doors e & w"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=wt then 
\par   if drp[ir]=ky then
\par    cor = -1 ' game's over
\par    exit function
\par   else
\par    print "The door is locked"
\par    cmd=0
\par   end if
\par  elseif cmd=et then
\par   cor = ad
\par  else
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function adr(zz) as int
\par print "inside Adric's room."
\par print "Adric is the doctor's"
\par print "companion"
\par print "doors n, e, s, & w"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=nh then 
\par   adr=cl
\par  elseif cmd=et then
\par   adr=e1
\par  elseif cmd=sh then
\par   adr=va
\par  elseif cmd=wt then 
\par   adr=co
\par  elseif drp[ir]=st then
\par   drp[ir]=ky
\par   print "POOF"
\par   adr=ad
\par  else
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function var(zz) as int
\par print "a large room with"
\par print "vaulted ceilings. There"
\par print "is a peg on the wall."
\par print "doors n, e, s"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=nh then 
\par   var=ad
\par  elseif cmd=et then
\par   var=e2
\par  elseif cmd=sh then
\par   var=so
\par  elseif drp[ir]=sc then
\par   print "PING"
\par   drp[ir]=st
\par   var=va
\par  else
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function clr(zz) as int
\par print "a huge cloister bell"
\par print "is here in this room"
\par print "doors s"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=sh then 
\par   clr=ad
\par  else
\par   print "BONG"
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function e1r(zz) as int
\par print "there's an echo in here"
\par print "there's an echo in here"
\par print "doors n, e, s, & w"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=nh or cmd=wt then 
\par   e1r=e1
\par  elseif cmd=sh or cmd=et then
\par   e1r=e2
\par  else
\par   print vb
\par   print vb
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function e2r(zz) as int
\par print "there's an echo in here"
\par print "there's an echo in here"
\par print "doors n, e, s, & w"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=sh or cmd=wt or cmd=et then 
\par   e2r=e2
\par  elseif cmd=nh then
\par   e2r=ad
\par  else
\par   print vb
\par   print vb
\par   cmd=0
\par  end if
\par wend
\par end function
\par 
\par function sdr(zz) as int
\par print "this is an empty room."
\par print "doors n"
\par print "I see"
\par descObject(drp[ir])
\par while cmd=0
\par  cmd = command(zz)
\par  if cmd=nh then 
\par   sdr=e1
\par  elseif cmd=et then
\par   sdr=ad
\par  else
\par   print "hmm..."
\par  cmd=0
\par  end if
\par wend
\par end function
\par 
\par sub main(zz)
\par ir=0
\par while ir <> -1
\par  cmd=0
\par  if ir=ou then
\par   ir=our(zz)
\par  elseif ir=co then
\par   ir=cor(zz)
\par  elseif ir=ad then
\par   ir=adr(zz)
\par  elseif ir=va then 
\par   ir=var(zz)
\par  elseif ir=cl then
\par   ir=clr(zz)
\par  elseif ir=e1 then
\par   ir=e1r(zz)
\par  elseif ir=e2 then
\par   ir=e2r(zz)
\par  elseif ir=so then
\par   ir=sdr(zz)
\par  end if
\par  wait 20
\par wend
\par cls
\par if iv[0]=sd or iv[1]=sd then
\par cls
\par beep 7
\par print "Congratulations"
\par print "The Doctor is here to"
\par print "shake your hand. He"
\par print "thanks you for his"
\par print "Sonic Screwdriver"
\par wait 50
\par print "He pokes his head"
\par print "out. With a gleam in "
\par print "his eye he asks . . ."
\par print "Care to go for a ride?"
\par print "The End."
\par beep 6
\par else
\par cls
\par beep 4
\par print "The Doctor is very "
\par print "disappointed in you."
\par print "You forgot the Sonic"
\par print "Screwdriver."
\par wait 50
\par print "The Doctor sulks into"
\par print "the TARDIS and it"
\par print "disappears"
\par print "The End."
\par beep 4
\par end if
\par while 1
\par wend
\par end sub
\par 
\par nrg=26
\par drp[cl]=sc
\par drp[e1]=jb
\par drp[so]=sd
\par 
\par main(zz)
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\f6\fs16 
\par {\*\bkmkstart _Toc509393620}{\*\bkmkstart _Toc509393671}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 24\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright 
\b\f1\fs28\kerning28\cgrid {: Command Summary{\*\bkmkend _Toc509393620}{\*\bkmkend _Toc509393671}
\par }\pard\plain \qc\nowidctlpar\widctlpar\adjustright \fs20\cgrid {\{something\} = optional
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr
\brdrs\brdrw10 \cltxlrtb \cellx2844\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx5796\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr
\brdrs\brdrw10 \cltxlrtb \cellx8748\pard \nowidctlpar\widctlpar\intbl\adjustright {DIM var\{[dimension]\} \{as type\}\cell Dimension - number of objects in array
\par type=char, int, long, double\cell dimension a variable\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh
\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx2844\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr
\brdrs\brdrw10 \cltxlrtb \cellx5796\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx8748\pard \nowidctlpar\widctlpar\intbl\adjustright {INPUT \{"prompt",\} var\cell 
Var - variable to receive input
\par Prompt - prompt string\cell Receives input from the keyboard and puts it in a variable\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {PRINT \{obj, \'85\}\cell 
Obj - a variable or expression or quoted string\cell Puts text output on the screen.  The screen is about 23 chars x7 lines\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {var = exp\cell 
Var - a variable
\par Exp - some arithmetic expression\cell Assignment\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {'comment\cell Comment\cell Everything after the ' is ignored\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {FOR var = from-exp TO to-exp \{STEP exp\}\cell Var - variable
\par From-exp - starting value
\par To-exp - ending value
\par Step-exp - increment\cell Begin a loop with variable var changing value throughout \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {NEXT\cell \cell 
Increment the var by to-exp and continue execution at the FROM statement\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {IF exp1 cond exp2 THEN\cell Exp1,exp2 - expressions to be compared
\par Cond - conditional =,<,<=,>,>=, and, or
\par  but you cannot compare strings\cell Conditinal command if true, executes all statements down to the next ELSEIF, ELSE, and END IF.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {ELSE\cell 
\cell If the IF cond fails then each command until the ENDIF is executed\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {ELSEIF exp1 cond exp2 THEN\cell Exp1, exp2 - expressions
\par Cond - conditional =, <, <=, >, >=, and, or
\par But you cannot compare strings\cell If the IF cond fails and the ELSEIF cond is true then all commands until the END IF or ELSE are executed\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
SUB routine-name \{(parameter, \'85)\}
\par Parameter=\{BYREF|BYVAL\} var \{AS type\}\cell Routine-name is the name of the subroutine
\par Parameter is a dim-like statement
\par No arrays are allowed.  BYREF indicates passing by reference BYVAL indicates pasing by value.  Type is char, int,long, double\cell Creates a subroutine which includes all commands up to the END SUB command\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {EXIT SUB\cell \cell Exit the subroutine before reaching the END SUB command\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {END SUB\cell \cell End of the subroutine\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {FUNCTION routine-name \{(parameter,\'85)\} as type
\par Parameter=\{BYREF|BYVAL\} var \{AS type\}\cell Routine-name is the name of the function which returns a value
\par Parameter is a dim-like statement
\par No arrays are allowed.  BYREF indicates passing by reference BYVAL indicates pasing by value.  Type is char, int,long, double\cell Creates a function which includes all commands up to the END SUB command.  
\par Declare the value of the returned function by setting the name of the function to a value
\par Routine-name = exp\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {EXIT FUNCTION\cell \cell Exit the function before reaching the END FUNCTION command\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {END FUNCTION\cell \cell End of the FUNCTION\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {OPEN pathname \{FOR mode\} AS filnumber
\par Mode = \{READ|WRITE|APPEND\}\cell Pathname=string of a file name
\par Filenumber= value from 0 to 65535
\par Mode=access mode\cell Opens a file for access.  Note that opening for read destroys old content.  File writing is constrained to 23KB\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {
CLOSE \{filenumber\}\cell Filenunber = value from 0 to 65535\cell Closes a file.  Specifying no filennumber closes all files currently open\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {PUT filenumber, \{bytepos\},\{var\}\cell Bytepos - position in the file to write to
\par Var - variable to write\cell Writes a var to a file at bytepos.  If bytepos is omitted the var is written to the current pos. if the var is ommitted the file is positioned at the pos and no var is written\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {GET filenumber, \{bytepos\},\{var\}\cell Bytepos - position in the file to read from
\par Var - variale to read into\cell Reads a var from a file at bytepos. If bytepos is omitted the vari is read from the current pos.  if the var is omitted the file is positioned at the pos and no var is read.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {PRINT #filemumber, (obj\'85)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {Filenumber - the file to write to
\par Obj - a variable or expression or quoted string\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Puts text output to the file specified by filenumber\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {CLS\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Clear the screen\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row 
}\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Paper n\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {N - the color of the paper (backgrond) Can be one of four values; 0=white, 1=light gray, 2=dark gray, 3=black\cell }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Paint the screen the color 'n'\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Ink n\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {N - the color of the paper (backgrond) Can be one of four values; 0=white, 1=light gray, 2=dark gray, 3=black\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {
Set the color of text, lines, and points\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Point x,y\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {
X - the x coordinate (-43 to +43)
\par Y - the y coordinate (-80 to +80)\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Set a single pixe on the display
\par In the current ink color\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Line x0,y0,x1,y1\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {X0- the left-most point
\par X1 - the right-most point
\par Y0 - the left most point
\par Y1 -the right most point\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Draw a line on the display in he current ink color\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Math Functions:
\par Sin, cos, tan, 
\par asin,ascos,atan, actan
\par sinh,cosh,tanh,
\par asinh,acosh,atanh,actanh
\par sqrt, exp, log, log10,log2
\par pow,sqr_pow,rnd
\par \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Geometric mathemetaticl fucntion\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Beep n\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {N = beep command
\par 0-silence     1-bleep
\par 2-oh no       3-laser
\par 4-too bad     5-computing
\par 6-carnival     7-completed task\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Makes noises on the cybiko\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {WAIT n\cell }\pard 
\keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {N - number of 10ths of seconds to wait\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Waits 10ths of seconds \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keepn\nowidctlpar\intbl\adjustright {KEY\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Acts as a variable holding the most recently type 
keyboard variable.  See the documenation for more info\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {WHILE exp1 cond exp2\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {
See IF command, above\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Initiates a while loop that exectes allcommands up to the WEND command.  IF the conditional is still true, processing continues at the WHILE command\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {WEND\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Terminates the while command\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {TYPE \{decl, \'85\}\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Decl is as in DIM\cell }\pard \keepn\nowidctlpar\intbl\adjustright {
Creates a structured datatype\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {END TYPE\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {\cell }\pard 
\keepn\nowidctlpar\intbl\adjustright {Ends a type definition\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {PRINTXY x, y \{,vals\}\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {
X,Y=the coordinate where the text will display
\par Vals are values as in print to be displayed\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Positions the cursor on the screen and prints the values\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\intbl\adjustright {
RIGHT dest, src, len\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Src = source string
\par Dest = destination string
\par Len = the number of bytes from the end of the src string to copy to the dest string\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Copies bytes from the right-hand side of the src string to the left hand side of the dest string\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl
\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx2844\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx5796\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl
\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx8748\pard \keepn\nowidctlpar\intbl\adjustright {MID dest, src, start\{, len\}\cell }\pard \keep\keepn\nowidctlpar\widctlpar\intbl\adjustright {Src = source string
\par Dest= destination String
\par Start = where in the src string to start copying
\par Len = number of bytes to copy\cell }\pard \keepn\nowidctlpar\intbl\adjustright {Copies from the middle of the soruce string to the destination string. If the length is left out it copied all bytes from the source string start point to the end\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par {\*\bkmkstart _Toc509393621}{\*\bkmkstart _Toc509393672}{\listtext\pard\plain\s1 \b\f1\fs28\kerning28\cgrid \hich\af1\dbch\af0\loch\f1 Chapter 25\tab}}\pard\plain \s1\sb240\sa60\keepn\pagebb\nowidctlpar\widctlpar\ls1\outlinelevel0\adjustright 
\b\f1\fs28\kerning28\cgrid {: Limitations & Bugs{\*\bkmkend _Toc509393621}{\*\bkmkend _Toc509393672}
\par {\*\bkmkstart _Toc509393622}{\*\bkmkstart _Toc509393673}{\listtext\tab}}\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {Literal Character Strings limited to 40 bytes{\*\bkmkend _Toc509393622}
{\*\bkmkend _Toc509393673}
\par {\*\bkmkstart _Toc509393623}{\*\bkmkstart _Toc509393674}{\listtext\tab}Variable names limited to 19 characters{\*\bkmkend _Toc509393623}{\*\bkmkend _Toc509393674}
\par {\*\bkmkstart _Toc509393624}{\*\bkmkstart _Toc509393675}{\listtext\tab}Programs Limited to 8K{\*\bkmkend _Toc509393624}{\*\bkmkend _Toc509393675}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {However,  CyBasic begins to act strangely after a program goes beyond 6.5K.  It complains of Invalid Characters in literal strings and Unknown Variables in function calls.
\par {\*\bkmkstart _Toc509393625}{\*\bkmkstart _Toc509393676}{\listtext\tab}}\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {23K limit when writing files{\*\bkmkend _Toc509393625}
{\*\bkmkend _Toc509393676}
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {I believe this is the total limit for writing all files until you exit the CyBasic application.
\par {\*\bkmkstart _Toc509393626}{\*\bkmkstart _Toc509393677}{\listtext\tab}}\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\widctlpar\ls1\ilvl1\outlinelevel1\adjustright \b\i\f1\cgrid {All division is done in Double format (regardless of the variable type)
{\*\bkmkend _Toc509393626}{\*\bkmkend _Toc509393677}
\par {\*\bkmkstart _Toc509393627}{\*\bkmkstart _Toc509393678}{\listtext\tab}Case doesn\rquote t matter{\*\bkmkend _Toc509393627}{\*\bkmkend _Toc509393678}
\par {\*\bkmkstart _Toc509393628}{\*\bkmkstart _Toc509393679}{\listtext\tab}The maximum number of nested cycles is 30.{\*\bkmkend _Toc509393628}{\*\bkmkend _Toc509393679} 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {I don't really know what this means.  It might mean that the number of nested if/then/else/elseif statements is 30.  I
t might mean that you cannot nest parenthesis more than 30 deep.  Most likely it means that you cannot nest function calls more than 30. 
\par 
\par }}