<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Chapter 1 : Introducing the Cybiko</TITLE>
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080">

<B><FONT FACE="Arial" SIZE=5><P ALIGN="CENTER">Learning to Program with the</P>
<P ALIGN="CENTER">Cybiko Handheld Computer</P>
<P ALIGN="CENTER">Using B2C</P>
</B></FONT><FONT FACE="Arial"><P ALIGN="CENTER">By Greg Smith</P>
<P ALIGN="CENTER">&nbsp;</P>
</FONT>

<OL>

<LI><A NAME="_Toc509128872"><A NAME="_Toc509393596"><A NAME="_Toc523374384"></I><FONT FACE="Arial" SIZE=4>Introducing the Cybiko</A></A></A></LI>
</FONT><U><FONT SIZE=2><P>Teen Computer</B></U> </P>
<P>Donald Wisniewski and David Yang created the Cybiko as a portable computer for tweens (ages 10-12) and teens (ages 13-17). It was designed to fill a niche left between the Palm Pilot and Nintendo Game boy. </P>

<B><U><P>Look &amp; Feel</B></U> </P>
<P>The original Cybiko looks like a walkie talkie encased in a transparent shell from one of five colors (black, clear, yellow, blue, and purple – and a promotional red). It has an array of white buttons comprising a QWERTY-style keyboard, a joystick pad, and some function keys. The original, older model (released in April 2000) had a power slide switch on the side, which was later replaced by an "Esc" key. </P>

<P>The new Cybiko Xtreme (CyX2)  is very different from the original Cybiko.  Released in September of 2001, the CyX2 body has a trim feel to it compared to the Cybiko. It is roughly the same size as the original Cybiko. It's molded as all one unit and shaped like a figure 8 (curved edges, wide at the top, narrow waist, and wide near the bottom). In this way it resembles the m100 model of the Palm Pilot. And like the m100 series, there are skins that cover the silverized CyX2 body. There are also separate panels for the areas around the keyboard, arrow keys, and the Enter pad. Red, green, blue, and zebra colors are available. You can even mix and match colors for a unique color scheme. </P>

<P>The CyX2 keyboard has larger keys and they are of a solid black rubbarized material. The arrow keys resemble the Game Boy keys and are separate from the ESC key. In a brilliant and very welcome move, there is an ON/OFF key situated in the center of the keyboard. One drawback to the new, larger keyboard is that Cybiko removed the top row of number keys (1-9). To type numbers into the unit you must use the FN key to 'shift'. The F1-F7 keys still exist at the top of the unit.</P>

<P>The CyX2 antenna is no longer the 6" long rod rising from the back of the unit. Instead, a slim side-antenna (again resembling the Palm Pilot VII antenna). CyX2 sports a mini USB port at the bottom of the case. This USB port will be used to download games. It also doubles as the battery charger connection. A supplied cable connects the USB port to a power adapter.  The display is the same as on the Cybiko. 160x100 pixels, 4-color greyscale.  A slot for additional devices is now at the top of the unit.</P>

<P>&nbsp;</P>
<B><U><P>Donald Wisniewski &amp; Cybiko Inc.</B></U> </P>
<P>The creators of the Cybiko – Donald Wisniewski (President of Cybiko, Inc.) and David Yang started the company in early 1999. They recognized a need in the teen marketplace for a handheld wireless entertainment device that teens could call their own. </P>

<P>Wisniewski (born in 1960) is a former executive of V-Tech (another high-tech firm in the business of creating devices for young people). He holds a BS in mechanical engineering from Purdue University. "We want to create a social environment where teens can chat and interact," he said in a recent interview, "We see a huge opportunity with 12- to 16-year olds." </P>

<P>The Cybiko was released in April of 2000 with a price tag of $170. At that time, New York-based Cybiko had 85 engineers who had created the device. As of January 2001 Cybiko had a staff of around 170 Russian-based software developers and retailed for about $99. They had successfully delivered a new application daily from about January 2000 to July 2001. The product was first introduced at a number of toy and electronics retailers like FAO Schwarz, Virgin Records, CompUSA, Babbage's, and Software Etc. Now, it is available at over 9000 locations across the USA and online at www.cybiko.com.  Cybiko is privately held and owns all of the intellectual property. </P>

<P>The CyX2 was released in September 2001.  The game-a-day policy has changed to a trickle of just one game per week.</P>

<B><U><P>Teens and Cybiko</B></U> </P>
<P>There are 30 million teens in the United States, 65 percent of whom have a computer in the home. 45 percent have Internet access and none of them had a mobile wireless product. That is a market of 13.5 million people. The Cybiko is aimed at Nine to 20-year-olds. They felt interconnectivity and communication was a key feature left out of other devices for teens. "We wanted to create a social environment where teens can chat and interact," said Wisniewski. </P>

<P>And they wanted to create a device that was more than a game machine – so they included single and multiplayer wireless games, support applications like the planner, email, Friend Finder, and a way to chat with anyone in the network. "I've seen users as young as five and old as 55," Wisniewski said in a recent interview. </P>

<B><U><P>Technical Details</B></U> </P>

<P>The operating system for the Cybiko is called CyOS.  It is now (Sept/2001) up to version 1.3.57. The original Cybiko (v1.2) advertised a mere 256KB of RAM. Currently the memory is divided into 2 segments : 512KB of RAM and 512KB or Flash RAM – for a grand total of 1MB. Most of the memory is used up by the Cybiko Operating System (CyOS). Only about 300KB is available for the user. The memory is supposed to be upgradeable to 16MB, but this number is different depending on the published source. (There is a 1MB expansion module but the Cybiko can take advantage of the MP3's memory which can be as large as 64MB). </P>

<P>The CyX2 boasts 1MB of RAM and 1MB or Flash RAM.  With an additional 500KB of ROM, the CyX2 weighs int at 2.5MB of memory.</P>

<P>The Cybiko's display is 160 x 100 pixels of monochrome LCD (actually, its 4-color gray scale). Its Microprocessor is a 32-bit 11-MHz processor manufactured by Hitachi (this is roughly equivalent in capability to an Intel 386 chip – the heart of the original IBM PC) The CyX2 has a 22-MHz processor.</P>

<P>The Cybiko broadcasts on 30 digital channels over frequencies between 902 and 928 MHz with a range of up to 300 feet. There has been a lot of talk on the Internet about improving the range with home-brew antennae and so on, but for all practical purposes 300 feet is as far as the Cybiko can broadcast.  Wireless eMail is possible with the CyWIG software on the PC. Users can send files (including music, games and applications) between two Cybikos. While Cybiko users can chat and game with other Cybikos within a range of 300 ft.  They can also transmit <U>through</U> each other to extend the range, similar to a re-transmitter. </P>

<P>The original Cybiko has a small keyboard allows for data entry. The keys are arranged in the traditional QWERTY layout, but are smaller than those used on the popular RIM pager devices. A stylus is provided to allow easier typing. There is a small joystick pad with up, down, left, and right keys. Seven pre-programmed function keys line the top of the unit. And the help, enter, select, tab, and del keys are along the right side. In fact, you will mostly use the arrow keys and the enter key. </P>

<P>The CyX2 keyboard has black letters that are larger than its predecessor.</P>

<P>The expansion slot is located at the base of the Cybiko. It is able to take an optional MP3 player. Also, a memory card with 1MB of memory is available.   The CyX2 expansion slot is at the top of the unit.</P>

<P>Two rechargeable nickel-metal hydride batteries that last for 8-10 hours of regular use supply power. The unit can vibrate whenever a similar machine is in range. </P>

<P>An RS232 cable connects it to a PC, which allows users to download new games and applications from the Internet. It is also possible to write programs that access the RS232 port. </P>

<P>The CyX2 uses a USB port to communicate with the outside world.</P>
<LI><A NAME="_Toc509128873"><A NAME="_Toc509393597"><A NAME="_Toc523374385"></FONT><B><FONT FACE="Arial" SIZE=4>Introducing BASIC</A></A> &amp; B2C</A></LI>
</B></FONT><FONT SIZE=2><P>Welcome to programming in B2C.  B2C stands for Basic-to-C compiler.  With B2C you can create very simple to very complex programs (including video games) with a minimum of effort.  In the following pages you will find a step-by-step introduction to programming in B2C.  To gain the maximum benefit from this tutorial you are encouraged to do each step one by one in order.  When you are done, you will know enough to write any program you can imagine – and we know you have a wild imagination!</P>

<P>BASIC is an acronym.  It stands for Beginner's All-purpose Symbolic Instruction Code.  It was invented in the 1960's as a simplified programming language for people of all types.  The original language had a line number for each line of code.  This helped to order the statements and make it easier for the newcomer to change something on a particular line.  The purpose of the BASIC language is to make programming code more like English so that it can be easily learned by the non-computer professional.</P>

<P>B2C is based on the CyBasic2 language by Cybiko, Inc.  Unlike the 'C' programming language, CyBasic2 is interpreted.  Languages like 'C' are compiled, meaning the instructions are transformed into machine code.  CyBasic2 is interpreted at run time.  It is never converted into machine code.  So, it is slower than 'C'.  B2C is a compiler – it transforms B2C code into C that is then compiled into a fast-running application.</P>

<P>CyBasic2 was a fairly limited language.  It had the ability to get input from the user, process that input, and print the processed results to the screen.  The If command allowed CyBasic2 to handle conditionals and the For command allowed it to handle looping.  There are only a handful of graphic functions including Point (for setting a pixel) and Line (for drawing a line).</P>

<P>B2C on the other hand has commands to work with bitmaps directly.  Anything you can do in C you can also do in B2C, only with B2C, it's easier.  You can create real video games with B2C, something CyBasic2 was never designed to do.</P>

<P>Follow this link for more information on the origins of BASIC: <a href=http://www.digitalcentury.com/encyclo/update/BASIC.html>http://www.digitalcentury.com/encyclo/update/BASIC.html</a></P>
<LI><A NAME="_Toc509128874"><A NAME="_Toc509393598"><A NAME="_Toc523374386"></FONT><B><FONT FACE="Arial" SIZE=4>Downloading </A></A>B2C</A></LI>
</B></FONT><FONT SIZE=2><P>B2C is available as a download at </FONT><A HREF="http://www.DevCybiko.com/basiccompiler.html"><FONT SIZE=2>www.DevCybiko.com/basiccompiler.html</FONT></A><FONT SIZE=2>.  It is currently in version 5 (b2cv5.zip).  When you download it, you must un-zip the file using a Zip tool (like PKZip or ZipMagic).  Be sure to place B2Cv5 in a directory that is easy to use (like C:\b2cv5, for example).</P>

<P>The next step is to download and install the Cybiko SDK from </FONT><A HREF="http://www.cybiko.com/devsarea"><FONT SIZE=2>www.cybiko.com/devsarea</FONT></A> or <a href=http://devcybiko.com/basiccompiler.html>DevCybiko</a>
<FONT SIZE=2>.  You will need Version 2.0 or better of the Standard or Professional SDK.  (The Professional SDK costs $49.95.  It is not necessary to purchase the professional version, the Standard works just fine).</P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>If you want to cut to the chase and just rush through the tutorial, look for this box.  Do the things in this box to learn how to program in B2C faster.  If you didn't understand what happened in this box, then re-read the section above it.</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><P>&nbsp;</P>
<LI><A NAME="_Toc509128876"><A NAME="_Toc509393600"><A NAME="_Toc523374387"></FONT><B><FONT FACE="Arial" SIZE=4>Editing </A></A>Your First Program</A></LI></OL>

</B></FONT><FONT SIZE=2><P><B><U>Introduction</B></U> </P>
<P>The process for any B2C program is simple: Edit, Compile, Download, Run, and Repeat.  In this chapter we'll look at the first part: Editing.</P>

<P>There are many good editors for use on the PC.  Every programmer has a favorite editor. Here, we will discuss the Notepad editor for Windows, and the Edit program for MS-DOS.  You will also be introduced to the MS-DOS Command Prompt, since you will spend much of your time there.</P>

<B><U><P>Notepad</P>
</B></U><P>The Notepad editor is a bare-essentials editor, which is precisely what we need for editing B2C programs.  You can run Notepad by selecting the "Start" menu and pulling-right on "Accessories".  Pull-down to the "Notepad" icon.  Here is a summary of the Notepad menu options:</P>
</FONT>
<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000080" WIDTH=573>
<TR><TD WIDTH="19%" VALIGN="TOP" BGCOLOR="#000080">
<FONT SIZE=2><P ALIGN="CENTER"></FONT><B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff">Menu Option</B></FONT></TD>
<TD WIDTH="24%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Keyboard Equivalent</B></FONT></TD>
<TD WIDTH="57%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Comments</B></FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;New</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-N</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Create a new, empty, text file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Open</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-O</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Open an existing file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Save</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-S</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Save the current file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Save As</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-A</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Save the current file with another name</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Page Setup</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-T</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Print out setup</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Print</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-P</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Print the file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Exit</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-X</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Exit Notepad</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Undo</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-Z</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Undo edits</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Cut</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-X</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Cut current selection</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Copy</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-C</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Copy current selection</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Paste</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-V</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Paste buffer</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Select All</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-E-S</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Select entire file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Time/Date</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>F5</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Insert Current Time/Date into file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Word Wrap</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-E-W</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Wrap words at the end of the line (or let lines go offscreen)</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Set Font</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-E-F</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Set the font (default : courier)</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Search-&gt;Find</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-S-F</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Find text</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Search-&gt;Find Next</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>F3</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Find text again</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Search-&gt;Replace</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-S-R</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>replace text (only on Windows NT)</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Help-&gt;Help Topics</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-H-H</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Help information on Notepad</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Help-&gt;About</FONT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-H-A</FONT></TD>
<TD WIDTH="57%" VALIGN="TOP">
<FONT SIZE=2><P>Copyright information</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2>
<P>Run Notepad and type the following…</P>

</FONT><FONT FACE="Courier" SIZE=1><P>print "hello world"</P>
<P>dim b as int</P>
<P>input b</P>
</FONT><FONT SIZE=2>
<P>Now exit the Notepad selecting the File-&gt;Exit menu and answer "Yes" when it asks you if you want to save the file.  Use the filename "hello.b2c". </P>

<B><U><P>MS-DOS and Edit</P>
</B></U><P>The MS-DOS Edit command is a more powerful alternative to the Notepad editor.  It offers a more professional set of features than Notepad.  As a programmer, these features give you an easier path from your ideas to your code.  The faster you can type your ideas into the editor, the more ideas you can code.  So what features do we need in an editor? Here is a list of the bare essentials: </P>


<UL>
<LI>open file </LI>
<LI>save file </LI>
<LI>enter and edit text </LI>
<LI>cut, copy and paste of text </LI>
<LI>tab or indent </LI>
<LI>search </LI>
<LI>search &amp; replace </LI></UL>


<P>You may desire other features, but I find these to be the minimum. Notepad (for Windows 9x) does not have a search &amp; replace and line numbering.</P>
<P> </P>
<B><U><P>MSDOS as Your Working Environment</B></U> </P>
<P>The MS-DOS (Microsoft Disk Operating System) Prompt is still delivered with all MS Windows operating systems. This is a viable working environment for our needs. </P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>To run the MS DOS Command Prompt, select the Start menu and Programs. Pull right and find MS DOS Prompt (or Command Prompt) in the menu. </FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2>
<P>You may want to modify some of the properties of the MS-DOS window. For example, the default setting is for a 24-line display. I like more lines of text when using the text editor. To change the properties, click the left mouse button over the MS-DOS logo in the upper-left corner of the window - this will display a menu. Select "Properties" at the bottom of the menu. </P>

<P>Here are the settings I like to use for MS-DOS:</P></FONT>
<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000080" WIDTH=654>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2 BGCOLOR="#000080">
<FONT SIZE=2><P ALIGN="CENTER"></FONT><B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff">Tab Selection</B></FONT></TD>
<TD WIDTH="24%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Setting</B></FONT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2 BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Default</B></FONT></TD>
<TD WIDTH="33%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Recommended</B></FONT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>
<TT><P>Program</TT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>-keep all defaults-</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>-keep all defaults-</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>-keep all defaults-</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>
<TT><P>Font</TT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>Bitmap Only</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Both Font Types</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>Bitmap Only</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>&nbsp;</TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>Font Size</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Auto</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>8x12</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>
<TT><P>Memory</TT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>-keep all defaults-</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>-all set to Auto-</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>-keep all defaults-</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>
<TT><P>Screen</TT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>Usage</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Window</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>Window (not Full Screen)</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>&nbsp;</TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>Initial Size</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Default</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>50 lines</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>&nbsp;</TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>Window</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Display Toolbar (checked)</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>Do Not Display Toolbar</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>&nbsp;</TD>
<TD WIDTH="24%" VALIGN="TOP">&nbsp;</TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Restore Settings (checked)</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>Restore Settings (checked)</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>&nbsp;</TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>Performance</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Fast ROM Emulation (checked)</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>Fast ROM Emulation (checked)</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>&nbsp;</TD>
<TD WIDTH="24%" VALIGN="TOP">&nbsp;</TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>Dynamic Memory Allocation (checked)</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>Dynamic Memory Allocation (checked)</TT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP" COLSPAN=2>
<TT><P>Misc</TT></TD>
<TD WIDTH="24%" VALIGN="TOP">
<TT><P>-keep all defaults-</TT></TD>
<TD WIDTH="26%" VALIGN="TOP" COLSPAN=2>
<TT><P>-keep all defaults-</TT></TD>
<TD WIDTH="33%" VALIGN="TOP">
<TT><P>-keep all defaults-</TT></TD>
</TR>
</TABLE>

<B><U><FONT SIZE=2>
<P>MS-DOS Commands</B></U> </P>
<P>There are relatively few MS-DOS commands that you will need to know in this tutorial. Fortunately, the majority of tasks can be handled in Windows. Nevertheless it is useful to know how to do certain, fundamental operations. The following table summarizes them:</P>
</FONT>
<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000080" WIDTH=655>
<TR><TD WIDTH="11%" VALIGN="TOP" BGCOLOR="#000080">
<FONT SIZE=2><P ALIGN="CENTER"></FONT><B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff">Command</B></FONT></TD>
<TD WIDTH="34%" VALIGN="TOP" COLSPAN=3 BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Syntax</B></FONT></TD>
<TD WIDTH="55%" VALIGN="TOP" COLSPAN=2 BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Remarks</B></FONT></TD>
</TR>
<TR><TD WIDTH="11%" VALIGN="TOP">
<FONT SIZE=2><P>Del</FONT></TD>
<TD WIDTH="34%" VALIGN="TOP" COLSPAN=3>
<FONT SIZE=2><P>del filename.ext<BR>
del *.ext</FONT></TD>
<TD WIDTH="55%" VALIGN="TOP" COLSPAN=2>
<FONT SIZE=2><P>deletes one or more files (*=wildcard characters)</FONT></TD>
</TR>
<TR><TD WIDTH="11%" VALIGN="TOP">
<FONT SIZE=2><P>Copy</FONT></TD>
<TD WIDTH="34%" VALIGN="TOP" COLSPAN=3>
<FONT SIZE=2><P>copy file1.ext file2.ext</FONT></TD>
<TD WIDTH="55%" VALIGN="TOP" COLSPAN=2>
<FONT SIZE=2><P>copies file1 to file2</FONT></TD>
</TR>
<TR><TD WIDTH="11%" VALIGN="TOP">
<FONT SIZE=2><P>Cd</FONT></TD>
<TD WIDTH="34%" VALIGN="TOP" COLSPAN=3>
<FONT SIZE=2><P>cd dirname<BR>
cd ..</FONT></TD>
<TD WIDTH="55%" VALIGN="TOP" COLSPAN=2>
<FONT SIZE=2><P>change directory from one place to another<BR>
change directory to parent directory</FONT></TD>
</TR>
<TR><TD WIDTH="11%" VALIGN="TOP">
<FONT SIZE=2><P>batch file</FONT></TD>
<TD WIDTH="34%" VALIGN="TOP" COLSPAN=3>
<FONT SIZE=2><P>filename.bat</FONT></TD>
<TD WIDTH="55%" VALIGN="TOP" COLSPAN=2>
<FONT SIZE=2><P>a list of MS-DOS commands in a file with the extension .bat. This will be executed when you type in the name of the file (like make.bat in Step1.app)</FONT></TD>
</TR>
<TR><TD WIDTH="11%" VALIGN="TOP">
<FONT SIZE=2><P>Dir</FONT></TD>
<TD WIDTH="34%" VALIGN="TOP" COLSPAN=3>
<FONT SIZE=2><P>dir <BR>
dir *.ext </FONT></TD>
<TD WIDTH="55%" VALIGN="TOP" COLSPAN=2>
<FONT SIZE=2><P>- list all files in current directory<BR>
- list only files with certain extension</FONT></TD>
</TR>
</TABLE>

<B><U><FONT SIZE=2>
<P>Introducing MS-DOS Edit</B></U> </P></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>In the MS-DOS Prompt, type </P>

</FONT><FONT FACE="Courier" SIZE=1><P>cd C:\…\b2cv5  (where … is the path to b2cv5)</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Next type "edit" and when the blue screen pops up, type in the following…</P>

</FONT><FONT FACE="Courier" SIZE=1><P>print "hello world"</P>
<P>dim b as int</P>
<P>input b</P>
</FONT><FONT SIZE=2>
<P>Now exit the editor by typing the ALT-F-X commands (or choosing File-&gt;Exit with the mouse) and answer "Y" when it asks you if you want to save the file.  Save the filename as "hello.b2c"</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2>
<P>&nbsp;</P>
<B><U><P>MS-DOS Edit Commands </P>
</B></U><P>MS-DOS Edit is a very straightforward editor with a few hidden options.  It is "mouse-enabled," meaning that if you click on the menu bar, the expected Windows-like thing will happen. Clicking on some text in the Editor window will move the cursor to that position. You can drag the mouse over text and it will select the text. </P>

<P>If you would rather, you can use the keyboard for menu operations by holding down the ALT key (at the bottom of the keyboard, next to the space bar). When you hold down the ALT key, the menu "lights up" and you may press the highlighted character to drop-down the selected menu. For example, selecting ALT-F drops-down the File menu. Also, holding down the SHIFT key and moving the arrow keys will select text for cut and paste operations. </P>

<P>In dialog boxes, the TAB key usually will move you from field to field. The arrow keys will move you up, down, left, and right. If you select text in the Editor window and hit the TAB key, the selected region will be indented one tab stop (usually 8 characters). Holding down the SHIFT key and hitting TAB will "outdent" one tab stop. </P>

<B><U><P>MS-DOS Edit Menu commands</B></U> </P></FONT>
<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000080" WIDTH=576>
<TR><TD WIDTH="19%" VALIGN="TOP" BGCOLOR="#000080">
<FONT SIZE=2><P ALIGN="CENTER"></FONT><B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff">Menu Option</B></FONT></TD>
<TD WIDTH="12%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Keyboard Equivalent</B></FONT></TD>
<TD WIDTH="69%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT FACE="Arial" SIZE=2 COLOR="#ffffff"><P ALIGN="CENTER">Comments</B></FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;New</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-N</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Create a new, empty, text file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Open</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-O</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Open a file that has already been created</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Save</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-S</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Save the currently displayed file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Save As</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-A</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Save the currently displayed file with another name</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Close</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-C</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Close the current file and its window</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Print</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-P</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Print the currently displayed file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>File-&gt;Exit</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-F-X</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Exit the Editor</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Cut</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-X</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Delete the currently selected text and copy it to the buffer</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Copy</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-C</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Copy the currently selected text to the buffer</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Paste</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-V</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Insert the buffer into the currently selected file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Edit-&gt;Clear</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Del</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Delete the currently selected text (but don't copy it to the buffer)</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Search-&gt;Find</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-S-F</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Open the Find Dialog Box and search for the first occurrence</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Search-&gt;Repeat Last Find</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>F3</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Repeat the last find command</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Search-&gt;Replace</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-S-R</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Open the Search/Replace Dialog box</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>View-&gt;Split Window</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-F6</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Split the current window in two horizontally</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>View-&gt;Size Window</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-F8</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Begin resizing the split windows. Use the up and down arrow keys</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>View-&gt;Close Window</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Ctrl-F4</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Close the currently selected split window, restore to a single window pane</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>View-&gt;n</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-n</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>where n=1-9 - make the selected file the currently selected file</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Options-&gt;Settings</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-O-S</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Display the Settings dialog box</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Options-&gt;Colors</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-O-C</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Display the Colors dialog box allowing you to customize the colors to your preferences</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Help-&gt;Commands</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-H-C</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Display a listing of keyboard commands</FONT></TD>
</TR>
<TR><TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Help-&gt;About</FONT></TD>
<TD WIDTH="12%" VALIGN="TOP">
<FONT SIZE=2><P>Alt-H-A</FONT></TD>
<TD WIDTH="69%" VALIGN="TOP">
<FONT SIZE=2><P>Display copyright information</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2>
<P>The File-&gt;Open and File-&gt;Save As menu options will display a dialog box with ... </P>

<UL>
<LI>Filename input field - can hold wildcard (*) patterns or filenames </LI>
<LI>Current Working Directory</LI>
<LI>Filename listbox - showing all files matching the pattern in the Filename input field </LI>
<LI>Directories listbox - showing the parent dir (..), any directories, and other devices ([-A-], [-C-], [-D-], etc...) </LI>
<LI>Open Read Only Checkbox - select this if you don’t want to modify the file when you open it (either click on it with the mouse, or tab over to it and hit the space bar) </LI>
<LI>Open Binary Checkbox - select this if you want to open files with other than ASCII data (like .app files) </LI>
<LI>Line Width - for binary files only, the number of characters per line to display </LI></UL>


<P>The File-Print menu option will give you the option of printing selected text or the entire file. </P>

<P>The Search-&gt;Find menu option will display a dialog box with ... </P>

<UL>
<LI>Find What - the text string you want to find </LI>
<LI>Match whole word only checkbox - use this to find the search string as a word (surrounded by white space - space characters, tabs, newlines) </LI>
<LI>Match case - use this to force upper and lower case letters to match </LI></UL>


<P>The Search-&gt;Replace menu option will display a dialog box with ... </P>

<UL>
<LI>Find What - the text string you want to replace </LI>
<LI>Replace With - the text string you want to replace the search string with </LI>
<LI>Match whole word only checkbox - use this to find the search string as a word </LI>
<LI>Match case - use this to force upper and lower case letters to match </LI>
<LI>Replace Button - replace a single occurrence of the search string </LI>
<LI>Replace All - replace all occurrences in the currently selected file </LI></UL>


<P>The View-&gt;Split option splits the current window into 2 panes. You are free to open a second, different file into the second window. You may resize the panes by selecting View-&gt;Size Window and moving the "center bar" up and down with the arrow keys. Or, you can use the mouse pointer to grab the "center bar" and drag it to the size you like. Selecting View-&gt;Close Window will return the Editor to single-pane viewing. </P>

<P>The Options-&gt;Settings will display a dialog box with ... </P>

<UL>
<LI>Tab Stop (defaults to 8, but I recommend 4) - the number of spaces to indent when TAB is entered. </LI>
<LI>Colors - allows you to change many color parameters in the Editor. I recommend keeping the defaults. If you get lost, you can always come here and click on "Defaults". </LI></UL>


<P>The Help-&gt;Commands menu option displays a dialog box with a listing of many "hidden" keyboard commands. I won't repeat their descriptions here. Most of them are obvious (like Home to return to the beginning of a line). But there are a few surprises (like CTRL-Y to delete a line). Use the Page-Up and Page-Down keys to scroll through the list. </P>
<P>&nbsp;</P>
<OL start=5>
<LI><A NAME="_Toc523374388"></FONT><B><FONT FACE="Arial" SIZE=4>Compiling Your First Program</A></LI>
</B></FONT><FONT SIZE=2><P>B2C programs require a set of supporting files to create an application. Fortunately for you the B2Cbuild process handles this for you.  You may never have to look at these files.</P>
<P><A NAME="_Toc509128877"><A NAME="_Toc509393601"></P></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>At the MS DOS command prompt type "build hello.b2c".  If any errors occur you will see the word "ERROR", but if all goes well you should see a line which says something like "Done 7 files." In the event of an error, examine the error line.  It will show the source file followed by a line number in parenthesis, followed by the error.  For Example:</P>

<P>hello.b2c(2) – Parse error</P>

<P>Indicates an error in line two of hello.b2c.  A parse error is some sort of spelling error.</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><P>&nbsp;</P>
<LI><A NAME="_Toc523374389"></FONT><B><FONT FACE="Arial" SIZE=4>Downloading and Running Your Application</A></LI>
</B></FONT><FONT SIZE=2><P>If you have installed CyberLoad on your PC, then you can download your application easily.  </P>

<P>First, verify that your Cybiko is connected to the computer in the usual way.</P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Just double-click on the file "hello.app" in the Windows Explorer (file browser).  The file will be automatically downloaded to your Cybiko</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2>
<P>Now that you have downloaded your application to the Cybiko, find it and run it.  It will have the "B2C" logo for an Icon, and may have "Tardis Adventure" as the text (unless you changed it in chapter 5).  Run it.  It will say "hello world" and wait for you to click on the Enter key.</P>
<LI><A NAME="_Toc523374390"></FONT><B><FONT FACE="Arial" SIZE=4>Programming Basics : Input/Process/Output</A></A></A></LI>
</FONT><U><FONT SIZE=2><P>Input, Processing, Output</P>
</B></U><P>All computer programs have three elements – Input, Processing, and Output.  Input is information (or data) fed into the computer.  Input can be in the form of a textual string of characters from the keyboard, a mouse movement, or a data file.  Output is information (or data) sent out of the computer.   Output can be in the form of text displayed on the computer screen, mouse movement, graphics, or writing to a data file.  Finally, Processing is any action performed on the input data to generate the output data.</P>

<B><U><P>Input</P>
</B></U><P>B2C has two commands to get data from the user and into the Cybiko computer.  The major one is called ‘Input’ and the other one is called 'key' (we'll discuss key later).  Input takes data from the keypad and inserts it into a variable (we’ll discuss variables more in the next chapter).  The Input statement looks like this:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>input a</P>
</FONT><FONT SIZE=2>
<P>The ‘a’ in the input statement is the name of a variable, which receives the data.</P>

<P>In B2C the input statement accepts a prompt string.  This string is displayed on the screen before the user enters their value:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim name[32] as char</P>
<P>input "Enter your name", name</P>
</FONT><FONT SIZE=2>
<B><U><P>Output</P>
</B></U><P>The command for output to the Cybiko screen is ‘Print’.  The Print statement takes one or more variables and character strings (separated by commas) and displays them on the screen.  In its default mode, the screen holds 7 lines of about 23 characters each (The FONT command, as we'll later see, can change this).</P>

</FONT><FONT FACE="Courier" SIZE=1><P>print "The value of a is", a</P>
</FONT><FONT SIZE=2>
<P>The stuff between the quotes (&quot;) is called a &quot;Literal String&quot;.  This is a string of letters, digits, and other characters that you want displayed on the screen.  Here, the variable ‘a’ will be displayed.  It is important to realize that ‘a’ is not displayed, but rather, it’s value.</P>

<P>Also note that typing this statement into B2C alone will result in an error.  You will need to Dimension (Dim) any variables before using them.  Dim is covered in the next chapter.</P>
<B><U>
<P>Processing</P>
</B></U><P>Nearly everything else in the B2C set of commands can be considered processing.  The simplest sort of processing is assignment.  The assignment operation is the equal sign ‘=’.  You can assign a value to a variable like this: </P>

</FONT><FONT FACE="Courier" SIZE=1><P>a = 1</P>
</FONT><FONT SIZE=2>
<P>We’re giving the variable ‘a’ a value of one.  Consider the next examples…</P>

</FONT><FONT FACE="Courier" SIZE=1><P>a=1</P>
<P>b=a+1</P>
<P>print b</P>
</FONT><FONT SIZE=2>
<P>Here, ‘b’ is given the value ‘a+1’.  In this case the variable ‘a’ is replaced with the <I><U>value</I></U> of ‘a’ (which is one).  Hence, b=1+1 or b=2.  So, the value of ‘b’ is two.</P>

<B><U><P>Comments</P>
</B></U><P>All good computer languages have a way to document the <I><U>code</I></U> (programmer lingo for the statements comprising a program) in the program itself.  Commenting a program is good practice in the event that you want to share your program with someone else.  Commenting is also good as a way of reminding yourself what you intended when you wrote the code to begin with.  It is good practice to have one line of commentary for each line of code – on average.  In B2C, comments are identified by a single-quote mark (also called the ‘apostrophe’ mark).</P>

</FONT><FONT FACE="Courier" SIZE=1><P>' demo program for chapter 7</P>
<P>dim a as int</P>
<P>dim b as int</P>
<P>a=1   ‘set a to one</P>
<P>b=a+1   ‘set b to one greater than a</P>
<P>Print b    ‘show the user the value of b</P>
</FONT><FONT SIZE=2>
<P>As we’ll see in the upcoming example program, it is also useful to name your variables in a self-documenting way.  If you are summing 4 grades, name the variables grade1, grade2, grade3, grade4, sum (the sum of the grades) and avg (the average of the grades).  While variable names like ‘a’ and ‘b’ are short and easy to type, they are also cryptic and hard to remember.</P>
<B><U>
<P>Upper and Lower Case</P>
</B></U><P>B2C does not care about upper or lower case.  A varaible name written in uppercase (A) in one place can be referred to later in lowercase (a).  The names of statements in B2C are also not case sensitive.  So Print and PRINT and print are all the same function.</P>
<B><U>
<P>&nbsp;</P>
<P>Example Program</P></B></U></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch7.b2c" to "C:\…\b2cv5\ch7.b2c".  Then execute the command "build ch7.b2c".  Download the ch7.app file to the cybiko.</FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>The example program will take 4 values as input, sum them, and take the average.  The average is the sum of a set of numbers divided by the number of items. </P>

</FONT><FONT FACE="Courier New" SIZE=2><P>' chapter 7 example program</P>
<P>' sum and average of 4 grades</P>
<P>' grades are from 0-100</P>
<P>dim grade0  as int' we’ll discuss the Dim command in the next chapter</P>
<P>dim grade1 as int' here are our 4 grades</P>
<P>dim grade2 as int</P>
<P>dim grade3 as int</P>
<P>dim sum as int   'this variable will store the sum of the 4 grades</P>
<P>dim avg as int   'this variable will store the average of the 4 grades</P>

<P>' ---INPUT ---</P>
<P>print "Enter grade 0"  'we’ll discuss numbering at 0 in the next chapter</P>
<P>input grade0                'get the grades from the student</P>
<P>print "Enter grade 1"</P>
<P>input grade1</P>
<P>print "Enter grade 2"</P>
<P>input grade2</P>
<P>print "Enter grade 3"</P>
<P>input grade3</P>

<P>'--- PROCESS ---</P>
<P>' compute the sum and the average</P>
<P>sum = grade0+grade1+grade2+grade3</P>
<P>avg = sum/4</P>

<P>'--- OUTPUT ---</P>
<P>print "The average of your "</P>
<P>print "4 grades is", avg</P>

<P>print "Press &lt;Enter&gt; to continue"</P>
<P>dim tmp as int' a temporary variable</P>
<P>input tmp 'wait for the user to press enter</P>
</FONT><FONT SIZE=2>
<B><U><P>&nbsp;</B></U></FONT></TD>
</TR>
</TABLE>

<B><U><FONT SIZE=2><P>&nbsp;</P>
<LI><A NAME="_Toc509128878"><A NAME="_Toc509393602"><A NAME="_Toc523374391"></U></FONT><FONT FACE="Arial" SIZE=4>Variables and DIM</A></A></A></LI>
</FONT><U><FONT SIZE=2><P>Variables</P>
</B></U><P>As we saw in Chapter 7, variables hold a value.  The value can be a number (like 1) or the result of an operation (like a+1).  You may think of a variable as a shoebox with a label on the outside.  Inside the shoebox is a value.  On the front of the shoebox is a label with a variable name (like ‘a’, or ‘b’ or ‘avg’).  </P>

<P>We also saw that before using a variable we have to declare it.  This is done with the ‘Dim’ statement (short for Dimension).  The Dim statement alerts B2C to the fact that we are about to use a variable.  The variable is initially set (initialized) to zero.</P>

<B><U><P>Data Types</P>
</B></U><P>It turns out that B2C has 4 different variable types.  These are Int, Char, Long and Double.</P>

<P>‘Long’ variables are integer variables (no decimal point) containing 4 bytes.  They can range from </P>
<P>–2,147,483,648 to +2,147,483,647.  Because Longs are integer variables, they are fast variables when it comes to computation.  But, since they are 4 bytes long, they still take up a lot of Cybiko computing power when processing.  Use the Long data type when you need large values but you don’t need a decimal point.  To declare a Long variable place the words &quot;as long&quot; after the declaration:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim a as long</P>

</FONT><FONT SIZE=2><P>The usual type is called Int (or integer).  ‘Int’ variables are integer variables which means they cannot hold a decimal point and contain only 2 bytes of data.  They can range from -32,768 to +32,767.  As you will see, the range is much smaller than a Long.  And because this is the favorite size of numbers for the Cybiko’s internal microprocessor, Int variables perform the fastest.  To declare an Int variable place the words &quot;as int&quot; after the declaration:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim a as int'defaults to int</P>
</FONT><FONT SIZE=2>
<P>‘Char’ variables are also integer variables, but contain only 1 byte of data.  Char variables range from </P>
<P>-128 to +127.  They are not very useful in computations – and since they are smaller than the Cybiko’s favorite word size (2 bytes) it actually takes longer to process a Char than an Int.  As we’ll see shortly, Char variables are usually used in an array as a character string for input and output, rather than as a numeric quantity for computation.  To declare a Char variable place the words &quot;as char&quot; after the declaration</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim a as char</P>
</FONT><FONT SIZE=2>
<P>&nbsp;</P>
<B><U><P>Names of Variables</P>
</B></U><P>The name of a variable can be any length with no spaces in it.  The first letter must be alphabetic (a-z).  Subsequent letters may be alphanumeric (a-z or 0-9).  You may also use the underscore (_) character in variable names.  As mentioned before, upper and lower case do not matter.</P>
<B><U>
<P>Arrays</P>
</B></U><P>An array is a list, or grouping, of variables.  If you have a list of something you will want to declare an array of them.  Returning to our shoebox example, suppose you have an exam grade.  You can mark the outside of a shoebox with the name &quot;grade&quot; and put the exam inside the box.  If you ever want to refer to the grade, you find the shoebox marked &quot;grade&quot; and take out the exam and look at the grade you received.  This use of a single variable is called a ‘scalar’.  But you cannot put more than one grade inside the shoebox.</P>

<P>Now, let’s assume that you have many students and you want to keep all their grades separated.  You might get a set of shoeboxes and line them up in a row.  On the front of each box put the student’s number (0, 1, 2, 3, etc…).  Each student exam goes into the box with that student’s number on it.  From then on, you access the boxes as &quot;grade[0]&quot;, &quot;grade[1]&quot;, etc…  This is called an array of variables.  The part between the brackets is called the subscript.</P>

<P>To create an array of variables, use the Dim statement as before and put the number of elements of the array in brackets after the name.  Here is an example of an array of 10 grades:</P>

<P>Dim grades[10] as int</P>

<P>Humans are taught to count starting from one.  If I asked you to count to ten, you might reply &quot;1, 2, 3, …10" But computers prefer to count starting from zero.  (Technically speaking, computers use an offset and it is convenient for computation and memory layout if the offset starts at zero).  So, the first grade in our example is grade[0] (Does this explain why I used grade0 earlier?  I hope so!).  The next one is grade[1]. And so on up to grade[9]. (Notice that we cannot use grade[10] – since that would be the eleventh grade and we defined only 10 integers.).</P>

<P>All data types may be arrays.  The Char array is special in that it is treated like a string of text by B2C.  When you want to input a name, use the Char array:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Dim name[32] as char</P>
<P>Input name</P>
<P>Print "your name is ", name</P>
</FONT><FONT SIZE=2>
<B><U><P>&nbsp;</P>
<P>Example Program</P></B></U></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch8.b2c" to "C:\…\b2cv5\ch8.b2c".  Then execute the command "build ch8.b2c".  Download the ch8.app file to the cybiko.</FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Here we return to our grade-averaging problem, only this time we use an array of grades.  In the next chapter we will see the real power of arrays when we introduce loops.</P>

</FONT><FONT FACE="Courier New" SIZE=2><P>' chapter 8 example program' sum and average of 4 grades' grades are from 0-100</P>
<P>dim grade[4] as int ' an array of 4 grades</P>
<P>dim sum   as int 'this variable will store the sum of the 4 grades</P>
<P>dim avg   as int 'this variable will store the average of the 4 grades</P>

<P>' ---INPUT ---</P>
<P>print "Enter grade 0"  </P>
<P>input grade[0]            'get the grades from the student</P>
<P>print "Enter grade 1"</P>
<P>input grade[1]</P>
<P>print "Enter grade 2"</P>
<P>input grade[2]</P>
<P>print "Enter grade 3"</P>
<P>input grade[3]</P>

<P>'--- PROCESS ---</P>
<P>' compute the sum and the average</P>
<P>sum = grade[0]+grade[1]+grade[2]+grade[3]</P>
<P>avg = sum/4</P>

<P>'--- OUTPUT ---</P>
<P>print "The average of your"</P>
<P>print "4 grades is", avg</P>

<P>print "Press &lt;Enter&gt; to continue"</P>
<P>dim tmp int ' a temporary variable</P>
<P>input tmp 'wait for the user to press enter</P>
</FONT><B><U><FONT SIZE=2></B></U></FONT></TD>
</TR>
</TABLE>

<B><U><FONT SIZE=2><P>&nbsp;</P>
</B></U></FONT><FONT FACE="Courier New" SIZE=2><P>&nbsp;</P>
</FONT><FONT SIZE=2><P>&nbsp;</P>
<LI><A NAME="_Toc509128879"><A NAME="_Toc509393603"><A NAME="_Toc523374392"></FONT><B><FONT FACE="Arial" SIZE=4>Looping : For … Next</A></A></A> </LI>
</B></FONT><FONT SIZE=2><P>The computer is very good at following instructions.  Its ability to do what it is told to do, over and over again, is what makes the computer a valuable tool.  In this chapter we will learn how to instruct a computer to do the same thing several times.  </P>

<P>This ability is called looping.  It is called looping because in the early days of computers programmers drew pictures of their programs before they ever wrote code.  These pictures were called &quot;flow charts.&quot;  In a flow chart a statement in a program was shown as a box.  The next statement was connected to the first by a line with an arrow on it.  If a programmer wanted to repeat a step in the process, they would show it by drawing a line back up to the previous step – forming a loop.  (There is also the story of how paper tape with little holes in it was used to instruct the computer.  To make the computer repeat instructions over and over, the programmer would connect the end of the tape to the beginning – forming a loop.)</P>

<P>In B2C the loop is implemented by the For command.  The For command has three parts: the initialization, the final value, and the (optional) step.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>for [initialization] to [final value] [step]</P>
<P>for i=0 to 3 step 1</P>
<P>    'statements go here</P>
<P>next</P>
</FONT><FONT SIZE=2>
<P>The ‘initialization’ part uses an un-Dim’d variable name (like i) and is initialized to the start value of the loop.  The ‘to’ part declares the last value of the loop and the ‘step’ declares the amount to increment ‘i’ inside the loop.  If the ‘step’ part is omitted &quot;step 1&quot; is assumed.  The word &quot;next&quot; indicates the end of the loop and tells B2C to increment the variable by the step value and to go back to the top of the loop (the statement just after the for).  If the variable has reached the ‘final value’ then processing continues on the statement after the next.</P>

<P>For readability, the statements inside the for loop are indented 3 or 4 spaces.</P>

<P>It is possible to exit a For loop early by executing the "Exit For" command in the middle of the loop.</P>

<B><I><U><P>Historical Note</B></I></U>: The variables i, j, k, l, m, &amp; n are favorite variables for loops.  This is for two reasons.  First, the single letter makes for easier typing as a subscript to an array variable.  Second, in the early days of programming (1960s) there was a language called FORTRAN that had no DIM statement. Instead, all variables were named a-z, and were assumed to be Double (floating point).  Except for the variables i-n, which were integers.  Why i-n?  Because i &amp; n were the first 2 letters of the word &quot;integer&quot;.</P>

<B><U><P>Infinite Loops</P>
</B></U><P>It is possible to get caught in a loop that never exits.  This is known as an infinite loop.  A for loop with a zero step size would create an infinite loop</P>

<P>for i=0 to 0 step 0</P>
<P>   print i</P>
<P>next</P>

<P>The example code above will print a screen ful of zeroes.  To get out of an infinte loop, press the ESC key.</P>
<B><U><P>Example program</B></U>:</P></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch9.b2c" to "C:\…\b2cv5\ch9.b2c".  Then execute the command "build ch9.b2c".  Download the ch9.app file to the cybiko.</FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>With the introduction of loops, our program becomes even simpler.  Now we don't have to declare the number of grades up front. It becomes a variable we get from the user at the start.</P>

</FONT><FONT FACE="Courier New" SIZE=2><P>' chapter 9 example program</P>
<P>' sum and average of n grades</P>
<P>' grades are from 0-100</P>
<P>dim sum as int   'this variable will store the sum of the n grades</P>
<P>dim avg as int   'this variable will store the average of the n grades</P>
<P>dim n as int   ' the number of grades to average</P>

<P>print "How many grades?"</P>
<P>input n</P>
<P>dim grade[n]  as int' an array of n grades</P>

<P> ' ---INPUT ---</P>
<P>for i=0 to n-1                 'get the inputs</P>
<P>    print "Enter grade ", i   ' notice that we indent in loops</P>
<P>    input grade[i]                'get the grades from the student</P>
<P>next</P>

<P>'--- PROCESS ---</P>
<P>' compute the sum and the average</P>
<P>for i=0 to n-1</P>
<P>    sum = sum + grade[i]   'notice we accumulate the sum</P>
<P>next</P>
<P>avg = sum/n                'compute the average</P>

<P>'--- OUTPUT ---</P>
<P>print "The average of your"</P>
<P>print n, " grades is", avg</P>

<P>print "Press &lt;Enter&gt; to continue"</P>
<P>dim tmp as int' a temporary variable</P>
<P>input tmp 'wait for the user to press enter</P>
</FONT><FONT SIZE=2></FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><P>&nbsp;</P>
<P>&nbsp;</P>
</FONT><FONT FACE="Courier New" SIZE=2><P>&nbsp;</P>
<P>&nbsp;</P>
</FONT><FONT SIZE=2><P>&nbsp;</P>
<P>&nbsp;</P>
<LI><A NAME="_Toc509128880"><A NAME="_Toc509393604"><A NAME="_Toc523374393"></FONT><B><FONT FACE="Arial" SIZE=4>Conditionals : If … Then … Else … End If</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>Another thing computers are good at is making unbiased decisions.  In B2C this is implemented with the If statement.  The If statement has a conditional followed by the Then clause:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>if [conditional] then</P>
<P>  'statements</P>
<P>end if</P>

<P>if a &lt; b then</P>
<P>    print "a is smaller"</P>
<P>end if</P>
</FONT><FONT SIZE=2>
<P>This conditional has a left side and a right side with a relational operator in between.  You can compare two variables, or two expressions.  There are 6 relational operations: </P>
<P>&#9;&lt;&#9;less than</P>
<P>&#9;&gt;&#9;greater than</P>
<P>&#9;&lt;=&#9;less than or equal to</P>
<P>&#9;&gt;=&#9;greater than or equal to</P>
<P>&#9;=&#9;equal to</P>
<P>&#9;&lt;&gt;&#9;not equal to</P>

<P>For example:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>if a+1 &lt; b*2 then</P>
<P>    'statements</P>
<P>end if</P>

</FONT><FONT SIZE=2><P>There is also an Else statement, which indicates what to do if the conditional is not met:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>if [conditional] then</P>
<P>    'statements</P>
<P>else</P>
<P>    'else statements</P>
<P>end if</P>

<P>&nbsp;</P>
<P>if a&lt;b then</P>
<P>    print "a is smaller"</P>
<P>else</P>
<P>    print "b is smaller"</P>
<P>end if</P>

</FONT><FONT SIZE=2><P>If you inspect our last example closely – you will see an error in the logic.  The error occurs when a is equal to b.  In this case our example will print "b is smaller" which is of course incorrect.  To correct this we have the Elseif statement.  It works just like the If statement and is executed only when the if part is false.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>&nbsp;</P>
<P>if [conditional] then</P>
<P>    'statement</P>
<P>elseif [conditional] then</P>
<P>    'elseif statements</P>
<P>else</P>
<P>    'else statements</P>
<P>endif</P>

<P>if a&lt;b then</P>
<P>    print "a is smaller"</P>
<P>elseif b&lt;a then</P>
<P>    print "b is smaller"</P>
<P>else</P>
<P>    print "a and b are equal"</P>
<P>end if</P>

</FONT><FONT SIZE=2><P>You may have as many Else if statements as you like, and you may have as many statements in the if/elseif/else clauses as you like.  Again. it is good practice to indent the statements to show which statements belong to which if/elseif/else clauses.</P>

<B><U><P>Combining Conditionals</P>
</B></U><P>The result of the relational operators (&lt;,&gt;,&lt;=,&gt;=,=,&lt;&gt;) is either TRUE or FALSE.  This type of value is called Boolean (named for the mathematician George Boole).  Booleans  are either True or False (one or zero).  These types of results can be combined with the Boolean operators AND and OR.  You can even negate the conditional with the NOT operator.</P>

<P>The And operator results in a TRUE value if BOTH of the inputs are TRUE (and results in a FALSE otherwise).  The Or operator results in a TRUE value if EITHER of the inputs are TRUE.  In B2C, a zero value is FALSE and any other value is considered TRUE.  NOT converts a TRUE result into a FALSE result.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>if a&lt;b and b&lt;c then</P>
<P>    print "b is between a and c"</P>
<P>end if</P>

<P>if a&gt;b or a&gt;c then</P>
<P>    print "a is bigger than either b or c"</P>
<P>end if</P>
</FONT><FONT SIZE=2>
</FONT><FONT FACE="Courier" SIZE=1><P>a=1</P>
<P>b=0</P>
<P>if a and b then</P>
<P>    print "both a and b are true"</P>
<P>end if</P>
</FONT><FONT SIZE=2>
</FONT><FONT FACE="Courier" SIZE=1><P>if a or b then</P>
<P>    print "either a or b is true" </P>
<P>end if</P>
</FONT><B><U><FONT SIZE=2>
<P>Example program</B></U>:</P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch10.b2c" to "C:\…\b2cv5\ch10.b2c".  Then execute the command "build ch10.b2c".  Download the ch10.app file to the cybiko.</FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Conditionals will allow us to assign a letter grade to the input grades and the average</P>
</FONT><FONT FACE="Courier" SIZE=1>
<P>' chapter 10 example program' sum and average of n grades</P>
<P>' grades are from 0-100</P>
<P>dim sum as int   'this variable will store the sum of the n grades</P>
<P>dim avg as int   'this variable will store the average of the n grades</P>
<P>dim n as int   ' the number of grades to average</P>

<P>print "How many grades?"</P>
<P>input n</P>
<P>dim grade[n] as int  ' an array of n grades</P>

<P> ' ---INPUT ---</P>
<P>for i=0 to n-1                 'get the inputs</P>
<P>    print "Enter grade ", i   ' notice that we indent in loops</P>
<P>    input grade[i]                'get the grades from the student</P>
<P>next</P>

<P>'--- PROCESS ---</P>
<P>' compute the sum and the average</P>
<P>for i=0 to n-1</P>
<P>    if grade[i] &gt;=94 then</P>
<P>   &#9;print grade[i], "=A"</P>
<P>    elseif grade[i]&gt;=86 then</P>
<P>&#9;print grade[i],"=B"</P>
<P>    elseif grade[i]&gt;=78 then</P>
<P>&#9;print grade[i], "=C"</P>
<P>    elseif grade[i]&gt;=70 then</P>
<P>&#9;print grade[i], "=D"</P>
<P>    else</P>
<P>&#9;print grade[i], "=F"</P>
<P>    end if</P>
<P>    sum = sum + grade[i]   'notice we accumulate the sum</P>
<P>next</P>
<P>avg = sum/n</P>

<P>'--- OUTPUT ---</P>
<P>print "The average of your", </P>
<P>print n, " grades is ", avg</P>
<P>if avg &gt;=94 then</P>
<P>   &#9;print avg, "=A"</P>
<P>elseif avg&gt;=86 then</P>
<P>        print avg,"=B"</P>
<P>elseif avg&gt;=78 then</P>
<P>&#9;print avg, "=C"</P>
<P>elseif avg&gt;=70 then</P>
<P>&#9;print avg, "=D"</P>
<P>else</P>
<P>&#9;print avg, "=F"</P>
<P>end if</P>

<P>print "Press &lt;Enter&gt; to continue"</P>
<P>dim tmp as int' a temporary variable</P>
<P>input tmp 'wait for the user to press enter</P>
</FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">&nbsp;</TD>
</TR>
</TABLE>

<FONT SIZE=2><LI><A NAME="_Toc509128888"><A NAME="_Toc509393612"><A NAME="_Toc523374394"><A NAME="_Toc509128881"><A NAME="_Toc509393605"></FONT><B><FONT FACE="Arial" SIZE=4>While</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>The While command is another type of looping command.  Like the For command, While executes until a condition is met.  Here is the form of the While command:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>while [conditional]</P>
<P>  'things to do</P>
<P>wend</P>

<P>dim a as int</P>
<P>a=1</P>
<P>while a&lt;10</P>
<P>   print "a=", a</P>
<P>   a=a+1</P>
<P>wend</P>
</FONT><FONT SIZE=2>
<P>The Wend command ends a while loop.</P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch11.b2c" to "C:\…\b2cv5\ch11.b2c".  Then execute the command "build ch11.b2c"  Download the ch11.app file to the cybiko</P>

<P>This example program plays "Hi/Low" – a number game where the user has to guess the computer's random number</P>

</FONT><FONT FACE="Courier" SIZE=1><P>'Hi Low Number Guesser
<P>dim guess as int
<P>dim tries as int
<P>dim number as int
<P>tries=0</P>
<P>number = rnd(100)+1</P>
<P>while(guess &lt;&gt; number)</P>
<P>    print "enter your guess"</P>
<P>    input guess</P>
<P>    if guess &lt; number then</P>
<P>        print guess, " is too low"</P>
<P>        tries=tries+1</P>
<P>    elseif guess &gt; number then</P>
<P>        print guess, " is too high"</P>
<P>        tries=tries+1</P>
<P>    end if</P>
<P>wend  </P>
<P>print "You guessed it."</P>
<P>print "The number was ", number</P>
<P>print "It took you ", tries, " tries"</P>
<P>dim a as int</P>
<P>input a</P>
</FONT><B><U><FONT SIZE=2></B></U></FONT></TD>
</TR>
</TABLE>

<B><U><FONT SIZE=2><LI><A NAME="_Toc523374395"></U></FONT><FONT FACE="Arial" SIZE=4>Functions &amp; Subroutines</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>You may have noticed in the last example program that we had to create two sets of If/then/else/endif statements to handle the conversion of a grade into a letter grade.  This duplication of code is a bad practice.  If there are several of these blocks of code, and we find a bug in one of them, we have to update all of them.  For example, what if, in our example program, we decided that the grade cutoffs were 90, 80, 70, and 60?  We would have to make the modification in each of the two blocks of If statements.  This could lead to extra work, or even errors in our program if we forget to make the same changes in both places.</P>

<P>Fortunately, B2C has a concept called a Subroutine.  In the old days, a program was called a routine.  A Subroutine therefore is a routine within a routine.  You can declare a subroutine with the word Sub:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Sub [routine-name] [(var as type, var as type, …)]</P>
<P>   'statements</P>
<P>End Sub</P>

</FONT><FONT SIZE=2><P>The Parameters portion of the Subroutine is a list of variables (declared much in the same way as the Dim statement).  These variables are the inputs to the subroutine.  Once declared, a subroutine can be called (or invoked) with the Call statement</P>

</FONT><FONT FACE="Courier" SIZE=1><P>[Call] routine-name [(parameters)]</P>
</FONT><FONT SIZE=2>
<P>The keyword Call is optional.</P>

<P>Here is an example using our grade-averaging program:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Sub letterGrade(grade as int)</P>
<P>    if grade &gt;=94 then</P>
<P>   &#9;print grade, "=A"</P>
<P>    elseif grade&gt;=86 then</P>
<P>print grade,"=B"</P>
<P>    elseif grade&gt;=80 then</P>
<P>&#9;print grade, "=C"</P>
<P>    elseif grade&gt;=74 then</P>
<P>&#9;print grade, "=D"</P>
<P>    else</P>
<P>&#9;print grade, "=F"</P>
<P>    end if</P>
<P>End Sub</P>

</FONT><FONT SIZE=2><P>You may exit a Subroutine early by executing the command Exit Sub.</P>
</FONT><FONT FACE="Courier" SIZE=1>
</FONT><FONT SIZE=2><P>Another way to solve this problem is with a Function.  A function is like a subroutine, but it returns a value.  In our example a function could return the letter grade, given the numeric grade.  To return a value, you set the name of the function to the value, just like an assignment statement.  As with the Subroutine, you may exit a function early with the Exit Function command.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Function letterGrade(grade as int) as char</P>
<P>    if grade &gt;=94 then</P>
<P>   &#9;letterGrade = 65 ‘ascii characters but we didn’t teach it</P>
<P>    elseif grade&gt;=88 then</P>
<P>letterGrade = 66</P>
<P>    elseif grade&gt;=80 then</P>
<P>&#9;letterGrade = 67</P>
<P>    elseif grade&gt;=74 then</P>
<P>&#9;letterGrade = 68</P>
<P>    else</P>
<P>&#9;letterGrade = 70</P>
<P>    end if</P>
<P>End Function</P>
</FONT><FONT SIZE=2>
<B><U><P>Example program</B></U>:</P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch12.b2c" to "C:\…\b2cv5\ch12.b2c".  Then execute the command "build ch12.bld".  Download the ch12.app file to the cybiko</P>

<P>Subroutines allow us to simplify our program by taking similar sections of code and condensing them into one subroutine.</FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT FACE="Courier" SIZE=1><P>' chapter 11 example program' sum and average of n grades' grades are from 0-100Sub letterGrade(grade as double)    if grade &gt;=94 then   &#9;print grade, "=A"    elseif grade&gt;=86 then        print grade,"=B"    elseif grade&gt;=80 then</P>
<P>&#9;print grade, "=C"</P>
<P>    elseif grade&gt;=74 then</P>
<P>&#9;print grade, "=D"</P>
<P>    else</P>
<P>&#9;print grade, "=F"</P>
<P>    end if</P>
<P>End Sub</P>

<P>dim sum as int   'this variable will store the sum of the n grades</P>
<P>dim avg as int   'this variable will store the average of the n grades</P>
<P>dim n as int   ' the number of grades to average</P>

<P>print "How many grades?"</P>
<P>input n</P>
<P>dim grade[n] as int ' an array of n grades</P>

<P> ' ---INPUT ---</P>
<P>for i=0 to n-1                 'get the inputs</P>
<P>    print "Enter grade ", i   ' notice that we indent in loops</P>
<P>    input grade[i]                'get the grades from the student</P>
<P>next</P>

<P>'--- PROCESS ---</P>
<P>' compute the sum and the average</P>
<P>for i=0 to n-1</P>
<P>    print "Grade ", i, ": ", grade[i]</P>
<P>    call letterGrade(grade[i])</P>
<P>    sum = sum + grade[i]   'notice we accumulate the sum</P>
<P>next</P>
<P>avg = sum/n</P>

<P>'--- OUTPUT ---</P>
<P>print "The average of your"</P>
<P>print n, " grades is ", avg</P>
<P>call letterGrade(avg)</P>

<P>print "Press &lt;Enter&gt; to continue"</P>
<P>dim tmp as int' a temporary variable</P>
<P>input tmp 'wait for the user to press enter</P>
</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><P>&nbsp;</P>
<P>&nbsp;</P>
<LI><A NAME="_Toc509128883"><A NAME="_Toc509393607"><A NAME="_Toc523374396"></FONT><B><FONT FACE="Arial" SIZE=4>Math Operations</LI>
</B></FONT><FONT SIZE=2><P>B2C supports a host of math Operations.  The ordinary operations exist (+, -, *, /,MOD) with which you can do math calculations.  The Order of Operations applies (multiplication and division first, then addition and subtraction) and parentheses are used to change the order of operations. (a=(a+b)*c).</P>

<P>B2C currently supports only integer arithmetic.</P>
</FONT><FONT FACE="Courier" SIZE=1>
<P>dim a as int</P>
<P>a = 5 + 1</P>
<P>print "the answer is ", a</P>
<P>&gt; the answer is 6</P>

</FONT><B><U><FONT SIZE=2><P>Random Numbers</P>
</B></U><P>Random numbers are numbers whose value is unpredictable.  You can get a random number with the Rnd() function:</P>

<P ALIGN="CENTER">Rnd(x)</P>
<P ALIGN="CENTER"></P>
<P>Where 'x' is any number.  Rnd(x) will return a number from 0 to 'x' inclusive.</P>

<P>x=rnd(5)+1  'return a number from 1 to 6, like a 6-sided die</P>
<P>&nbsp;</P>
<a name=simple_graphics>
</FONT><B><FONT FACE="Arial" SIZE=4><LI>Simple Graphics</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>The Cybiko is a very capable graphics machine. In this section we cover the non-bitmapped graphics commands.  B2C has 5 basic graphic commands with which to draw on the screen.  </P>

<B><U><P>Cls – Clear screen</P>
</B></U><P>Cls stands for Clear Screen.  It will turn all pixels on the display to the background color (usually white).  It will also erase all text on the screen.  Cls takes no parameters</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Cls</P>
</FONT><FONT SIZE=2>
<B><U><P>Paper – set the color of the background</P>
</B></U><P>B2C has a concept of a foreground color and a background color.  The background color is set with the Paper command.  Whenever you do a Cls – the entire display is set to the color defined by the Paper command.  There are 4 colors to chose from.  Color 0 is white.  Color 1 is light grey.  Color 2 is dark grey.  Color 3 is black.  There are constants defined for your use:</P>
<P>&#9;0 – White</P>
<P>&#9;1 – LtGrey</P>
<P>&#9;2 -  DkGrey</P>
<P>&#9;3 - Black</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Paper Black ' set the background color to black</P>
<P>Cls ' color the screen with the background color</P>
</FONT><FONT SIZE=2>
<B><U><P>Ink – set the color of the foreground</P>
</B></U><P>B2C's foreground color is used to draw text (Print) and lines (Line). There are constants defined for your use:</P>
<P>&#9;0 – White</P>
<P>&#9;1 – LtGrey</P>
<P>&#9;2 -  DkGrey</P>
<P>&#9;3 - Black</P>

<P>&nbsp;</P>
</FONT><FONT FACE="Courier" SIZE=1><P>Paper White ' set the background to White</P>
<P>Ink Black ' set the foreground to black</P>
<P>Cls ' clear the background</P>
<P>line -80, -50, 80, 50 ' draw a diagonal line</P>
</FONT><FONT SIZE=2>
<B><U><P>Line – draw a line on the screen</P>
</B></U><P>The B2C display area is an X/Y coordinate system.  You place a line on the screen by telling B2C to position the cursor at a horizontal (X) coordinate and a vertical (Y) coordinate.  The valid values for the screen coordinates are –80 to 79 in the X (horizontal) direction, and –50 to 49 in the Y (vertical) direction.  You may specify values as large as +/- 20,000 in either direction, but only the pixels, which are in the screen coordinates (-80 to 79 and –50 to 49), will be displayed.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Paper White ' set the background to White</P>
<P>Ink Black ' set the foreground to black</P>
<P>Cls ' clear the background</P>
<P>line -80, -50, 80, 50 ' draw a diagonal line</P>
</FONT><FONT SIZE=2>
<P>It is possible to use a different coordinate system.  The so-called 'C' coordinate system runs from 0 to 159 in the X direction and from 0 to 99 in the Y direction.  You can switch to this system by placing </P>

<P ALIGN="CENTER">OPTION C_COORDS</P>
<P ALIGN="CENTER"></P>
<P>at the top of your program.</P>

<B><U><P>Point – draw a single pixel on the screen</P>
</B></U><P>Draw a single pixel at the x/y coordinates (see Line, above).</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Paper White ' set the background to White</P>
<P>Ink Black ' set the foreground to black</P>
<P>Cls ' clear the background</P>
<P>Point 0, 0 ' draw a dot in the center</P>
</FONT><FONT SIZE=2>
<P>&nbsp;</P>
<B><U><P>Example Program</P></B></U></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch13.b2c" to "C:\…\b2cv5\ch13.b2c".  Then execute the command "build ch13.bld".  Download the ch13.app file to the cybiko.</P>

<P>This program is like the old Microsoft Windows screen saver.  A set of bouncing lines chase after each other.</P>
</FONT><FONT FACE="Courier" SIZE=1>
<P>'chapter 13'qix line drawing'requires B2C-2'see below for B2C-1</P>

<P>dim n as int</P>
<P>print "Number of lines"</P>
<P>input n</P>

<P>dim n1 as int</P>
<P>dim n2 as int</P>
<P>n1=n-1</P>
<P>n2=n1-1</P>

<P>dim x0[n] as int</P>
<P>dim y0[n] as int</P>
<P>dim x1[n] as int</P>
<P>dim y1[n] as int</P>
<P>dim dx0 as int</P>
<P>dim dy0 as int</P>
<P>dim dx1 as int</P>
<P>dim dy1 as int</P>
<P>dim seed as int</P>

<P>sub newdirection(j as int)</P>
<P>  if (x0[j] &lt; -80 or x0[j] &gt; 80) then</P>
<P>    dx0 = -dx0</P>
<P>  end if</P>
<P>  if (x1[j] &lt; -80 or x1[j] &gt; 80) then</P>
<P>    dx1 = -dx1</P>
<P>  end if</P>
<P>  if (y0[j] &lt; -43 or y0[j] &gt; 43) then</P>
<P>    dy0 = -dy0</P>
<P>  end if</P>
<P>  if (y1[j] &lt; -80 or y1[j] &gt; 80) then</P>
<P>    dy1 = -dy1</P>
<P>  end if</P>
<P>end sub</P>

<P>' for B2C1 do the following</P>
<P>' dx0=-3</P>
<P>' dx1=-1</P>
<P>' dy0=1</P>
<P>' dy1=2</P>
<P>'and remove the while loops...</P>

<P>' select random motion offsets</P>
<P>while dx0=0</P>
<P>  dx0 = 4-rnd(9)</P>
<P>wend</P>
<P>while dx1=0</P>
<P>  dx1 = 4-rnd(9)</P>
<P>wend</P>
<P>while dy0=0</P>
<P>  dy0 = 4-rnd(9)</P>
<P>wend</P>
<P>while dy1=0</P>
<P>  dy1 = 4-rnd(9)</P>
<P>wend</P>

<P>'select initial random line</P>
<P>x0[0] = rnd(80)</P>
<P>x1[0] = rnd(80)</P>
<P>y0[0] = rnd(43)</P>
<P>y1[0] = rnd(43)</P>
<P>line x0[0], y0[0], x1[0], y1[0]</P>

<P>cls</P>

<P>'fill up queue with trailing lines and print them</P>
<P>for i=1 to n-1</P>
<P>  x0[i] = x0[i-1] + dx0</P>
<P>  x1[i] = x0[i-1] + dx1</P>
<P>  y0[i] = y0[i-1] + dy0</P>
<P>  y1[i] = y1[i-1] + dy1</P>
<P>  line x0[i], y0[i], x1[i], y1[i]</P>
<P>  newdirection(i)</P>
<P>next</P>

<P>for i=0 to 1 step 0</P>
<P>  ink 0</P>
<P>  line x0[0], y0[0], x1[0], y1[0]</P>
<P>  ink 3</P>
<P>  for j=1 to n-1 </P>
<P>    x0[j-1] = x0[j]</P>
<P>    x1[j-1] = x1[j]</P>
<P>    y0[j-1] = y0[j]</P>
<P>    y1[j-1] = y1[j]</P>
<P>  next</P>
<P>  x0[n1] = x0[n2] + dx0</P>
<P>  y0[n1] = y0[n2] + dy0</P>
<P>  x1[n1] = x1[n2] + dx1</P>
<P>  y1[n1] = y1[n2] + dy1</P>
<P>  line x0[n1], y0[n1], x1[n1], y1[n1]</P>
<P>  newdirection(n1)</P>
<P>next</P>
</FONT><FONT SIZE=2></FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><LI><A NAME="_Toc509128892"><A NAME="_Toc509393616"><A NAME="_Toc523374397"><A NAME="_Toc509128884"><A NAME="_Toc509393608"></FONT><B><FONT FACE="Arial" SIZE=4>Printxy</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>Printxy is like a combination of the Point function and the Print function.  Printxy allows you to position text anywhere on the Cybiko screen.  The format of the Printxy command is:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>printxy x,y, value [, value…]</P>

</FONT><FONT SIZE=2><P>The text string is composed of the values of the variables after the Y coordinate.  The text string is printed at the coordinates X, Y.  The values will be painted with the X/Y coordinate in the upper left corner of the text.  The values can be any collection of comma-separated variables or literals – just as in Print.  </P>

<P>Our Example Program will print your name on the display and bounce it off the edges of the screen.  Try using shorter names to see how the performance improves.</P>
</FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch14.b2c" to "C:\…\b2cv5\ch14.b2c".  Then execute the command "build ch14.b2c".  Download the ch14.app file to the cybiko.</P>

</FONT><FONT FACE="Courier New" SIZE=2>
<P>dim name[32] as char'your name
<P>dim x as int        'x coordinate of your name
<p>dim y as int        'y coordinate of your name
<p>dim dx as int      'direction the name moves in x coord
<p>dim dy as int      'direction the name moves in y coord</P>
<P>input "Enter your name ", name</P>
<P>x = 80-rnd(160)  'random x starting point</P>
<P>y = 43-rnd(86)     'random y starting point</P>
<P>dx = -1  ' moving to the left</P>
<P>dy = -1  'moving up</P>
<P>while 1  'do forever or until ESC is pressed</P>
<P>    cls                          'clear the screen</P>
<P>    printxy x,y, name   'print the name onscreen</P>
<P>    x=x+dx   'move x dir</P>
<P>    y=y+dy   'move y dir</P>
<P>    if x&gt;80 then</P>
<P>      dx=-dx    ' bounce off right side</P>
<P>    end if</P>
<P>    if x&lt;-80 then</P>
<P>      dx=-dx   ' bounce off left side</P>
<P>    end if</P>
<P>    if y&gt;30 then</P>
<P>      dy=-dy   'bounce off bottom</P>
<P>    end if</P>
<P>    if y&lt;-43 then</P>
<P>      dy=-dy  'bounce off top</P>
<P>    end if</P>
<P>wend</P>
</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><LI><A NAME="_Toc509128885"><A NAME="_Toc509393609"><A NAME="_Toc523374399"></A></A></FONT><B><FONT FACE="Arial" SIZE=4>Miscellaneous</A></A></A></LI>
</FONT><U><FONT SIZE=2><P>Beep</P>
</B></U><P>B2C includes a simple command for making sound.  It is different from the beep command in CyBasic2.  The Beep command causes the speaker to make a single tone.  Beep takes values from 1 (low-pitch) to 63 (high-pitch).  Beep 0 will result in silence.</P>

<B><U><P>Wait</P>
</B></U><P>There are 2 ways to create a delay in B2C.  One way is to write a For loop which does nothing:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>for i=0 to 100</P>
<P>next i</P>
</FONT><FONT SIZE=2>
<P>This is not recommended.  It is sloppy coding and will be unpredictable in the event that Cybiko, Inc releases a newer, faster Cybiko.  The alternative is the Wait command.  The parameter is a number of tenths of seconds to wait.  So, to wait one second:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>wait 10</P>

</FONT><B><U><FONT SIZE=2><P>Key</P>
</B></U><P>The Key command has two modes.  In the first, it acts like a variable.  </P>

<P ALIGN="CENTER">x = key</P>

<P>It returns the value of the last key pressed on the keypad.  This is very useful for writing interactive games because it does not stop the action like the Input statement does.  At the end of this chapter is a table of all the values the Key variable can return.  To use the table, find the key you want to check against and add the values in the corresponding row and column.  For example, the letter 'a' is 90+7=97.</P>

<P>The other format for the key command is as a function to check a single key:</P>

<P ALIGN="CENTER">x = key(#KEY_ENTER)</P>

<P>In this mode you specify the key you want to check and key() returns True or False.  Here is a listing of some of the constants you may use (note, these must be in uppercase)…</P>
<P>Use the #defined values or numbers from the table below</P>
<P>#KEY_A - #KEY_Z</P>
<P>#KEY_0 - #KEY_9</P>
<P>#KEY_ENTER, #KEY_SELECT, #KEY_TAB, #KEY_INS, #KEY_DEL</P>
<P>#KEY_UP, #KEY_DOWN, #KEY_LEFT, #KEY_RIGHT</P>
</DIR>
</DIR>
Use the table below to compute the number of a key.  Find the key you wish to sample
and add the row and column numbers.
</FONT>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000" CELLPADDING=7 WIDTH=590>
<TR><TD WIDTH="9%" VALIGN="TOP" BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">Key Values</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">0</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">1</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">2</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">3</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">4</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">5</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">6</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">7</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">8</B></FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0 BGCOLOR="#000000"><B><FONT SIZE=2 color=white><P ALIGN="CENTER">9</B></FONT></TD>
</TR>
<TR><TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">30</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">space</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">quote</FONT></TD>
</TR>
<TR><TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">40</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">comma</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">dash</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">period</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">/</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">0</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">1</FONT></TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">50</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">2</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">3</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">4</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">5</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">6</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">7</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">8</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">9</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">semi-colon</FONT></TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">60</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">=</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP">&nbsp;</TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">90</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">(</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">\</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">)</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">back- quote</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">a</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">b</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">c</FONT></TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">100</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">d</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">e</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">f</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">g</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">h</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">i</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">j</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">k</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">l</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">m</FONT></TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">110</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">n</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">o</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">p</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">q</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">r</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">s</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">t</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">u</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">v</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">w</FONT></TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">120</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">x</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">y</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">z</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP">&nbsp;</TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">260</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">left-arrow</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">up-arrow</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">right-arrow</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">down-arrow</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">ins</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP"><FONT SIZE=2><P ALIGN="CENTER">del</FONT></TD>
</TR>
<TR><TD WIDTH="10%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">270</FONT></TD>
<TD WIDTH="8%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">tab</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">select</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">enter</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">bspc</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">shift</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0><FONT SIZE=2><P ALIGN="CENTER">fn</FONT></TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP" COLSPAN=0>&nbsp;</TD>
<TD WIDTH="9%" VALIGN="TOP">&nbsp;</TD>
</TR>
</TABLE>
</CENTER></P>

<FONT SIZE=2></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch16.b2c" to "C:\…\b2cv5\ch16.b2c".  Then execute the command &quot;build ch16.b2c&quot;  Download the ch16.app file to the cybiko.</P>

<P>Here is an example of a program that moves a dot left or right:</P>

</FONT><FONT FACE="Courier" SIZE=1><P><A NAME="_Toc509128886"><A NAME="_Toc509393610">
<p>dim x as int    'horizontal component of the dot
<p>dim y as int    'vertical component of the dot</P>
<P>dim z as int  'the key pressed</P>
<P>x=0    'initial x position of the dot</P>
<P>y=0    'initial y position of the dot</P>
<P>cls     'clear screen</P>
<P>point x,y  'show the dot</P>
<P>for i=0 to 1 step 0  'loop forever</P>
<P>z = key              'save off the key because it changes</P>
<P>  if z = 264 then    'left key</P>
<P>    ink 0</P>
<P>    point x,y</P>
<P>    ink 3</P>
<P>    x=x-1            'move left</P>
<P>    point x,y        'print new dot</P>
<P>  elseif z = 266 then' right key</P>
<P>    ink 0</P>
<P>    point x,y</P>
<P>    ink 3</P>
<P>    x=x+1            ' move right</P>
<P>    point x,y        ' print new dot</P>
<P>  end if</P>
<P>next 'end of forever loop</P>
</FONT><B><U><FONT SIZE=2><P></A></A></B></U></FONT></TD>
</TR>
</TABLE>

<B><U><FONT SIZE=2><LI><A NAME="_Toc509128893"><A NAME="_Toc509393617"><A NAME="_Toc523374400"></U></FONT><FONT FACE="Arial" SIZE=4>String Manipulation (Right/Mid)</A></A></A></LI>
</B></FONT>
<FONT SIZE=2><P>The B2C language offers 3 ways to assign one string to another:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim a[32] as char</P>
<P>dim b[32] as char</P>
<P>:</P>
<P>a = b  'the easy way</P>
</FONT><FONT SIZE=2>
<P>Also, there are 2 statements for copying strings.  These are the Mid statement (used for copying the middle of one string to another) and the Right statement (used for copying the right side of a string).  The Mid and Right statements takes the form:</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Mid destination, source, start [, length]   'the length is optional</P>
<P>Right destination, source, length</P>
</FONT><FONT SIZE=2>
<P>For the Mid statement, the 'destination' is a dimensioned string where the result will be stored.  The contents of the original string will be discarded.  The 'source' is a dimensioned string that holds data to be copied to the destination.  The 'start' is a numerical value (variable, constant, or expression) indicating the first character from the 'source' to copy (remember, in B2C we count starting at zero).  The optional length indicates how many bytes to copy.  If the length is omitted, or if it is larger than the number of characters in the source array, the entire source array is copied.</P>

<P>The Right statement has similar parameters.  The destination is the dimensioned string to copy into, and the source is the string to copy from.  The length parameter is required and indicates how many letters from the RIGHT of the source string to copy into the destination.</P>

<P>In our example program we will learn to speak pig latin.  It is not perfect. Can you think of ways to improve it?</P>

<B><U><P>Example Program</P></B></U></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Copy the file "c:\…\b2cv5\tutorial\ch18.b2c" to "C:\…\b2cv5\ch18.b2c".  Then execute the command "build ch18.b2c"  Download the ch18.app file to the cybiko</P>
</FONT><FONT FACE="Courier New" SIZE=2>
<P>'ch 18
<p>dim word[32] as char     ' the word to convert
<p>dim ordway[32] as char ' the resultant word</P>
<P>dim len as int                 ' the length of ordway</P>

<P>input "enter your word ", word  'input</P>
<P>mid ordway, word, 1                 'copy the word but not the 1st char</P>

<P>len = 0</P>
<P>for i=0 to 31                              'get the ordway length so we can add 'ay'</P>
<P>    if ordway[i] = 0 and len = 0 then</P>
<P>    &#9;len = i</P>
<P>    end if</P>
<P>next</P>
<P>'print len</P>
<P>ordway[len] = word[0]    ' append the first letter of word to the end of ordway</P>
<P>ordway[len+1] = 97        ' append 'a'</P>
<P>ordway[len+2] = 121      ' append 'y'</P>
<P>ordway[len+3] = 0          ' null terminator, very important</P>

<P>print word, "=", ordway   ' print results</P>
<P>input word ' wait for Enter</P>
</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2><LI><A NAME="_Toc509128894"><A NAME="_Toc509393618"></FONT><B><FONT FACE="Arial" SIZE=4> <A NAME="_Toc509128882"><A NAME="_Toc509393606"><A NAME="_Toc523374401">File I/O</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>Files on the Cybiko are stored in the non-volatile memory.  They are like files on the PC in that they have filenames and they hold data.  They even have attributes (like file size), but these attributes are not accessible from B2C.</P>

<B><U><P>Open a file</P>
</B></U><P>Before a file can be accessed, it must be opened.  In B2C, opening a file is accomplished with the Open command.  The Open command has three parts – the pathname, the mode, and the filenumber.  The mode is optional.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>open <I>pathname</I> [for <I>mode</I>] as <I>filenumber</P>
</I>
</FONT><FONT SIZE=2><P>The pathname is the name of the file.  This can be either a literal string ("filename.dat") or a variable which has been Dim'd previously.  The mode is optional and is one of Read, Write, or Append.  If left blank, the mode defaults to Read.  When a file is opened for Read access the program may only read data from the file, no writing is permitted.  Likewise, when a file is opened for Write, no data may be read from the file, only written.  If the file already exists, the data in the file is erased. When a file is opened for Append, it is opened for write, but if the file exists, instead of destroying the data, the file pointer is positioned at the end of the file and writing begins there.  Finally, the filenumber is a number from 0 to 7. It is used to identify the file for the rest of the program.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Dim fname[32] as char</P>

<P>print "Enter fname"</P>
<P>input fname</P>
<P>open fname for read as 1</P>
</FONT><FONT SIZE=2>
<P>It is possible to open the same file for Read in more than one place in the program.  But for Write and Append modes you must first close the file before reopening it.</P>

<B><U><P>Close a file</P>
</B></U><P>When you are done with a file, you must close it.  The Close command takes as its only parameter the filenumber…</P>

</FONT><FONT FACE="Courier" SIZE=1><P>open "filename.dat" as 1</P>
<P> 'do some stuff</P>
<P>close 1</P>
</FONT><FONT SIZE=2>
<B><U><P>Writing to a File : Put</P>
</B></U><P>The Put statement writes data from a variable to a file.  It has three parts: filenumber, bytepos, and variable</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Put filenumber, [bytepos][, variable]</P>
</FONT><FONT SIZE=2>
<P>The Put command keeps the concept of the file position.  Each time data is written to the file the file position is incremented by the size of the variable in bytes.  In this way, you can accurately control the data being written to the file.  The first byte in the file is byte 0, the next is byte 1, etc…</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim foo as int</P>
<P>open "filename.dat" for write as 1</P>
<P>put 1, 0, foo  ' write two bytes at the beginning of the file</P>
<P>put 1, 100, foo ' write the same bytes at the 100<SUP>th</SUP> byte of the file</P>
</FONT><FONT SIZE=2>
<P>Leaving out the variable name positions the file pointer, but does not write</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim foo as int</P>
<P>open "filename.dat" for write as 1</P>
<P>put 1, 0  ' position file pointer to the beginning of the file</P>
</FONT><FONT SIZE=2>
<P>To write to the current file pointer position without specifying the value, leave out the bytepos (but remember to include the delimiting commas).  Unfortunately string variables and other arrays cannot be written with the Put command.  You must create a loop and write each element individually.</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim a as double</P>
<P>open "filename.dat for write as 1</P>
<P>input a</P>
<P>put 1,,a ' write 8 bytes to the current location</P>
</FONT><FONT SIZE=2>
<B><U><P>Reading from a file : Get</P>
</B></U><P>The Get statement reads data from a file into a variable.  It has three parts: filenumber, bytepos, and variable</P>

</FONT><FONT FACE="Courier" SIZE=1><P>Get filenumber, [bytepos][, variable]</P>
</FONT><FONT SIZE=2>
<P>The Get command keeps the concept of the file position.  Each time data is read from the file the file position is incremented by the size of the variable in bytes.  In this way, you can accurately control the data being read from the file.  The first byte in the file is byte 0, the next is byte 1, etc…</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim foo as int</P>
<P>open "filename.dat" for read as 1</P>
<P>get 1, 0, foo  ' read two bytes from the beginning of the file</P>
<P>get 1, 100, foo ' read two different bytes from the 100<SUP>th</SUP> byte of the file</P>
</FONT><FONT SIZE=2>
<P>Leaving out the variable name positions the file pointer, but does not read</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim foo as int</P>
<P>open "filename.dat" for read as 1</P>
<P>get 1, 0  ' position file pointer to the beginning of the file</P>
</FONT><FONT SIZE=2>
<P>To read from the current file pointer position without specifying the value, leave out the bytepos (but remember to include the delimiting commas).</P>

</FONT><FONT FACE="Courier" SIZE=1><P>dim a as double</P>
<P>open "filename.dat for read as 1</P>
<P>get 1,,a ' read 8 bytes from the current location</P>
<P>print a</P>
</FONT><FONT SIZE=2>
<B><U><P>Printing to the file : Print #</P>
</B></U><P>Printing to a file is possible with the print statement, which you are already familiar with.  Just add a "#n" where n is the filenumber.  This is an easy way to create text files.  <I>Strangely, there is no corresponding Input # command for reading data.</P>
</I>
</FONT><FONT FACE="Courier" SIZE=1><P>dim a[10] as char</P>
<P>input "your name", a</P>
<P>open "filename.txt" for write as 1</P>
<P>print #1, a</P>
<P>close 1</P>
</FONT><FONT SIZE=2><P>&nbsp;</P>
<LI><A NAME="_Toc523374402"></FONT><B><FONT FACE="Arial" SIZE=4>Role Playing Games</A></A></A></LI>
</B></FONT><FONT SIZE=2><P>The programs that are the most fun to write are games.  Graphic games (like Super Mario Brothers) are complex programs requiring bitmapped graphics, which is covered in the guide "BitMap.doc".  Other graphic games (like tic-tac-toe) are possible, but text-based games are a good starting point.</P>

<P>B2C is well suited to writing all-text role-playing games (RPGs).  A role-playing game is one where you act as a character in a world created by the computer.  You can interact with objects in that world and move from place to place.  I will present a simple role-playing game using a generic approach.  There are many ways to write RPGs, so you should experiment and find the one that makes most sense to you.</P>

<P>The first step in creating a RPG is deciding what your universe will be like.  Is your setting in outer space?  Or the deep sea?  What is your experience level? Are you an expert spy? Or a novice cowboy?  What is your goal in the adventure?  Are you trying to get to the end of a maze? Or are you attempting to collect all the Dragon Balls?  Regardless of the subject matter, a good RPG tells a story, and the more detailed your descriptions of the adventure, the more interested your user will be and the more exciting your game will be.</P>

<P>Once you have decided on a universe, make a map of the universe.  Make a box for each room and a line with an arrow showing how to go from one room to the next.  Keep it down to 5-10.  Make a description for each room.  Make a list of objects and decide where in universe these objects reside.  Make a description for each object.  Make a list of commands, like "north" to go north and "eat" to eat food.</P>

<P>The next step is a technical one.  How do you get your inputs from the user?  Will you list their options and have them input a number selecting what to do? Or will you have them input text strings and discover what commands work best.  </P>
<P>&nbsp;</P>

<LI><A NAME="_Toc509128895"><A NAME="_Toc509393619"><A NAME="_Toc523374403"></FONT><B><I><FONT FACE="Arial">The TARDIS Adventure</A></A></A></LI></OL>
</OL>

</B></I></FONT><FONT SIZE=2><P>This RPG is located in the TARDIS.  It stands for Time and Relative Dimensions in Space.  The RPG is based on the British TV Series "Dr. Who".  The TARDIS is "dimensionally transcendental" which simply means that it is larger on the inside than on the outside.  While the TARDIS is about the size of a telephone booth, it has many chambers inside.  The goal of our game will be to enter the TARDIS, find the sonic screwdriver, and exit.</P>

<P>In this game each room is a separate Function.  When you enter the function a description of the room is printed. When the function exits, it returns the number of the next room to go to.  This offers our program modularity.  Rather than a linear adventure that runs from the top of the program to the bottom, the user can wander from room to room and even get caught in a trap between rooms.</P>
<P> </P>
<P>There are several tricks in this program.  One trick is that the return value from each room is an integer describing the next room to visit.  Using this method you can rewrite the adventure by changing descriptions and the return rooms.  Another trick is "parsing".  I create a variable with the value of the lettername of that variable.  (eg: a=97).  When I parse I check each letter in the "verb" against the variable.  So, for "eat" I check verb[0]=e and verb[1]=a and verb[2]=t as well as verb[3]=0 (null terminator).  </P>

<P>I allow you to carry 2 objects (one in each hand).  And you can drop only 1 object in each room.  The only commands are :</P></FONT>
<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000080" CELLPADDING=7 WIDTH=559>
<TR><TD WIDTH="14%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT SIZE=2 COLOR="#ffffff"><P>Command</B></FONT></TD>
<TD WIDTH="19%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT SIZE=2 COLOR="#ffffff"><P>Meaning</B></FONT></TD>
<TD WIDTH="67%" VALIGN="TOP" BGCOLOR="#000080">
<B><FONT SIZE=2 COLOR="#ffffff"><P>Description</B></FONT></TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>n</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>go north</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">&nbsp;</TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>e</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>go east</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">&nbsp;</TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>s</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>go south</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">&nbsp;</TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>w</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>go west</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">&nbsp;</TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>I</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>Inventory</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">
<FONT SIZE=2><P>Lists all the objects you are carrying</FONT></TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>eat</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>eat something</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">
<FONT SIZE=2><P>increase your energy</FONT></TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>take</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>take something</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">
<FONT SIZE=2><P>move an object from right hand to left hand and pick up something in your right hand. do nothing if hands full</FONT></TD>
</TR>
<TR><TD WIDTH="14%" VALIGN="TOP">
<FONT SIZE=2><P>drop</FONT></TD>
<TD WIDTH="19%" VALIGN="TOP">
<FONT SIZE=2><P>drop something</FONT></TD>
<TD WIDTH="67%" VALIGN="TOP">
<FONT SIZE=2><P>drop something from your left hand move other object from right hand to left hand. cannot drop if room is full</FONT></TD>
</TR>
</TABLE>

<FONT SIZE=2></FONT>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=590>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<B><FONT FACE="Arial" SIZE=2><P ALIGN="CENTER">DO THIS</B></FONT></TD>
</TR>
<TR><TD VALIGN="TOP" BGCOLOR="#ffffff">
<FONT SIZE=2><P>Execute the command "build tardis.bld".  Download the tardis.app file to the cybiko.</FONT></TD>
</TR>
</TABLE>
