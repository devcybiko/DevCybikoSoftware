<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Part 4 - Playfields as Data Files</TITLE>
</HEAD>
<BODY>

<B><FONT FACE="Arial" SIZE=5><P ALIGN="CENTER">Playfield Graphics Tutorial</P>
<P ALIGN="CENTER">Part 4 – Playfields as Data Files</P>
</B></FONT><FONT SIZE=2><P ALIGN="CENTER">by Greg Smith</P>
</FONT><B><FONT FACE="Arial" SIZE=4><P>Introduction:</P>
</B></FONT><FONT SIZE=2><P>In Part-1 we learned how to create a 480x300-pixel playfield and move a car around.  In part two, we replaced the car with an animated lemming.  Part-3 of the Playfield Graphics Tutorial introduced the concept of Background Collision Detection.  Part-4 demonstrates how to put the collision data into a file.</P>

<P>This step by itself does not appear that significant, but it is a stepping stone to bigger things.  In particular, this is a step towards having multiple playfields in a single program.  A later tutorial will demonstrate how to use this feature to include multiple playfields.</P>
<P>&nbsp;</P>
</FONT><B><FONT FACE="Arial" SIZE=4><P>The Collision Table:</P>
</B></FONT><FONT SIZE=2><P>Remember that the Collision Table is a two-dimensional array of characters.  It is 30x30 characters – just 900 bytes.  Each element of the array represents a 16x10-pixel region on the playfield.  If the array element has an ‘x’ in it, then the lemming is allowed to walk on that part of the playfield.  If the array element has a ‘.’ in it, the lemming is not allowed to walk there.</P>

<P>In Part-3 we used explicit assignment statements to set up the table.  In Part-4 we have put the name of the playfield sprite into a data file along with the collision table information.  And, we have written code to read the collision table information into memory.</P>

</FONT><B><FONT FACE="Arial" SIZE=4><P>&nbsp;</P>
<P>The Playfield.dat file:</P>
</B></FONT><FONT SIZE=2><P>This new file is the &quot;playfield.dat&quot; file and is an ordinary text file you create and edit on the PC.  The first line of the file is the name of the playfield sprite.  Each of the remaining 30 lines is the Collision Table, just as we defined it in Part-3.</P>
<P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>Adding the file to the application</P>
</B></I></FONT><FONT SIZE=2><P>This file is placed into the application by adding the following 2 lines into the <B><I>playfield.bld</B></I> file:</P>
<P>[files]</P>
<P>playfield1.dat</P>
<P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>Playfield1.dat:</P>
</B></I></FONT><FONT SIZE=2>
</FONT><FONT FACE="Courier New" SIZE=2><P>playfield.pic</P>
<P>..............................</P>
<P>..............................</P>
<P>..............................</P>
<P>..............................</P>
<P>..xxxxxxxxxxxxxxxxxxxxxxxxx...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..xxxxxxxxxxxxxxxxxxxxxxxxx...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..x...........x...........x...</P>
<P>..xxxxxxxxxxxxxxxxxxxxxxxxx...</P>
<P>..............................</P>
<P>..............................</P>
<P>..............................</P>
<P>..............................</P>
<P>..............................</P>
<P>&nbsp;</P>
</FONT><B><FONT SIZE=2><P>&nbsp;</P>
</FONT><FONT FACE="Arial" SIZE=4><P>The Program</P>
</B></FONT><FONT FACE="Courier New" SIZE=2><P>'''</P>
<P>''' playfield tutorial - part 4</P>
<P>''' putting the playfield in a file</P>
<P>'''</P>
<P>''' by greg smith</P>
<P>'''</P>

<P>'''</P>
<P>''' use c coordinates</P>
<P>'''</P>
<P>OPTION C_COORDS</P>

<P>'''</P>
<P>''' turn off escape processing for speed</P>
<P>'''</P>
<P>OPTION ESCAPE OFF</P>

<P>dim x as int  'position of lemming from 0-480</P>
<P>dim y as int  'position of lemming from 0-300</P>
<P>dim z_dir as int  'which direction of lemming</P>
<P>dim z_cnt as int  'animation image of lemming</P>

<P>dim sprite_field as int 'the sprite number of the playfield sprites</P>
<P>dim sprite_lemming as int   'the sprite number of the lemming sprites</P>
<P>dim lemming_left as int     'index into lemming sprite for going left</P>
<P>dim lemming_right as int    'index into lemming sprite for going right</P>
<P>dim lemming_up as int       'index into lemming sprite for going up</P>
<P>dim lemming_down as int     'index into lemming sprite for going down</P>

<P>dim collision_street as char     'the street's collision value</P>

<P>dim collision_table[30,31] as char 'the collision table</P>

<P>'''</P>
<P>''' update file - copy file from app to flash</P>
<P>'''</P>
<P>sub update_file(fname[] as char)</P>
<P>    inline File_remove(fname);</P>
<P>    inline _load(fname);</P>
<P>end sub</P>

<P>'''</P>
<P>''' initialization</P>
<P>'''</P>
<P>sub init</P>
<P>    update_file("playfield1.dat") 'get the .dat file into flash</P>

<P>&nbsp;</P>
<P>    sprite_field = 0  'playfield sprite</P>
<P>    sprite_lemming = 31    'lemming sprite is largest possible sprite - on top</P>

<P>    lemming_left=0        'lemming left image</P>
<P>    lemming_right=5       'lemming right image</P>
<P>    lemming_up=10         'lemming up image</P>
<P>    lemming_down=15       'lemming down image</P>

<P>    '''</P>
<P>    ''' the lemming has 20 bitmaps 5 for each direction</P>
<P>    sprite sprite_lemming, "lemming.pic"</P>

<P>    '''</P>
<P>    ''' the lemming can be anywhere on the playfield from</P>
<P>    ''' x = 0-480</P>
<P>    ''' y = 0-300</P>
<P>    x=240  'center of the playfield</P>
<P>    y=150  'center of the playfield</P>
<P>    z_dir=lemming_right  ' lemming faces right</P>
<P>    z_cnt=0              ' animation counter</P>

<P>    '''</P>
<P>    ''' set the collision flags</P>
<P>    '''</P>
<P>    collision_street = \x\</P>
<P>end sub</P>

<P>sub repaint</P>
<P>    dim field_x as int   '0,1,2 for the horizontal bitmap</P>
<P>    dim field_y as int   '0,1,2 for the vertical bitmap</P>
<P>    dim field as int     '0-8 for the bitmap currently visible</P>
<P>    dim lemming_x as int     '0-159 for the x coord on the screen</P>
<P>    dim lemming_y as int     '0-99  for the y coord on the screen</P>

<P>    field_x = x / 160    ' compute the horizontal bitmap</P>
<P>    field_y = y / 100    ' compute the vertical bitmap</P>
<P>    field = field_y*3 + field_x ' combine them to compute the bitmap number</P>

<P>    lemming_x = x mod 160  ' compute the lemming's position on the screen</P>
<P>    lemming_y = y mod 100  ' compute the lemming's position on the screen</P>

<P>    move sprite_field, 0, 0, field  'display the current field</P>
<P>    move sprite_lemming, lemming_x, lemming_y, z_dir+z_cnt 'display the lemming </P>

<P>    paper white  'transparent color for the lemming</P>
<P>    ink ltgrey</P>

<P>    redraw        'redraw all the sprites</P>
<P>    </P>
<P>end sub</P>

<P>'''</P>
<P>''' increment the z_cnt variable</P>
<P>'''</P>
<P>sub update_z_cnt</P>
<P>    z_cnt=(z_cnt+1) MOD 5</P>
<P>end sub</P>

<P>'''</P>
<P>''' check for collision against table</P>
<P>'''</P>
<P>function collision_check(x as int, y as int) as char</P>
<P>    collision_check = collision_table[y/10,x/16]</P>
<P>end function</P>

<P>'''</P>
<P>''' process the keyboard</P>
<P>'''</P>
<P>sub get_keys</P>
<P>    dim tmp as int</P>
<P>    if key(#KEY_UP) then   'move the lemming up</P>
<P>        tmp=y-3</P>
<P>        if collision_check(x,tmp) = collision_street then</P>
<P>            y=tmp</P>
<P>            z_dir=lemming_up</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>    end if</P>
<P>    if key(#KEY_DOWN) then 'move the lemming down</P>
<P>        tmp=y+3</P>
<P>        if collision_check(x,tmp) = collision_street then</P>
<P>            y=tmp</P>
<P>            z_dir=lemming_down</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>    end if</P>
<P>    if key(#KEY_LEFT) then 'move the lemming left</P>
<P>        tmp=x-3</P>
<P>        if collision_check(tmp,y) = collision_street then</P>
<P>            x=tmp</P>
<P>            z_dir=lemming_left</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>    end if</P>
<P>    if key(#KEY_RIGHT) then 'move the lemming right</P>
<P>        tmp=x+3</P>
<P>        if collision_check(tmp,y) = collision_street then</P>
<P>            x=tmp</P>
<P>            z_dir=lemming_right</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>    end if</P>
<P>end sub</P>

<P>'''</P>
<P>''' get a string from the file</P>
<P>''' a string ends in CR/LF</P>
<P>'''</P>
<P>sub getstring(f as int, s[] as char)</P>
<P>    dim x as char</P>
<P>    dim n as int</P>

<P>    n=0</P>

<P>    while(true)</P>
<P>        get f,,x</P>
<P>        if x&lt;&gt;13 then</P>
<P>            if x=10 then exit while</P>
<P>            s[n] = x</P>
<P>            s[n+1] = 0</P>
<P>            n=n+1</P>
<P>        endif</P>
<P>    wend</P>
<P>end sub</P>

<P>'''</P>
<P>''' read the playfield file defined by</P>
<P>''' 'field' and set up the sprites and</P>
<P>''' the collision table</P>
<P>'''</P>
<P>sub init_playfield(field as int)</P>
<P>    dim fname[32] as char</P>
<P>    dim s[32] as char</P>

<P>    cls</P>
<P>    print "Loading..."</P>

<P>    ''' create the filename to read</P>
<P>    sprint fname, "playfield", field, ".dat"</P>

<P>    ''' open the playfield definition file</P>
<P>    open fname for read as 1</P>

<P>    getstring(1, s) 'get the sprite name</P>

<P>    '''</P>
<P>    ''' the playfield sprite has 9 bitmaps</P>
<P>    ''' one for each of the different areas of the</P>
<P>    ''' playfield</P>
<P>    sprite sprite_field, s</P>

<P>    '''</P>
<P>    ''' read the 30 playfield collision rows</P>
<P>    '''</P>
<P>    for i=0 to 29</P>
<P>        getstring(1, collision_table[i])</P>
<P>    next</P>

<P>    '''</P>
<P>    ''' close the playfield.dat file</P>
<P>    '''</P>
<P>    close 1</P>
<P>end sub</P>

<P>'''</P>
<P>''' main subroutine</P>
<P>'''</P>
<P>sub mainsub</P>
<P>    init</P>
<P>    init_playfield(1)</P>

<P>    while true</P>
<P>        inline _escape(0); /* check the escape key */</P>
<P>        repaint</P>
<P>        get_keys</P>
<P>    wend</P>
<P>end sub</P>

<P>'''</P>
<P>''' call the main subroutine</P>
<P>'''</P>
<P>mainsub</P>
</FONT><FONT SIZE=2><P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>The Variables</P>
</B></I></FONT><FONT FACE="Courier New" SIZE=2><P>No new variables are introduced.</P>
</FONT><FONT SIZE=2><P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>Option Escape Off</P>
</B></I></FONT><FONT SIZE=2><P>Normally, B2C inserts a check for the ESC key at the top of every loop.  This check takes 1/10 of a second to perform.  For simple programs, this is not a problem.  But as a program becomes more advanced, there are more and more loops and the ESC key check becomes a serious performance bottleneck.  Specifying OPTION ESCAPE OFF tells B2C not to do ESC checking.  Thus enhancing performance.   However, it is now up to the programmer to insert the following line of code into their program at the top of a major loop:</P>

<P>inline _escape(0);</P>

<P>This will check the ESC key and display a dialog box if the key is detected.</P>
<P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>sub update_file</P>
</B></I></FONT><FONT SIZE=2><P>Update_file() will remove the specified file from the flash memory of the Cybiko and replace it with the same file from inside the application’s archive.  This is useful for files like .dl’s and data files (which must be in the flash memory to be opened by B2C).</P>

<P>The first command &quot;inline File_remove(fname)&quot; is a call to the Cybiko OS to remove the file in question from the flash.  The second command &quot;inline _load(fname)&quot; is a call to the B2C runtime library to copy a file from the archive into flash memory.</P>

<P>We will use this command to copy the &quot;playfield1.dat&quot; file from the application archive into flash memory.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub init</P>
</B></I></FONT><FONT SIZE=2><P>The sprite command defining the playfield has been moved to the <B><I>init_playfield()</B></I> function.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub repaint</P>
</B></I></FONT><FONT SIZE=2><P>there were no changes to this function.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub update_z_cnt</P>
</B></I></FONT><FONT SIZE=2><P>No changes here.</P>
</FONT><B><I><FONT FACE="Arial"><P>function collision_check</P>
</B></I></FONT><FONT SIZE=2><P>No changes here.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub get_keys</P>
</B></I></FONT><FONT SIZE=2><P>No changes here.</P>
<P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>sub getstring</P>
</B></I></FONT><FONT SIZE=2><P>This subroutine reads from an opened file until a carriage-return / line-feed is detected and returns the string in a variable.  This is a very handy function which you may want to reuse in other programs.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub init_playfield</P>
</B></I></FONT><FONT SIZE=2><P>This function has changed significantly.  We construct the filename by appending the <I>field</I> variable to the word &quot;playfield&quot; and then add on a &quot;.dat&quot;.  Thus, when <I>field</I>=1 the filename becomes &quot;playfield1.dat&quot;.</P>

<P>Then, we open a file with that name for read.  We read the first line of the file to get the sprite name of the playfield.  Finally we call the <I>sprite</I> command to load the sprite into memory.</P>

<P>Next we read the 30 lines of collision table data into the collision table.</P>

<P>And lastly we close the file and return.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub mainsub</P>
</B></I></FONT><FONT SIZE=2><P>The mainsub now calls the INIT_PLAYFIELD subroutine with a parameter of ‘1’.   Additionally, it calls the &quot;_escape(0)&quot; function from the C library using the <I>inline</I> command.  This tests the keyboard for the ESC key.  We do this just once at the top of the loop because it takes about 1/10 of a second to do this check.  Checking at the top of each loop (see OPTION ESCAPE description, above) takes too much time and slows the program perceptibly.</P></FONT></BODY>
</HTML>
