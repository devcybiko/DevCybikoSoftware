<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Part 6 : Static Sprites</TITLE>
</HEAD>
<BODY>

<B><FONT FACE="Arial" SIZE=5><P ALIGN="CENTER">Playfield Graphics Tutorial</P>
<P ALIGN="CENTER">Part 6 – Static Sprites</P>
</B></FONT><FONT SIZE=2><P ALIGN="CENTER">by Greg Smith</P>
</FONT><B><FONT FACE="Arial" SIZE=4><P>Introduction:</P>
</B></FONT><FONT SIZE=2><P>Part-4 demonstrated how to put the collision data into a file.  In Part-5 we implemented multiple playfields to extend the game play.  Now, in Part-6, we add static (or stationary) sprites.  These are objects that the lemming can &quot;pick up&quot; and do not move.</P>
</FONT><B><FONT FACE="Arial" SIZE=4><P>Money &amp; Points</P>
</B></FONT><FONT SIZE=2><P>In this example, the lemming has a goal.  The goal is to collect all the money on the 2 screens.  There is a money sprite at each intersection of the roads in the lemming’s world.  Each pile of money is worth 100 dollars and when the lemming collects the money, a sound will be emitted.  Naturally, when the money is collected, it must disappear from view, giving the illusion that the lemming removed it from the world-view.</P>
</FONT><B><FONT FACE="Arial" SIZE=4><P>Types</P>
</B></FONT><FONT SIZE=2><P>Part-6 introduces a B2C Language feature you may not have encountered before.  It is called a &quot;Type&quot;.  A Type is a user-supplied collection of variables.  In our example, we want to supply each sprite with an x,y coordinate, a playfield it belongs to, a screen within the playfield, a sound, a dollar value, and a sprite number.  </P>

<P>Under other conditions we might have to create separate variables for each of these items, and collect them together in arrays – one for each stationary sprite.  But with Types we collect them into one large variable… like this:</P>

</FONT><FONT FACE="Courier New" SIZE=2><P>type obj</P>
<P>    mysprite as int</P>
<P>    x as int</P>
<P>    y as int</P>
<P>    screen as int</P>
<P>    amt as int</P>
<P>    sound[32] as char</P>
<P>end type</P>
</FONT><FONT SIZE=2>
<P>Here we have created a new user type called &quot;Obj&quot; (short for object).  Mysprite is the name of the entry for the sprite number of the money.  X, and y are the entries for the position on the screen to position the sprite.  Screen is the number of the screen (0-9) which this sprite belongs on.  Amt is the dollar amount for the sprite and sound is the sound to play whenever the sprite is encountered.</P>

<P>To use this practically, we have to create an array of these types.  This is done simply:</P>
</FONT><FONT FACE="Courier New" SIZE=2>
<P>dim objs[2,10] as obj</P>

</FONT><FONT SIZE=2><P>Now we have 20 of these objects to use as we wish (an array of 2 x 10).  The first dimension is the playfield the sprite belongs on (0,1), the second is for which sprite (0-9).</P>

<P>Accessing the elements is done with the &quot;dot&quot; operator – &quot;.&quot;.  You first select which object you want with the array designator [i,j] then use the dot operator to select the Type element.  For example, to get the sprite’s sound you would use: objs[1,3].sound</P>
</FONT><B><FONT FACE="Arial" SIZE=4><P>The Program</P>
</B></FONT><FONT FACE="Courier New" SIZE=2><P>'''</P>
<P>''' playfield tutorial - part 6</P>
<P>''' stationary sprites</P>
<P>'''</P>
<P>''' by greg smith</P>
<P>'''</P>

<P>'''</P>
<P>''' use c coordinates</P>
<P>'''</P>
<P>OPTION C_COORDS</P>

<P>'''</P>
<P>''' turn off escape processing for speed</P>
<P>'''</P>
<P>OPTION ESCAPE OFF</P>

<P>dim x as int  'position of lemming from 0-480</P>
<P>dim y as int  'position of lemming from 0-300</P>
<P>dim z_dir as int  'which direction of lemming</P>
<P>dim z_cnt as int  'animation image of lemming</P>

<P>dim sprite_field as int 'the sprite number of the playfield sprites</P>
<P>dim sprite_lemming as int   'the sprite number of the lemming sprites</P>
<P>dim lemming_left as int     'index into lemming sprite for going left</P>
<P>dim lemming_right as int    'index into lemming sprite for going right</P>
<P>dim lemming_up as int       'index into lemming sprite for going up</P>
<P>dim lemming_down as int     'index into lemming sprite for going down</P>

<P>dim collision_street as char     'the street's collision value</P>
<P>dim collision_pf0 as char        'playfield 0</P>
<P>dim collision_pf9 as char        'playfield 9</P>

<P>dim collision_table[30,31] as char 'the collision table</P>

<P>dim sprite_ctr as int        'the next sprite to be allocated</P>
<P>dim current_playfield as int 'the current playfield onscreen</P>
<P>dim points as long           'your score</P>
<P>dim n_playfields as int      'the number of playfields</P>

<P>type obj                     'the sprite object</P>
<P>    mysprite as int          'my sprite number</P>
<P>    x as int                 'x coord on screen (0-159)</P>
<P>    y as int                 'y coord on screen (0-99)</P>
<P>    screen as int            'screen within playfield (0-9)</P>
<P>    amt as int               'points for catching this sprite</P>
<P>    sound[32] as char        'the sound to make</P>
<P>end type</P>

<P>dim objs[2,10] as obj        'all the sprites</P>

<P>'''</P>
<P>''' setup object</P>
<P>'''</P>
<P>'''</P>
<P>''' update file - copy file from app to flash</P>
<P>'''</P>
<P>sub update_file(fname[] as char)</P>
<P>    inline File_remove(fname);</P>
<P>    inline _load(fname);</P>
<P>end sub</P>

<P>'''</P>
<P>''' initialization</P>
<P>'''</P>
<P>sub init</P>
<P>    update_file("playfield1.dat") 'get the .dat file into flash</P>
<P>    update_file("playfield2.dat")</P>

<P>    sprite_field = 0       'playfield sprite</P>
<P>    sprite_lemming = 31    'lemming sprite is largest possible sprite - on top</P>

<P>    lemming_left=0        'lemming left image</P>
<P>    lemming_right=5       'lemming right image</P>
<P>    lemming_up=10         'lemming up image</P>
<P>    lemming_down=15       'lemming down image</P>

<P>    '''</P>
<P>    ''' the lemming has 20 bitmaps 5 for each direction</P>
<P>    sprite sprite_lemming, "lemming.pic"</P>

<P>    '''</P>
<P>    ''' the lemming can be anywhere on the playfield from</P>
<P>    ''' x = 0-480</P>
<P>    ''' y = 0-300</P>
<P>    x=240  'center of the playfield</P>
<P>    y=150  'center of the playfield</P>
<P>    z_dir=lemming_right  ' lemming faces right</P>
<P>    z_cnt=0              ' animation counter</P>

<P>    '''</P>
<P>    ''' set the collision flags</P>
<P>    '''</P>
<P>    collision_street = \x\</P>
<P>    collision_pf0 = \0\</P>
<P>    collision_pf9 = \9\</P>

<P>    sprite_ctr=1    'initialize the sprite counter</P>
<P>    obj_init_all    'init all objects</P>
<P>    points = 0      'reset points</P>

<P>    n_playfields = 2   'maximum number of playfields</P>
<P>end sub</P>

<P>sub repaint</P>
<P>    dim field_x as int   '0,1,2 for the horizontal bitmap</P>
<P>    dim field_y as int   '0,1,2 for the vertical bitmap</P>
<P>    dim field as int     '0-8 for the bitmap currently visible</P>
<P>    dim lemming_x as int     '0-159 for the x coord on the screen</P>
<P>    dim lemming_y as int     '0-99  for the y coord on the screen</P>
<P>    dim obj_x as int        ' position of the object</P>
<P>    dim obj_y as int        ' position of the object</P>
<P>    dim obj_field_x as int</P>
<P>    dim obj_field_y as int</P>
<P>    dim obj_field as int</P>
<P>    dim i as int</P>

<P>    field_x = x / 160    ' compute the horizontal bitmap</P>
<P>    field_y = y / 100    ' compute the vertical bitmap</P>
<P>    field = field_y*3 + field_x ' combine them to compute the bitmap number</P>

<P>    lemming_x = x mod 160  ' compute the lemming's position on the screen</P>
<P>    lemming_y = y mod 100  ' compute the lemming's position on the screen</P>

<P>    move sprite_field, 0, 0, field  'display the current field</P>
<P>    move sprite_lemming, lemming_x, lemming_y, z_dir+z_cnt 'display the lemming </P>

<P>    paper white  'transparent color for the lemming</P>
<P>    ink ltgrey</P>

<P>    '''</P>
<P>    ''' iterate across all sprites and either display or hide them</P>
<P>    '''</P>
<P>    for i=0 to n_playfields-1 </P>
<P>      for j=0 to 9 'objects</P>
<P>        '''</P>
<P>        ''' if the sprite is on the current playfield</P>
<P>        ''' and the sprite is not hidden (x=-1) then</P>
<P>        ''' if the sprite is on the current screen then display it</P>
<P>        if i=current_playfield and objs[i,j].x &gt;= 0 then</P>
<P>            if objs[i,j].screen = field then ' is the sprite on-screen?</P>
<P>                move objs[i,j].mysprite, objs[i,j].x, objs[i,j].y</P>
<P>            else</P>
<P>                move objs[i,j].mysprite, 160, 100 'hide sprite</P>
<P>            endif</P>
<P>        else</P>
<P>            move objs[i,j].mysprite, 160, 100 'hide sprite</P>
<P>        endif</P>
<P>      next 'j</P>
<P>    next 'i</P>

<P>    '''</P>
<P>    ''' display points</P>
<P>    '''</P>
<P>    ink white</P>
<P>    font "mini_bold_font"</P>
<P>    printxy 0,0,points</P>

<P>    redraw        'redraw all the sprites</P>
<P>end sub</P>

<P>'''</P>
<P>''' increment the z_cnt variable</P>
<P>'''</P>
<P>sub update_z_cnt</P>
<P>    z_cnt=(z_cnt+1) MOD 5</P>
<P>end sub</P>

<P>'''</P>
<P>''' check for collision against table</P>
<P>'''</P>
<P>function collision_check(x as int, y as int) as char</P>
<P>    collision_check = collision_table[y/10,x/16]</P>
<P>end function</P>

<P>'''</P>
<P>''' transport lemming to another playfield</P>
<P>'''</P>
<P>sub transport(f as int)</P>
<P>    init_playfield(f)</P>
<P>    if f=1 then</P>
<P>        x=240</P>
<P>        y=150</P>
<P>    elseif f=2 then</P>
<P>        x=230</P>
<P>        y=150</P>
<P>    endif</P>
<P>end sub</P>

<P>'''</P>
<P>''' process the keyboard</P>
<P>'''</P>
<P>sub get_keys</P>
<P>    dim tmp as int</P>
<P>    dim cc as int</P>

<P>    if key(#KEY_UP) then   'move the lemming up</P>
<P>        tmp=y-3</P>
<P>        cc = collision_check(x,tmp)</P>
<P>        if cc = collision_street then</P>
<P>            y=tmp</P>
<P>            z_dir=lemming_up</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>        if cc &gt;= collision_pf0 and cc &lt;= collision_pf9 then</P>
<P>            transport(cc-collision_pf0)</P>
<P>        end if</P>
<P>    end if</P>
<P>    if key(#KEY_DOWN) then 'move the lemming down</P>
<P>        tmp=y+3</P>
<P>        cc = collision_check(x,tmp)</P>
<P>        if cc = collision_street then</P>
<P>            y=tmp</P>
<P>            z_dir=lemming_down</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>        if cc &gt;= collision_pf0 and cc &lt;= collision_pf9 then</P>
<P>            transport(cc-collision_pf0)</P>
<P>        end if</P>
<P>    end if</P>
<P>    if key(#KEY_LEFT) then 'move the lemming left</P>
<P>        tmp=x-3</P>
<P>        cc = collision_check(tmp,y)</P>
<P>        if cc = collision_street then</P>
<P>            x=tmp</P>
<P>            z_dir=lemming_left</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>        if cc &gt;= collision_pf0 and cc &lt;= collision_pf9 then</P>
<P>            transport(cc-collision_pf0)</P>
<P>        end if</P>
<P>    end if</P>
<P>    if key(#KEY_RIGHT) then 'move the lemming right</P>
<P>        tmp=x+3</P>
<P>        cc = collision_check(tmp,y)</P>
<P>        if cc = collision_street then</P>
<P>            x=tmp</P>
<P>            z_dir=lemming_right</P>
<P>            update_z_cnt</P>
<P>        end if</P>
<P>        if cc &gt;= collision_pf0 and cc &lt;= collision_pf9 then</P>
<P>            transport(cc-collision_pf0)</P>
<P>        end if</P>
<P>    end if</P>
<P>end sub</P>

<P>'''</P>
<P>''' get a string from the file</P>
<P>''' a string ends in CR/LF</P>
<P>'''</P>
<P>sub getstring(f as int, s[] as char)</P>
<P>    dim x as char</P>
<P>    dim n as int</P>

<P>    n=0</P>

<P>    while(true)</P>
<P>        get f,,x</P>
<P>        if x&lt;&gt;13 then</P>
<P>            if x=10 then exit while</P>
<P>            s[n] = x</P>
<P>            s[n+1] = 0</P>
<P>            n=n+1</P>
<P>        endif</P>
<P>    wend</P>
<P>end sub</P>

<P>sub obj_init(pfld as int, objno as int, fname[] as char, x as int, y as int, amt as int, sound[] as char)</P>
<P>    objs[pfld,objno].x = x mod 160</P>
<P>    objs[pfld,objno].y = y mod 100</P>
<P>    objs[pfld,objno].screen = (x/160)+(y/100)*3</P>
<P>    objs[pfld,objno].mysprite = sprite_ctr</P>
<P>    objs[pfld,objno].amt = amt</P>
<P>    objs[pfld,objno].sound = sound</P>
<P>    sprite sprite_ctr, fname</P>
<P>    move sprite_ctr, 160, 100 'hide sprite</P>
<P>    sprite_ctr = sprite_ctr+1</P>
<P>end sub</P>

<P>'''</P>
<P>''' init all objects</P>
<P>'''</P>
<P>sub obj_init_all</P>

<P>    print "Loading Sprites..."</P>

<P>    obj_init(0, 0, "money.pic", 32,50,100, "money.mus")</P>
<P>    obj_init(0, 1, "money.pic", 20,140,100, "money.mus")</P>
<P>    obj_init(0, 2, "money.pic", 20,240,100, "money.mus")</P>
<P>    obj_init(0, 3, "money.pic", 224,40,100, "money.mus")</P>
<P>    obj_init(0, 4, "money.pic", 224,140,100, "money.mus")</P>
<P>    obj_init(0, 5, "money.pic", 224,240,100, "money.mus")</P>
<P>    obj_init(0, 6, "money.pic", 432,40,100, "money.mus")</P>
<P>    obj_init(0, 7, "money.pic", 432,110,100, "money.mus")</P>
<P>    obj_init(0, 8, "money.pic", 432,170,100, "money.mus")</P>
<P>    obj_init(0, 9, "money.pic", 432,240,100, "money.mus")</P>

<P>    print "Still Loading Sprites..."</P>

<P>    obj_init(1, 0, "money.pic", -1, -1, 100, "money.mus")</P>
<P>    obj_init(1, 1, "money.pic", 64, 40, 100, "money.mus")</P>
<P>    obj_init(1, 2, "money.pic", 64,140, 100, "money.mus")</P>
<P>    obj_init(1, 3, "money.pic", 64,260, 100, "money.mus")</P>
<P>    obj_init(1, 4, "money.pic",224, 40, 100, "money.mus")</P>
<P>    obj_init(1, 5, "money.pic",224,140, 100, "money.mus")</P>
<P>    obj_init(1, 6, "money.pic",224,260, 100, "money.mus")</P>
<P>    obj_init(1, 7, "money.pic",384, 40, 100, "money.mus")</P>
<P>    obj_init(1, 8, "money.pic",384,140, 100, "money.mus")</P>
<P>    obj_init(1, 9, "money.pic",384,260, 100, "money.mus")</P>
<P>end sub</P>

<P>'''</P>
<P>''' read the playfield file defined by</P>
<P>''' 'field' and set up the sprites and</P>
<P>''' the collision table</P>
<P>'''</P>
<P>sub init_playfield(field as int)</P>
<P>    dim fname[32] as char</P>
<P>    dim s[32] as char</P>

<P>    current_playfield = field-1</P>

<P>    ''' create the filename to read</P>
<P>    sprint fname, "playfield", field, ".dat"</P>

<P>    ''' open the playfield definition file</P>
<P>    open fname for read as 1</P>

<P>    getstring(1, s) 'get the sprite name</P>

<P>    '''</P>
<P>    ''' the playfield sprite has 9 bitmaps</P>
<P>    ''' one for each of the different areas of the</P>
<P>    ''' playfield</P>
<P>    sprite sprite_field, s</P>

<P>    '''</P>
<P>    ''' read the 30 playfield collision rows</P>
<P>    '''</P>
<P>    for i=0 to 29</P>
<P>        getstring(1, collision_table[i])</P>
<P>    next</P>

<P>    '''</P>
<P>    ''' close the playfield.dat file</P>
<P>    '''</P>
<P>    close 1</P>
<P>end sub</P>

<P>'''</P>
<P>''' check collisions</P>
<P>'''</P>
<P>sub check_collisions</P>
<P>    dim i as int</P>
<P>    dim j as int</P>

<P>    i = current_playfield</P>
<P>    for j=0 to 9</P>
<P>        if collision(sprite_lemming, objs[i,j].mysprite) then</P>
<P>            objs[i,j].x=-1 ' turn off this sprite</P>
<P>            points = points + objs[i,j].amt</P>
<P>            music foreground, objs[i,j].sound</P>
<P>            music foreground, play</P>
<P>        end if</P>
<P>    next</P>
<P>end sub</P>

<P>'''</P>
<P>''' main subroutine</P>
<P>'''</P>
<P>sub mainsub</P>
<P>    init</P>
<P>    init_playfield(1)</P>

<P>    while true</P>
<P>        inline _escape(0); /* check the escape key */</P>
<P>        repaint</P>
<P>        get_keys</P>
<P>        check_collisions</P>
<P>    wend</P>
<P>end sub</P>

<P>'''</P>
<P>''' call the main subroutine</P>
<P>'''</P>
<P>mainsub</P>
</FONT><B><I><FONT FACE="Arial"><P>&nbsp;</P>
<P>New Variables</P>
</B></I></FONT><FONT SIZE=2><P>Several new variables are introduced including a new data type.  Sprite_ctr keeps track of the last sprite we used.  Current_playfield is the currently selected playfield.  Points is introduced to keep track of the number of points we’ve accumulated.  And n_playfields tells us how many playfields we will be playing on.</P>

<P>We’ve already reviewed the use of the Type command and the new type Obj.  Objs keeps track of all the objects on the screen.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub update_file</P>
</B></I></FONT><FONT SIZE=2><P>no changes here.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub init</P>
</B></I></FONT><FONT SIZE=2><P>sprite_ctr is initialized to 1 and obj_init_all is called to initialize all the sprites.  The points variable is initialized to zero.  We set the n_playfields to 2.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub repaint</P>
</B></I></FONT><FONT SIZE=2><P>A large loop was added here to display the dollar-sprites.  It is a doubly-nested loop.  The ‘I’ variable goes from 0 to n_playfields-1 (0,1).  This selects the sprite by playfield.  The inner loop (j) goes from 0 to 9 iterating across each sprite in the playfield.</P>

<P>If the sprite is in the current playfield (I=current_playfield) and its not off screen (its x value is not negative – we set the x to –1 when the money is picked up), then if  the screen the sprite is on is the currently displayed screen, then position the sprite on-screen.  Otherwise the sprite is positioned off-screen (x=160 and y=100).</P>

<P>We also display the points on the screen for the first time.  This version of the tutorial will have a &quot;blinking&quot; points value.  This is because the points are on-screen for a short period of time before the &quot;redraw&quot; command clobbers it by redrawing all the sprites.  We’ll cover this problem in the next tutorial.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub update_z_cnt</P>
</B></I></FONT><FONT SIZE=2><P>No changes here.</P>
</FONT><B><I><FONT FACE="Arial"><P>function collision_check</P>
</B></I></FONT><FONT SIZE=2><P>No changes here.</P>
</FONT><FONT FACE="Courier New" SIZE=2><P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>sub transport</P>
</B></I></FONT><FONT SIZE=2><P>No Changes here.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub get_keys</P>
</B></I></FONT><FONT SIZE=2><P>No Changes Here.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub getstring</P>
</B></I></FONT><FONT SIZE=2><P>no changes here</P>
</FONT><B><I><FONT FACE="Arial"><P>sub obj_init</P>
</B></I></FONT><FONT SIZE=2><P>This subroutine will take playfield coordinates for the sprite and initialize the variables of the object type array.  The X and Y variables are in &quot;playfield coordinates&quot; which range from (0,0) to (479,299).  With them we compute the screen the sprite belongs on and the screen coordinates (0,0) to (159,99).  This is the same mathematics used to position the lemming.</P>
<P>The my_sprite element of the object is set to sprite_ctr and sprite_ctr is incremented.  The sprite is loaded with the &quot;fname&quot; variable and we initially hide the sprite by moving it to 160,100 (off-screen coords).  The sound of the sprite is also stored.</P>
<P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>sub obj_init_all</P>
</B></I></FONT><FONT SIZE=2><P>Here we initialize all the dollar-sprites by calling obj_init.  Notice that one of the objects is positioned at &quot;-1,-1&quot;.  This is because we don’t want it on the screen at all.  As I mentioned earlier (in the repaint sub) an x coordinate of –1 indicates the object has been collected.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub init_playfield</P>
</B></I></FONT><FONT SIZE=2><P>no changes here</P>
<P>&nbsp;</P>
</FONT><B><I><FONT FACE="Arial"><P>sub check_collisions</P>
</B></I></FONT><FONT SIZE=2><P>This subroutine checks for collisions between the lemming and the dollar-sprites. For each sprite in the current playfield we check to see if there is a collision between the lemming and the dollar-sprite.  If so, then we increment the points scored, play the music, and effectively &quot;delete&quot; the sprite by setting the X element to –1.</P>
</FONT><B><I><FONT FACE="Arial"><P>sub mainsub</P>
</B></I></FONT><FONT SIZE=2><P>no changes here</P></FONT></BODY>
</HTML>
