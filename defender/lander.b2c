dim lander_n as int
lander_n = 10
dim lander_ctr as int
dim lander_x[10] as int
dim lander_y[10] as int
dim lander_z[10] as int
dim lander_man[10] as int
dim lander_dx[10] as int
dim lander_dy[10] as int
dim lander_delay[10] as int
dim lander_falling[10] as int
dim lander_on[10] as int
dim lander_seeking[10] as int
dim lander_lifting[10] as int
dim lander_mutant[10] as int
dim lander_max_delay as int
dim lander_hunger as int

sub lander_init_one(a as int)
    lander_on[a] = 0
    lander_delay[a] = lander_max_delay
end sub

sub lander_init_all
    dim n as int

    for i=0 to lander_n-1
        lander_on[i] = 0
    next
    n = lander_n
    if lander_ctr < lander_n then n = lander_ctr
    for i=0 to n-1
        lander_materialize(i)
    next
end sub

sub lander_init
  sprite sprite_lander, "lander.pic"
  lander_max_delay = 1
end sub

sub lander_explode(i as int)
    lander_on[i] = 0
    points = points + 100
    if lander_mutant[i] then points = points + 50
    lander_ctr = lander_ctr - 1
    explosion_begin(lander_x[i], lander_y[i], lander_dx[i], lander_dy[i], "lander_explode.mus")
    lander_materialize(i)
end sub

sub lander_redraw_one(i as int)
    dim x as int
    dim y as int

    if lander_on[i]=0 then exit sub

    x = lander_x[i]-pf_x
    if x<-1268 then
        x = 1280 + x
    elseif x> 1268 then
        x = x - 1280
    elseif x<-12 then
        x = x + 1280
    endif

    if -12<=x and x<160 then
        move sprite_lander, x, lander_y[i], lander_z[i]
        if shot_collision(sprite_lander) then
            if lander_lifting[i] then
              man_drop(lander_lifting[i]-1)
              lander_lifting[i] = 0
            end if
            lander_explode(i)
        elseif collision(sprite_ship, sprite_lander) and ship_hit=0 then
            explosion_begin(ship_x, ship_y, 0, 0, "lander_explode.mus")
            ship_hit = 1
            lander_explode(i)
        else
            redraw sprite_lander
        endif
    end if
    x = (x / 20 + 28) mod 64
    y = lander_y[i]/6
    xpoint(x+48,y)

end sub

sub lander_redraw
  for i = 0 to lander_n-1
      lander_redraw_one(i)
  next
end sub

sub lander_normal_move_one(i as int)
    dim l0 as int
    dim l1 as int
    dim l2 as int
    dim x as int
    dim seeking as int
    dim lifting as int
    dim man as int

    ' compute man we're seeking
    seeking = lander_seeking[i]
    if seeking then man = seeking-1

    lifting = lander_lifting[i]
    if lifting then man = lifting-1

    ' determine if the lander is near the landscape
    x = lander_x[i]-6
    if x<0 then x=x+1280
    l0 = 58+landscape[x/20]-11

    x = lander_x[i]+6
    if x > 1279 then x = x - 1280
    l1 = 58+landscape[x/20]-11

    x = lander_x[i]+17
    if x > 1279 then x = x - 1280
    l2 = 58+landscape[x/20]-11

    ' stop lander from falling if near mountain
    if lander_y[i] > l1 then lander_falling[i] = 0

    ' if lander is falling then dy=1
    if lander_falling[i] then
        lander_dy[i] = 1

    ' if we're above the mountain go down
    elseif lander_y[i] < l1 then
        lander_dy[i] = 1

    ' if we're below the mountain go up
    elseif lander_y[i] > l1 then
        lander_dy[i] = -1
        lander_falling[i] = 0

    ' otherwise dont move up or down, stay the course
    else
        lander_dy[i] = 0
    endif

    ' if we are seeking an alien then move in that direction
    if seeking then
        lander_dx[i] = sgn(man_x[man]-lander_x[i])*4
        lander_dy[i] = 1
    endif

    ' if we're lifting an alien
    if lander_lifting[i] then
        ' move straight up
        lander_dx[i]=0
        lander_dy[i]=-1
        'man moves straight up with lander
        man_dx[man]=0
        man_x[man]=lander_x[i]
        man_y[man]=lander_y[i]+12
    endif

    ' lander found man it seeks
    if lander_y[i] = 80 and seeking and lander_x[i] = man_x[man] then
        lander_lifting[i] = seeking
        lander_seeking[i] = 0
        man_lifting[man] = i+1
        music foreground, "man_lifting.mus"
        music foreground, play
    endif

    'become a mutant
    if lander_y[i] <= 15 and lander_lifting[i] then
        man_on[man] = 0
        man_ctr = man_ctr - 1
        lander_lifting[i] = 0
        lander_mutant[i] = 1
        lander_z[i] = 4
        music foreground, "lander_mutant.mus"
        music foreground, play
    endif

    if rnd(100)<lander_hunger then bullet_begin(lander_x[i], lander_y[i])

end sub

sub lander_mutant_move_one(i as int)

    ' we are seeking the ship so move in that direction
    lander_dx[i] = sgn(ship_x+(rnd(16)-8)-lander_x[i])*8
    lander_dy[i] = sgn(ship_y+(rnd(8)-4)-lander_y[i])*4

end sub

sub lander_move_one(i as int)

    ' get out early if this guy is dead, jim
    if NOT lander_on[i] then exit sub

    ' check if the lander has timed out
    lander_delay[i] = lander_delay[i] - 1
    if lander_delay[i] <> 0 then exit sub

    ' reset the lander timer
    lander_delay[i] = lander_max_delay

    ' animate
    lander_z[i] = lander_z[i] + 1
    if lander_mutant[i] then
        if lander_z[i] >= 8 then lander_z[i] = 4
    else
        if lander_z[i] >= 4 then lander_z[i] = 0
    end if

    if lander_mutant[i] then
        lander_mutant_move_one(i)
    else
        lander_normal_move_one(i)
    end if

    ' move in the x direction
    lander_x[i] = lander_x[i] + lander_dx[i]
    if lander_x[i] < 0 then lander_x[i] = lander_x[i] + 1280        
    if lander_x[i] > 1279 then lander_x[i] = lander_x[i] - 1280

    lander_y[i] = lander_y[i] + lander_dy[i]
    if lander_y[i] >= 80 then lander_y[i] = 80
    if lander_y[i] <= 15 then lander_y[i] = 15

end sub

sub lander_move_all
    dim man
    for i=0 to lander_n-1
        if in_space then
            lander_mutant[i]=1
            lander_z[i]=4
        end if
        if lander_seeking[i]=0 then
            if (rnd(100) < lander_hunger) then
                man = rnd(man_n-1)
                lander_seeking[i] = man+1

                if NOT man_on[man] then lander_seeking[i]=0
                if man_seeking[man] or man_lifting[i] or man_carried[i] or man_falling[i] then
                    lander_seeking[i]=0
                else
                    man_seeking[man] = i+1 'point to the lander seeking me
                end if
            endif
        endif
        lander_move_one(i)
    next
end sub

function landers_current
    landers_current = 0
    for i=0 to lander_n-1
        if lander_on[i] then landers_current = landers_current + 1
    next
end function

sub lander_materialize(i as int)

    if (lander_ctr > landers_current) then
        lander_x[i] = rnd(1279)
        lander_y[i] = 15
        lander_z[i] = 0
        lander_on[i] = 1
        lander_mutant[i] = in_space
        lander_dx[i] = rnd(1);
        if lander_dx[i] = 0 then
            lander_dx[i] = -4
        else
            lander_dx[i] = 4
        endif

        lander_dy[i] = 1
        lander_falling[i] = 1
        lander_seeking[i] = 0
        lander_lifting[i] = 0
        lander_man[i] = 0
        lander_delay[i] = lander_max_delay
    end if
end sub

